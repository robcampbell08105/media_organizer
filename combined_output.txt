--- Content of ./utils/file_mover.py ---
import os
import re
import subprocess
from datetime import datetime
from pathlib import Path

# Import db-backed processor skip logic if needed
from db_connection import is_processed  # Optional ‚Äî depends on integration

def extract_create_date(file_path):
    file_name = os.path.basename(file_path)

    # PXL fallback from filename
    pxl_match = re.match(r"PXL_(\d{6})_", file_name)
    if pxl_match:
        try:
            ts = "20" + pxl_match.group(1)
            return datetime.strptime(ts, "%Y%m%d").date()
        except Exception:
            pass

    # ExifTool fallback
    try:
        result = subprocess.run(["exiftool", "-CreateDate", file_path],
                                capture_output=True, text=True, check=True)
        line = result.stdout.strip().split(": ", 1)[-1].split()[0]
        cleaned = line.replace(":", "-", 2)
        return datetime.strptime(cleaned, "%Y-%m-%d").date()
    except Exception:
        return None

def is_tiktok(file_path):
    base = os.path.basename(file_path)
    return len(base) == 32 and base.isalnum()

def move_file(file_path, target_base, dry_run=False, verbose=False):
    date = extract_create_date(file_path)
    if not date:
        if verbose: print(f"[SKIP] No date found: {file_path}")
        return

    target_dir = Path(target_base) / str(date)
    target_dir.mkdir(parents=True, exist_ok=True)
    filename = os.path.basename(file_path)
    target_file = target_dir / filename

    if target_file.exists():
        if verbose: print(f"[SKIP] Already exists in {target_dir}: {filename}")
        return

    rsync_cmd = ["rsync", "-rltD"]
    if not dry_run:
        rsync_cmd.append("--remove-source-files")
    rsync_cmd += [file_path, str(target_dir)]

    print(f"{'[DRY_RUN]' if dry_run else '[MOVE]'} {file_path} ‚Üí {target_dir}")
    subprocess.run(rsync_cmd)

    if not dry_run:
        subprocess.run(["exiftool",
                        f"-CreateDate={date}", f"-ModifyDate={date}", f"-DateTimeOriginal={date}",
                        "-overwrite_original", str(target_file)],
                       stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        subprocess.run(["touch", "-d", str(date), str(target_file)])

def pick_sources_interactively(base_dirs=None):
    base_dirs = base_dirs or ["/mnt", str(Path.home() / "mnt"), "/media", "/run/media"]
    candidates = []

    for base in base_dirs:
        if os.path.exists(base):
            for entry in os.listdir(base):
                full_path = os.path.join(base, entry)
                if os.path.isdir(full_path):
                    candidates.append(full_path)

    if not candidates:
        print("No candidate media sources found.")
        return []

    print("\nüìÅ Found the following media source directories:")
    for i, path in enumerate(candidates, 1):
        print(f"  [{i}] {path}")

    choice = input("\nSelect one or more sources (e.g. 1 3 5 or press Enter to skip): ").strip()
    if not choice:
        return []

    selected = []
    try:
        indexes = [int(i) for i in choice.split()]
        for i in indexes:
            if 1 <= i <= len(candidates):
                selected.append(candidates[i - 1])
    except Exception:
        print("Invalid input. No sources selected.")
        return []

    return selected

def resolve_target(file_path, mode="local"):
    home = Path.home()
    remote_base = Path("/multimedia")

    if is_tiktok(file_path):
        return {
            "local": home / "Videos" / "TikTok",
            "remote": remote_base / "videos" / "TikTok"
        }.get(mode)

    if "Novatek" in file_path or "CARDV" in file_path or "DASHCAM" in file_path:
        return {
            "local": home / "Videos" / "DC",
            "remote": remote_base / "videos" / "DC"
        }.get(mode)

    if re.search(r"\.(jpg|jpeg|png|gif|heic|tif|tiff|nef|dng|raw)$", file_path, re.IGNORECASE):
        return {
            "local": home / "Pictures",
            "remote": remote_base / "photos"
        }.get(mode)

    if re.search(r"\.(mp4|mov|avi|mkv|webm|3gp|mpeg|mpg)$", file_path, re.IGNORECASE):
        return {
            "local": home / "Videos",
            "remote": remote_base / "videos"
        }.get(mode)

    return None

def process_sources(sources, mode="local", dry_run=False, verbose=False, debug=False, db_conn=None):
    if not sources:
        print("No media sources provided.")
        return

    for source in sources:
        print(f"\nüîç Scanning: {source}")
        for root, _, files in os.walk(source):
            for name in files:
                file_path = os.path.join(root, name)

                if ".thumbnail" in file_path or ".thumbnails" in file_path:
                    if verbose: print(f"[SKIP] Thumbnail file: {file_path}")
                    continue

                if db_conn and is_processed(db_conn, file_path):
                    if verbose: print(f"[SKIP] Already processed: {file_path}")
                    continue

                target = resolve_target(file_path, mode=mode)
                if not target:
                    if debug: print(f"[SKIP] Unknown target for: {file_path}")
                    continue

                move_file(file_path, target, dry_run=dry_run, verbose=verbose)


--- Content of ./utils/media_utils.py ---
# utils/media_utils.py

import os
import re
from datetime import datetime
from db_connection import safe_query as execute_query
from app_utils import load_metadata_mappings
import logger

MAPPINGS = load_metadata_mappings()

def get_existing_media_record(db_conn, file_name, media_type, logger):
    try:
        logger.debug("Using context-managed cursor to fetch existing record")
        query = f"SELECT * FROM {media_type} WHERE file_name = %s"
        with db_conn.cursor(buffered=True) as cursor:
            cursor.execute(query, (file_name,))
            row = cursor.fetchone()
            if not row:
                return None
            column_names = [desc[0] for desc in cursor.description]  # ‚Üê MOVE THIS HERE
            return dict(zip(column_names, row))                      # ‚Üê AND THIS
    except Exception as e:
        logger.error(f"Failed to fetch record for {file_name}: {e}")
        return None

def sanitize_metadata(raw_metadata, mapping, logger, file_path=None):
    clean = {}
    logger.debug(f"Raw metadata received: {raw_metadata}")
    logger.debug(f"Mapped fields: {mapping}")

    for exif_key, db_field in mapping.items():
        raw_value = raw_metadata.get(exif_key)
        if raw_value in ("", None, "0000:00:00 00:00:00", "N/A"):
            continue

        logger.debug(f"Sanitizing: {exif_key} ‚Üí {db_field} with raw value: {raw_value}")
        try:
            value = raw_value

            if db_field == "date_taken":
                if isinstance(value, datetime):
                    pass  # already valid
                else:
                    value_str = str(value).strip().replace(":", "-", 2)
                    value = datetime.strptime(value_str[:19], "%Y-%m-%d %H:%M:%S")

            elif db_field == "flash":
                value = 1 if str(value).lower().strip() in {"yes", "true", "1", "on"} else 0

            elif db_field == "duration":
                match = re.search(r"(\d+):(\d+):(\d+)", str(value))
                if match:
                    h, m, s = map(int, match.groups())
                    value = h * 3600 + m * 60 + s
                else:
                    match = re.search(r"(\d+):(\d+)", str(value))
                    if match:
                        m, s = map(int, match.groups())
                        value = m * 60 + s
                    elif re.match(r"^\d+(\.\d+)?$", str(value)):
                        value = float(value)

            elif db_field == "size":
                match = re.match(r"([\d\.]+)\s*(MB|GB|KB|B)", str(value).strip(), re.IGNORECASE)
                if match:
                    num, unit = match.groups()
                    factor = {
                        "B": 1,
                        "KB": 1024,
                        "MB": 1024**2,
                        "GB": 1024**3
                    }.get(unit.upper(), 1)
                    value = int(float(num) * factor)

        except Exception as e:
            logger.debug(f"Failed to parse {db_field} from '{raw_value}': {e}")
            continue

        clean[db_field] = value

    # Ensure required fields
    clean.setdefault("file_name", raw_metadata.get("FileName") or os.path.basename(file_path or ""))
    clean.setdefault("file_location", raw_metadata.get("Directory") or os.path.dirname(file_path or ""))

    logger.debug(f"Sanitized metadata after parsing: {clean}")
    return clean

def insert_new_media_record(db_conn, metadata, media_type, logger, dry_run=False, file_path=None):
    mapping = MAPPINGS.get(media_type, {})
    sanitized = sanitize_metadata(metadata, mapping, logger, file_path=file_path)
    logger.debug(f"Sanitized fields for {media_type}: {sanitized}")

    if not sanitized or not sanitized.get("file_name"):
        logger.warning(f"Skipping insert ‚Äî missing required metadata for {media_type}. Source file: {file_path}")
        return

    logger.info(f"Preparing insert for {media_type}: {sanitized.get('file_name')}")

    columns = list(sanitized.keys())
    values = list(sanitized.values())
    placeholders = ', '.join(['%s'] * len(values))
    sql = f"INSERT INTO {media_type} ({', '.join(columns)}) VALUES ({placeholders})"

    logger.debug(f"SQL INSERT: {sql}")
    logger.debug(f"Values: {values}")

    if dry_run:
        logger.info(f"DRY_RUN: Would insert new {media_type} record for {sanitized.get('file_name')}")
        return

    try:
        with db_conn.cursor() as cursor:
            cursor.execute(sql, tuple(values))
            db_conn.commit()
            logger.info(f"Inserted new {media_type} record: {sanitized.get('file_name')}")
    except Exception as e:
        logger.error(f"Insert failed for {media_type} file '{sanitized.get('file_name')}': {e}")

def update_missing_media_fields(db_conn, media_id, metadata, existing_row, media_type, logger, dry_run=False, file_path=None):
    mapping = MAPPINGS.get(media_type, {})
    sanitized = sanitize_metadata(metadata, mapping, logger, file_path=file_path)
    updates = {}

    for field, value in sanitized.items():
        if field not in existing_row or existing_row[field] in (None, '', 0):
            updates[field] = value

    if not updates:
        logger.debug(f"No new fields to update for ID {media_id}")
        return

    sql_parts = [f"`{field}` = %s" for field in updates]
    values = list(updates.values()) + [media_id]
    sql = f"UPDATE {media_type} SET {', '.join(sql_parts)} WHERE id = %s"

    logger.debug(f"SQL UPDATE: {sql}")
    logger.debug(f"Values: {values}")
    if dry_run:
        logger.info(f"DRY_RUN: Would update {media_type} ID {media_id} with {len(updates)} fields")
    else:
        try:
            with db_conn.cursor() as cursor:
                cursor.execute(sql, tuple(values))
                db_conn.commit()
                logger.info(f"Updated {media_type} ID {media_id} with {len(updates)} fields")
        except Exception as e:
            logger.error(f"Update failed for ID {media_id}: {e}")


--- Content of ./.git/refs/heads/main ---
00b4510ff3014e8abf647d09582f16b9eae91450

--- Content of ./.git/refs/remotes/origin/main ---
00b4510ff3014e8abf647d09582f16b9eae91450

--- Content of ./.git/index ---
DIRC      hqúè)A∑–hqúà      ˛÷7  Å§  Ë  Ë  ◊à¬xzf—Ÿƒ¨ã7∫ ÷õÑ∞=H %__pycache__/app_utils.cpython-311.pyc     hq∑Õ‡∆hq∂â      ˛Æq  Å§  Ë  Ë  #ˇÀò˚≥VO+‚g-Mq~8Í"ä^ )__pycache__/db_connection.cpython-311.pyc hqi%8√-hqi#      ˛Æ  Å§  Ë  Ë  ¥√Ω
Ø7n@ûu^ïR‡f¯∫HR +__pycache__/metadata_parser.cpython-311.pyc       hn~ÜF‡Úhn~ÜF‡Ú  ˛®Ç]  †   Ë  Ë   5'›®Ï|G~õŸ¬nÅ˛Cﬂ‡ämÛ app_utils.py      hrWe÷¯vhrWc      ˛®Dè  Å§  Ë  Ë B≠O—∞ŒFÈ$˝˘ñ£˙úmQãÓ‹â combined_output.txt       hnÄ"¸úhnÄ"¸ú  ˛®Å!  Å§  Ë  Ë  Ù≠/Á>éÊ¢_}&úNøF3À∆* config/media_types.json   hrW¯02FhrWÛ      ˛®G-  Å§  Ë  Ë  I?¯hÙWJ˛Ωq~± .…}¬Œõ config/metadata_mappings.json     hn~}-Ãÿ¥hn~}-Ãÿ¥  ˛®ÅW  †   Ë  Ë   9$u≤fúÖπ©=Û˚@Ó—òN… db_connection.py  hnÇ°3óëhnÇû3Z˘  ˛®Å≈  Å§  Ë  Ë    Êù‚õ≤—÷CKã)ÆwZÿ¬‰åSë managers/__init__.py      hnÇ∞9(UhnÇØ      ˛®Å  Å§  Ë  Ë   ¿‘0·∑4¸iÁõB#ô{§ÇHx -managers/__pycache__/__init__.cpython-311.pyc     hqh(&–“hqh      ˛ÆÙ  Å§  Ë  Ë  ÓpÉ≤£∆ø¶»“O)√UÖ3‘àã∞ /managers/__pycache__/db_manager.cpython-311.pyc   hrZ€
ƒGhrZ‘      ˛®V≥  Å§  Ë  Ë  '∏[(™ﬁH"jîòÓ@™ñúrá7”ú4 2managers/__pycache__/media_manager.cpython-311.pyc        hpb!`€÷hp`      ˛‰QS  Å§  Ë  Ë  7dŒÙ€1ÌçhÚõƒÿi?dáÍ†ß… 3managers/__pycache__/media_transfer.cpython-311.pyc       hqg”˚?yhqgÕ      ˛Æå  Å§  Ë  Ë  ∏8òÈ+ƒ	g>‹ˇ‹ıA_,êfq managers/db_manager.py    hrf:ãˇÅhrf7òaè  ˛®xË  Å§  Ë  Ë  $Ω–Úu˝¬n‚.Y$®&I’cåU2—ù managers/media_manager.py ho˛í9èõÆho˛è0Äíª  ˛® À  Å§  Ë  Ë  ≥≠ñ%TJ¶SÅ,§;{Ωò†´Œ managers/media_transfer.py        hqi$8ÇÓhqi      ˛Æ∆  Å§  Ë  Ë  
¥òÜùÖ¡k·`™∑^¥N≥gN2‹ıè metadata_parser.py        hqqù÷ª◊hqn¸      ˛—‡  Å§  Ë  Ë  ÷·ËÊÖº≤º¸,¸ëµ˝„õs old-processmedia.txt      hn|Å0Ç7çhn|Å0E.±  ˛®ÇK  Å§  Ë  Ë  ÜÑû[lcˇÜ?JRΩQa´—$‘O processors/processmedia.py        hr`è @hr^í      ˛Æ#=  Å§  Ë  Ë  *9ﬂmü……oe?~⁄ †Yq∆gJ±0 -utils/__pycache__/media_utils.cpython-311.pyc     hre8*’hhre5»f  ˛®xæ  Å§  Ë  Ë  ñúîy¶66‡fÜÿ©¯$Œ§ö utils/file_mover.py       hr`RsÃ´hr^ë      ˛Æ#,  Å§  Ë  Ë  hj]Tõ=t†ÕˇÚ+VìM	KY utils/media_utils.py      TREE   22 5
ç r›%Z2(u≈ ßüËutils 3 1
„eÔ¯‚Ø¿Ó1Uœ*Rí—__pycache__ 1 0
 ò ´÷Z¡≥‡‡{!∑`§∆°)config 2 0
¯€˜çh¡⁄€˛ı2dÎú@,——managers 8 1
iñM¶ó ãÿT⁄èIÜh5Ã›C__pycache__ 4 0
—6¿ﬂÍ9ü{éü≥[Á‹qgiÇcëprocessors 1 0
.|åÅ»T\ÈÑÃ}Û«ä…ﬁ¡ÖO¶__pycache__ 3 0
‡Ûv.”ÚîMøÆ;–Òùè†ZjP(Ä€!À8Ü”Áß¨˚œJêC˚2
--- Content of ./.git/info/exclude ---
# git ls-files --others --exclude-from=.git/info/exclude
# Lines that start with '#' are comments.
# For a project mostly in C, the following would be a good set of
# exclude patterns (uncomment them if you want to use them):
# *.[oa]
# *~

--- Content of ./.git/config ---
[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
[remote "origin"]
	url = git@github.com:robcampbell08105/media_organizer.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch "main"]
	remote = origin
	merge = refs/heads/main

--- Content of ./.git/COMMIT_EDITMSG ---
This is working for processing videos. Now I am about to work on importing from media sources.

--- Content of ./.git/description ---
Unnamed repository; edit this file 'description' to name the repository.

--- Content of ./.git/objects/d4/30e1b73404fc69e7199b4223997ba4f0824878 ---
xK …OR0¥4bXŒÀÀ≈ ÛöÚ2@ÙcåP∆g6 c:C
C0É&£ﬂJÜ"& ˇ3HÚW∞~F~n™~QyrbnARjNéæKQ~AR~Ö~@Q~zQbn±~@eIF~û~njJf"Ñåœ/JOÃÀ¨J-“œMÃKLO-*÷èèœÃÀ,âè◊+®¸≈aìõüRöìjWƒ
¥‰äb~ ÒÅôëëÒå(bä g¬4S
--- Content of ./.git/objects/ad/2fe73e0b8ee6a25f7d269c4ebf4633cb0cc62a ---
x5ë±nƒ DS˚+êÎSt∫sötë“‰“D)¿`B¬Ñ9∞Âﬂ√Ì‡Í-≥#ò]îJ<ùœøÉ„Ik∂ÒY|åèﬂ—é'qßAW–∫Öä"3ªB+X®F°Ûe‹ÃJíï9ßs5pÜn]ó	>›üJ˛ÿ¸üß{¬wßMË	)N|Ö¬î≈·¸ÉÛ‚¡JùF«H‘gºZ¶	N åó^tî†X◊ÆÏ\Ï≈ÈûÏÂ¶]¿Í(^π+%∆ØÚ‘Ö`± JÔL†<V)}sb‚◊0ﬂ»¨-K‘Xô∏ª±GÒ»º˚Båô/oÑêw)∑m√˜pÇ,
--- Content of ./.git/objects/ad/089625544aa60153812c02a43b7bbd98a0abce ---
xçìMè”@Ü9ÁWX9•R)∞‹*ïÏ°≤qäfß;j:é<∂U’ˇé=3Ån[shæ^˚µªè==¬ªª∑Ô_Ÿ›@Ä|ëÔ¸”l?=ı¥ŸX∑):¶&<ıˆ≤Úã<Eã6Œw»ug{ÙïßëÙsÜ7Ê–Ú°Ê—≠ÓMÔqå;˙âuñ•∑≥erR¨@ìWÈi∂¿˝`\;z‰je‰;≥≈÷≤œ¢9‡ﬁ˙P”vı¿#Œä®Îà!ŸÄu˘Œ''uKüjÌk≤LØnX™ﬁv‡(úáIi‚Í´\æäÙdlãg√NU]˘52â·xÊ{Çñ–«¥1’¢L¶< π`›à©}´=1ë`≠ÁÅkoB‰ŸÙ€Ã>∂tQì∆9≥CU«∞?&3œÕƒAf&FDîìFØ≠¢À≥ ö+—¿ÿŸΩË èÎı˙€Á%îJ0/†ÏîÂU‹ƒŒ∫é‹1Â9=‰z‹ú‡ı8J'¡uï!è)]∑©-§5_44Ó*…(KÍ√KÙ*”#È^nÏÌå*|¯˚G»òR.ıºmß2=÷ÒO”NÎ¨\&ì¢”/Ó|äKå¸wÖì-2ˇ{#N- ŒH˛RÍŒçı˚ˇ$7YÊâˇ^óÔ4ˆÌd«Æ”.~Xê
--- Content of ./.git/objects/69/964da69700148bd854da8f49860d6835ccdd43 ---
x+)JMU020g040031QàèœÃÀ,âè◊+®dx6˜—ÏMØ9{wkÆ+è∫qËIOD  ™*®LNLŒHçèg∏hv‡˛+À˘’}Û7G?øSòûŸî<jXJR|nb^bzj»8ã/µèpÚß€›˘Á´cºŒÑ¥ÖPÖπ©)ôâ»j/|*˝{(Ôë^§ 
5œ´…=°FÁ¢®-)JÃ+NÉºñcöjà◊2∆‡F¶%÷’{g,X} a|X±
--- Content of ./.git/objects/e3/16071665eff804e2afc0ee3155cf2a165292d1 ---
x+)JMU042d01 Ö¯¯Ç ‰ƒ‰å‘¯xÜ
´ØE‹¸‡Aµ‚v¶Ñ%«j2òôò(§eÊ§∆ÁÊó•ÈT2ÃôRπÃÃÏAö\€çï?T>ú["»>™075%31æ¥$3ß§2+6d∂m…¡≥¢Lˇ?iáMˆÂÙé B™1Z
--- Content of ./.git/objects/e8/e685bcb2bcfc2cfc911315b5fd051ae30e9b73 ---
xÌ}˝sπëˆ˚≥ˇ
ºrmë IîΩõΩ‰îSÍï% Ê≠æ"QNˆú-÷àJ\ìÜC⁄V\æø˝ûß¿ 3CJ^{7NﬁeïMqçFw£—›h\è≥kÛÌ∑Oû¸«ˇMfŸ|a≤¸ë˝Î«<õ>Œ≥â9Ô˚∞3In“-”~7vìõ\ﬂíE∫MRW»˝ﬁ2|:H«ãƒ<6Ì¿?“∫ãø&ÆˇvΩÁÀÎŸ<Îßπá'ôﬂÃíyû¢©£ln˙ŸdíL€„—45x∑ú§”Enô…gi4ºCâÈptcÜ£qÍ[ΩÀmıÙ›h1öﬁòlj˙s¸ŸO∆&ùœ≥πÔoú›‹∞ÑvÁ~®õ9†2Ë€“Î•MáŸ|í,F¿ôEï`D+œÅ 3M¥À˝ÛéAwcﬂ”<˝€2Õºñû$ØŸÔãn˜‹¯W◊i6M—Ö«—‰.ˇ€∏ÖaN”˛(ylˆM˜EÁ“wN€ê¸vúæ{Ù»œ¿]∂˙ñ˘Sã©JÆ ’∂¯Õ$,Å≤≈¸n˜ë¡«égp›+
=Jﬂı”Ÿ¬Njõà”¬≥˘h∫hnË’iÕÓl€fö-Ã0[N-síºNMæúÉzç‹å¶fqã	»i0öÀ¿Óá¯˘›‚@Œí≈mkcS ÃÔÚÁ≥˘tì√‹ﬁﬁ62˜K û#¬ìGÁ/Œ∫gΩ√ŒÖŸ3çù…r,Ñ8JvŒo≥Eñ7ΩÏ∂kºRx~vˆ¸∏›ÎÓ◊>ªÍˆ.ŒŒ∫æΩ€líÓÃﬂˆì…Ï:èwÁŸÏ:{∑Û,Èø^Œv∫d∂\Ï<œ≤õqjlóò∞Œ…˘ŸEwˇ¥ªknìÈMä—èÚˇÀa¶Cí6hîõÙ›"ùÊ®/7y
ä’ôt8ıG†~3Œ2ÙÜ∫˚ÉA:0ìQûìíäzª¶5Má[¶5Oﬁ‚ˇ^6GdÈ|?'≥˘?ÂWí≥‹773”|#ÿ|‘9ŸﬁÓµˇ“mü^vŒN/Å…˜ç÷è≥õ∆ñ·w™Ã¶˙}3 ãEÒ≠n”Q_ﬁºMØgÚÄíoÄ%ﬂ ¨Ò¡ŒHπø…Ï∑RfíΩëÔ‰ÕHø÷ﬂht¢,`Ü$/0(_„√£˝„„ﬁI˚∞≥è¨<ÿ÷r
Ã7ïJ
ò61âW|#S°4õß∑ú•7 ‚~2ùb8õûyç∞HûèNœN:ß˚›ŒIÔzW«@Ï∆Ìb1Àwwv¶éÎ[ŸÌ.Êi∫ò$≥V6øŸôßoRHƒç†Ö´ÀˆE”t⁄e#VÑ
Å˝vû∂ûòÊ<ªvt˙‰˜Oü|˚ˇn&…àrd≤πì‰E:'˝‘º-nï˚í˛bII…AØáÌ„˝Ô{óÌÉ≥”Cí≈”÷S¥t2öé&Àây
ZÖË†º'wÊ:]ºM”i!€@Ã≥t†hñçG˝;¢ÕÒ1ƒßäceåÏk∆˝∞ç«h“tNèŒ∂ Wß¸—^ò7`ªP@˛ÍBë?≤Mµ ¯F}Ì°)çÌπ7⁄òäÙΩ∆WÕ$ÔS\lÊf€|•eßêPˆ˜Îxh3olJ€ÀûÉ∑uì.éz:oˆz¨”Îy!uËÑÔ—räˆ…◊îT@\6G‡`H˝%Ñ3%¢Ja<ãd™÷ÉtËDxop›∂±Ùı∏Ùm±œˆ˜N≥i∫©ÇzccCÑg;«
0Â∑)§äkÉÙåæŸÔ…›Âüé˝:—í:˚Ûõ\[·˙tfö –Õ]sÈ7–ÍOBÄÂ§2°”ˆÿJ•4≤e≤AN∆hÓR¡wãÉ¥≈⁄?- JíÑ,ˇ£6{ë.ñÛi ii¡tK'∫i…0A\JÒ{◊t1ˆ∫’1ª˛E¥áCøTr ê‹wòhj„;ì~ƒJ´kö©¿åÜ∫ﬁ5Ñ7¢N`}k`\ä–nÙ«îÈ€ˆ=ñø÷‰é#ó–é∫X+‘Lßj{€Œ≥]4úVdﬁfÛ◊ ƒØ¬VM)[Ér•ÄÄãæÄ.ûö=,§
]AÑ´Æ±x4æA'œ•ÛñËRÕ·∆æ åtÓ∏√Jt—∆˚Ç@„}•Cº‡¬hF	 uat=èwT|ˇ0ˇù”ÁËÿŒæ#åﬁ"Îy0˛‹Èæ0gß«ﬂõØÕ˛≈Û´»ÿKﬂ++“÷7≥¶„À T±	–C≥πqπÏS%.IZ∂#5¨jµ#62Nê±’ﬁ⁄¢ƒëŸ!Ç”bÌî8≈≥"˙úÎë:KK∂Ôï=¿…éù¬iGøO?‡E
úà≤y
ïπG…îÊΩ—∞Ö±J28-…∞)ûLEÒ¸ŒhM'0¸ÇÄÅ®;3»DM∆®8∏ÉÇÑñWà∂©i>\l`d#7˙Ày:›ƒ∂ÙWìÖïg–“• ∏\tAı··±L°·ûyÂi–â#Œ¯¡E{ø€6›˝g«m”92ßg]”˛KÁ≤{iÜX“s”Ù’X|4¿⁄5˚W–ë;ß®LÍ6Á–Ç.æ7ﬂµøﬂääã{πqbˇ¢˘ı∑ﬂnö´”ŒüÆ⁄æ–¶iü>«dØ3ùfáœÃa˚hˇÍ∏kX·≤››[.Üøü\ˇ÷úN˜ª%´ü“^ÙﬂÜUÙ˛ÿ\§–¸HÙêxU^!H)ÿ…ÅlHŒÉ•¨ó≤‰J˙≥˛Tæ»2HúÈÕÜÓˆDÓŒ2Ë’ãÙöy:¿¶$ôˆÔäÖâ˚&j»ÿd¶†ö∑∫≈`L%€0‚5Ëç¿8µ^Ä)x‡¥úP—?◊=/9Ïì&à´cè{$„gÈ…o%ü{#´â<’y#;cπ¬‡àË/¨öˇ¡`:∞5ùrøÎF-∫‡h:HﬂA—B?M$#´o9›ŒÈ˜†(l…¸‹?)f1*€KÊD ∏±¿Å¸@†ÔHÄF¥[”≥˘ªˇ›Ê&Gw}	:¯pÙ‹O(…4ï√Ñ)¬√˛≥ëÎÁ˛<Õf†ﬂOör®–∞ÿàéÈÜ˙À≤ÊC«*˚ÌO´Ã{E≈ƒ#e∆Y_%BÃ~‚Ià0Ád„•»WÍ€'õqc˘ËÔ©y÷ÅHÎ∆/∆h~±§ÊÏ
¢∂Ùd∑˙mƒ ™X≤∏˛Ω∆>©û7∞ÖKÁIè⁄_4›1ÆdÍxM±¸vπX§ÛLg‡›ïXH@cP©ã+xÂŸÍÍ√qíﬂí!u<∫π]Ù&)‡X›ƒ[‡+"◊ûR3,A‡ö2˝—º˘ò©Û°oc…p-bHû:˛—baFVÈ’≠◊˙FWÌx¸,MU(5XÃM”’ﬂm ÂKX<:ªhwûürÂ/
oöãˆQ˚¢}z–æ¥6¨&jB)Üå?nC›8ÿø<ÿ?,qA‘ñ/jJXﬂ“3Á4Ñ|¢÷îÂŒåä´1mQŸVØ3ÿx.≈∆síÃLÁPV/*bàÒÿ`∂∂∏õ≈ÃËö¬7ZK[7-òÊ¶‡~ºﬁ&w¸ö√
Ci◊àöårÙqßÎGÆ2mÓ€sªÑŸ}õz≥®\…`@sx‘T€,œOUÖ¡Êp«o’˜}Ü±£^S‚£ÑÆÌÀ‡fô»2!9v¨r≠ˇ~v~)Üˆ˝E¬A∏ÂgiµÎˇ™à–“ÚÍgˇ´”òÜsöH≈_V˜˙À—‚Ew≠*˜èQÆæ±'ﬁ£^≠ÿ”Wu äì*UÅ©1ÆÅ-]Ô—c\ÈH˘x)Œ≠zQOr§«8 £∂ŒˇƒﬁÛ4ÉâÜÉ§≈"ﬁs~‘ £'“n‚WU›¬S'ñÅ(¨6DìÓ`‹ímΩl°~6ï]‡T;9Ì0?@1°èZ,ìÖ≈4Ú pLjπÉ[:Ì/iS*PJ	ÿ1ÈtCT@3~S≤àw€V:ÿ¡úı_ßòP•Õ¥∂—Çæ≠ºπ˘Í…-8`F≥Êfh^≠∑ˆ¬Ãxê,˙∑4¸¿Jw>îBXÚQ2yF”e¡ìhâ¬4,¶7Ü	≠xˇ:˝—Â !‚¯≈πóÉ˚‡¡v¡s53—¸5…∞œºôCÎVk˜ ÖjL≤e»FN«'¥LÅÀ¢∫?ŒÚ‘b“Ç®FÛCÁH–IÉsP0∏#÷¬t ù'…¸u/…{ﬁà%¶fÏêú-≠du>Ay˙Ãn‡ÎÖ˚ó˛(±∏—ù©f<Ï•m<CŸ∏'†¸Çg"‹è√yÈh™à31ãÎ`	$"6g“±vËí°Z∞Q~âÍ]uˆŒOÁﬁÈ.e˙ô)c§∞ÂAò;ÙB8ƒ\Úrˇ¯
˚–ÊW˘ñ—Ò{ÓJØŒè;¥És{uNKJ—8ÏÓ⁄F”˜©ˇõ“®Z"„€2!‡›˘íWËSt∑`-nn¬,âX%›c£.ƒ¬~,f}k Ö+`ºúLã›U1Q$E€{?≈Ë—ÒCqÅ2üQXÛl<æFÑK øjÖ	äúª
æ–GßÖh-±˜#≤ÍË·\z@nG\—∞ÜSoÅ$Á∫fHBÅ1°Ìäü˚Ápë1¸º›«ö"ªî7+ﬁÌÎ,√ˇ‰hi4ô$.b!èê$∂ÃQ2Qf(7; ≠À‹ql-√F‚ámèΩx∫éã…ÇEö€‰<{´ƒ	
ÂàK} Ä‘≤Oñê±íl8±Â˚eË±iO%fdò√wó¬c£Ó[¯0Xﬁ∫‘ Äj∞Fä<Vπ_Î\ÙîŸ%Ï[›Ç>Ã—≈ŸIEÜ˝˘¨c¡dÓA0≈b≥êQ0õ0ä2Uú|≠aä≈±3Y∑≠-…àC˝ÛU√jCïìzŒˆ√©ÂJè_€QM€ÃR√ f˘ì‰j·R
B¥Yû#˙R<™.Æ“¢!bjD Ù≤yœNè5∫5òVM¸Kk0ò`>Ç2†÷^ÊódT2‚%ùÜd—[cCµƒòÄ ®∏–ªÔÒ[? <g¿IúÊ”∆‚˜ã@p„Ç≈±

¨ê¿T74–îv™HÑ€Dƒ…¥ù6∏k:"IÊ)B3¡≠p1	∑)˘dìò5§µ®tKD√Ä˘ =‚3äïlã¶´LæQ.dzuËﬁ˙8°(GÀgØ¥:1“U…àÿ±ò1Ô3èç>àÿlºÁK!Ù∑j≥E~"i™¡Zû¡S»ÚÜH‹jï]…F®ê)rö¬dV1¢rµ)ÃA‚«7Z´°∏∑%\ªÑŸ<"Ï¥¡=¥¿r1< lﬁ"§\€#Öe¨`,ÌgZùÈ"Ω·B[∞2bœÚÿ¸ßƒøÿ?}é–	GÕv¬œcÛBB w'å› ∞;õÓ®ö0élà¯√LmÌLl´§?°Ô´LÈ ç¯JY≠rx‹*ï-Nﬂ&sÜóbv¢·“vÄñSﬂ"(Ï Ê<F‘&2æÖË
K‰ÈòqnAîéC¡ge2◊®]„÷≠ÜÆË
¶sØ◊±â+Se˜¶¥RÈ<`S9W,ûá©ßDh4…êL 1óP3◊n¯⁄ÄÊ≈Hñm˝# åcùfô[Tv>(ï@s¡Œ¢ãlQB˝öèvu[/öù)b[DbCZ"Bˇ∆íB‘A,ëeÂ}	=W”Ù\≠ê™.∂u·l•∂™\+k5ÇÈÒûë}å¡b’ÄJQ1†ÀYU	ë1¢π<Ç ÑÇ^†	Õíz∫®wvdl˜™BzÄ·$]¿√ÜÉ3Ìwê%¢wõ"L∏Ÿ0bâáV§´Çfâ}0‰zc|óE∂ÑyÁ„b∂eﬂD∆ñ°D5j‰øË€ÖVeªÀ,v$1òjB\µƒZŸ0øsPkˆ∂Â∂—b3ö‹@´ï†)âY˚ÒÂ°@—˜¸cp6e…b1G≠8+{ ôeõ™Öá-˜®i°vÙC^\$®Ù&sDà√“≠—"ù¿JØì¨=@x:LÏ˘ÉM≠Ó˛ÛK∆n7•E¸W(ÓÆ??ÑW∂˛h@˙ˆ√±TÊb[-r—ì‚Øå‰˜Çbôë°‰µ"Õw(Ì◊3… ÆE_£€ñ‹/ì+Jqÿ•Ó†¥
âk)¶*"$Ñ”çïò¸∂Üñ»∞ÏPÇ÷féÖïÎI®?·dºj∏Rt[oˇ(ˇOÒøÔÎHªm=z1≈d.!S†{òÁÁEÑÆ_aä£e≠˘r⁄D_<70c`KátfÀÖloqzgÏü≤W“]Ø«∞∞Áû·9π÷8KySªÄ	vÄv
ÇQ≥lLw+I£Õ≥u¿L¿|¡V,$¢%∂ÎØá≠‘˙i¶î]4+*)9fE€∂]Àöñ÷Ã`N”¡πÍTzäUÜ@ü∑ﬂ‘X®ÀÏsó @¢#ˆP)¥◊¬"hˇØK8Ê}0¬´lƒËƒ[AÔæVsqˇ0t®¨ïIÈ1Qöã’=ˇŸ}vOÜ€#;∞îŸ∞ì${\-ÄùZE9Ÿh£ê&2úüp\ä•[IÔ,g /T«ûÿö≥ÎB]ø c÷B.∂≈ËVÔê©ÀÒ§Hyß,ënò‰*ûéCK”2`QOävoqQ‚÷IíOâG;å2π¡õ&mèpUòÀ◊£Ÿ]áb@ŸC5ÿ6≈Ò1‹∞3OP' */:É…ªŒÚ˝<ïÚQa⁄Va&e}HÂBê¥<"°À≈ÖÚ5Añ;Õ£n¡P–UÔ9Í¸Eò∞ã»&·È]∏Wåxj`k’ ñ≈‚ÑE}.2Í8D´ﬂùı1ä‹`„GR„à±áâDê!OàQü¡TêÄÃ©Ke	QÏY+ÿûg—llØ«&ˆÃÙÈ"ˆAÇ8bóáZ‘5iÅ ì	±ê¥ÂœÅsiYAÿ"l%Ö•gSåÎ^Pî€WÔÖ∑X/œ`¨ﬁ_.≤Õ8Œãj=˛©#Ø§â‚Xy±–-6´Öêò?ö'Ñ∆/dät+≈ü»ÙA[ÊèˆÔ©Å¿ÒSP©£}zhH!úk©$ND¯a≠£™≠3Iùò?ÈÉqŒmñ·8,úìRëÔ5æ≥Õ#éVu™Ò∫ãÍgÛÅ'c®ü ï∏åö2X≤ÓÌÑkX¢‹ÎÄîC:ê /Ü®P"›ö»·ò'¨úNEá°_üÔöçÔÒŸ=9Ÿ=<4/^èÀK=Ê«ä¸Ω¸-æ*``|Pœ@H_}ø˚’d˜´Å˘Í≈ÓW'ª_]‚ò£6Êó¿ó‘∏ï]˝+)â∏Él9ÜÈáøı$?ª¬ˆ9Ó—ﬁ
$UÀ|á=0•T¢,î~Ïfñ‡Ä¬c∏>pR ,ëä Eã8¶lN°Ëa«iÇ√π∂©GJGÄ@Ã {?ÜÜóéç]’:)Áä‡}Ô$¢+„~Â∞å⁄s⁄xSíà˛?èã€∆Êáwu/_§\xªAi±∫∂,€5Ø]}CÀá‡0 é¡Ì ÀIsàj>	ÑP÷_†|‹TÌcﬂb<z!1µ5¸À∞äã¶™´±oÉÊ£>
Bï‚Go âıáQA| wxßòj*èÄ˙J«LRıË
3ÆæZZûÜ#äB¿På’å—w©¯8∞îÑõÍdJ˚d∂)îL¯ï+§Z©•Ë_Í—ÈrrùŒÎ ‹∑Ïj |xÂZ¿pæ†¶ŒÂY-B‰ymK≤ƒ†-ø‘ÑD^E@âx¢Nx@≤g¥cí∞G*éq °sQèÂÖ⁄¬Q—ö£
®‰◊l«) ’$—%Ê.˝’¸Â¸*Á<ßê[«JYI¸*7˚X∂Ω$îÅW‘À ¢@‡Çqq—=∏8∫äß‘≥/◊w9-1∞p±| ˙`ﬂ†â∞P…á¬í∫’Èiú(ÿCÚ|Â>6åƒéá=ÆøÅ/„Ö"«D:¬÷‹ô!˚”	A˚⁄â?˝Y€z!„l'èxH[uO(ãÏ£H
≠i›qø≠∆3=⁄¶ä˝;≈µ„∞gs‰W-ÿûÓm5ƒ-o*ï’e7€éﬁñg®‰úÁ°:QUNìí–ôº¬πøFˇÄ8 °}#dÈôõƒF˘πõÕÚ7≠xæåbnÀ-∏)ÂbTÍ’ΩíïßÙ.öˆ˚zws_ÓÄÇ∑‘ÆJ–“√Ä, ÂùÄºg¸ûH ık®•(2DHdßπ§á^âAc†sVÌgÛA`˙°éá≥ÎùCÏóùº¯∞*ùUˇë:;÷
é–Ÿj•Gï 	≠ï÷“Y»»ÇDU†≤$ÜÖÌ∆*IUBcÛÅ—ÓÈO?HDh?<à6Ì“ÔTû’7,@ä’?T(ÿ?∏Ê°üÍÒªhÚ‰f‡ÇvÒ}üÚ]lYÿ˙=R#úÃ˚§Üü¨ÇUhDÎ`˘e1ëÂ7V÷T £Oë=ë`+H`¨Ì2 î2ƒÓ’CdO‘ª#©˚˙˛ReOÑ∞íƒqr+ñ]í`´—ËÜ®ZI2uƒCÉë§çü"ûT,áñ3
s}|≥áÃ⁄j‹ ‰yΩµõ÷àèé"/9e—Ü~à¬∆»™AŒä.FÜ–´∆ﬁ¿Z∞¬rÓUÊ{∞0µ&◊û˘x˚∫T9˛ÌÎz*≈∆©©Å˘À±Ø£˚x˚∫÷µn
 _Ãæ.(‡ü’æ.„˙’æ˛´}ù2À€ ˝µØcŸb+äX∆3w∏¬z.ßCBÛy’¸~Ù≥ÿ≠DÄŒﬂˇ*6rÔoŒë±îÉ Â¸£{ësp_\Zj7ﬂ≤9h*«“˛nù¶jtë'¡¿—Ø6Û_mÊ1ã™Õ‹ùØÿHÌÚ»NZØî?‚ôÚ4≈ßÏR+5æo o¥ƒø∫j\≤˚±ˇ°÷œ›d˙>ÉAˆI_ÜI^¥›ü√$ØR_≠Ïê˚ÎMÚa·ÿ$Ôﬁ†	˜'Ìˆüdí)G˘Õœ`í/4¿æﬂ(S€sgYkÉwRM€Al-dìÊªX›p ™l5kUI +i£Œæ∂lg,¥çEr∆>sÜ˚dˇ*å¸l&{%ÃH≈dæq&˚Yh6ãû&˚ 8¬Ç–æ	Ê~’+g´9j®≥ÄÖÂ
2)∑–FÂïö^kãÛ±∆‰vZc¶-∑Âhß¸<""º\ãUG]ÂF¨Ÿ/…ªÙ·O2˙K’ıV5◊˙g6˙øT˘Ù3˝‚¨¢õ"* —≤©ﬂë!¸^≠∞„WfíM{óM≠m?G¨w*Ëæπ“√Áv87¬gu	(…®Tä\ïŒõS&˜ÿ%V[ÂÀ<D∂E´ ó2 °‹«∫ÆË=≤-Í∏ ±r«±,´–A4‹˚e[‘iΩ,[€≈Ce[‘œ«À≤ÜíAG,nÔüÏDê6~ä∏˚\N7ËœÁDxºœa†˘úâ»Ô]”Çà`±Ï©ÁDé‘ZÔÅº."Û’—C≥ãº`l≥‘Ÿñ£sàXÀ˙#…“àË≈©çk’Ï˛¢_U)Mz∂ã∏UsÓ
Ç÷Êè¸>?EäOM≈∂[ì¥‰â›‘ÄR%H¥Ë+:t§qíéxÛDÊ$ä_ıµ¬@•Bóºa˚HJ;AT*,O@Å∂oﬁcµi*6?¨«Y0Æñy&^*tÀ\ﬂº_H.Gs‹Œ-3“KìØvø˝·C´˙˙-ÁŸLNH~y◊*∑ŸËï—€zÿ‘><}÷ÛUi‰q¢9kÉÉíKäHòßÊéí∏Öh§•é¡˚ºŸKRF≈@ 3óFXü∂ˇådÆœÆû#’ÒssŸmüÔöóxì˚¥êó	&LTæHyπÖúuµp∏¯{*ú∂ﬁ=sîÒi≤6lûçÉ≥+‰ˇÕ¶€FGFÛ4VÚ“
GpaìE:ç\TX"L%ZL|Ö`°w¢}›Æu[?+Î!“n-6ör∫NÆ±‚ÑÎ5$≥2ÿÓ!(Ç‹´”Pƒº[Z>“ÆûQ¬ö€ª∏ÇA9˜©ﬁŸ†Eï»\Ç`ï<*BpãG∞ËºÏC§≥“—7°·"˚œJnΩ∏˜$W’œëi~é#≠
î“:ÿ¨P/o@ ¬LK‘¬ Ã!fxŒ)eæ"@iÚº‚ÜpUR.$+1´œZ!YÅsôòåó]?nyê:Îñá†—œ∫<ÑÌÍ]`»≥à≠sB»≤g¿˘K◊ÈÍ_‘Ç±ã¡Hˇ≈åh§ñí›Jıœø`£˚G-ˇÇÜåÓ]0 ∞˝.—ﬂπ3RŒ™·êr∏õË—0∞˜Ù…ìb[!+ò=ˆ	◊ÆΩo“^?i‰§3≠º«¸’\&\‰Ì¶¢\∫éº.4/Ä®}É5ncËïl)‹∂—&≥û∞˝ÒüØ©‚ñ◊Ú‡ò∆LÓ7i–ìû¸¬—L¢–¶p’Âtaoh“’äªÆÍ~´ÿj t˙ï&l8j5M0
Õ◊!‡¥©˘Wﬂ7¯î∞à¡ã2rÑïSÆ˙≥¬I&Õn·‹!,¯ÈyŸ’ä;GÉòí"P©◊yÜçaqìj„˝ä&qÏé	œd)ù∑¸a„2Ÿ‡8hg·>Iï›kÚ‚kèáÙÂæû€¡Wöû@F´öÓE{ªs⁄m?ø@ÚK[SusTÖChÿ+]!‚∞Ó0†`(ß…ºK§ãª.Ö∆6DO¶~ÜÛÄ8æ=∂	"µèNÂòQ'ôÄaﬁÿÄ„t0[ÁÈÍÌë4≈É√€T‚ê[p1z√K„ÃˆÖºB¨8Œ† ·´í°≈ÓCn"∆á>˙DKµ˝uÆƒ:ﬁn£Ø˛w»Ï5~”"∆ËM7ŸÇ´ê÷ÜWr;†C, »ÉÕ.uHﬂ$ÿü<9Ñœm4¢˝∏ÍÀrC∞fñQÊ…giôXXSªi6I7N"ÈÚiyÁoK\°UÃ∞å#òk#Ë®¬Üº´?%á†ásMê˚=¡±∂sõÖ# è+Búíˇ∑u"9$jHÍdﬂ*[[˙rr®YÛNjgñ[`¢(Æíb%~™,–JfLa‹ÙÌ∆ﬂe<◊2Àväyâôò>™o¬‚Ø01m%±LQ,|!r§3ª3ÊÁ”2z®ñBtoVåŒ ÌA•®f˘`…öÑ%ô∂ÅDì@¯qˇ5◊ŸÕëÖnƒñ7ªç_îÑü.H∏∞'@˝5…—I\πç∆]√êæ“f]†dÇ‹’°ÁÍ˝˚À´qH(ùÀ%À»¯VóƒH©ªezzÄÉ&<ûÆe”êË§∂!DM~…˘ö¿»7H=ÛóÀn∂@Z9'ºâ´ò)D4aí CbÅ˘¬L∆◊ÀIØ¨&⁄¥˛_%4G¡në˙1Mqù0áJP¨ı⁄í÷ûúfI~(;˙Ç˚"ÇPôYAnÀ•xU& :ìŒà~º»u‡J »Nyæﬂ}.Gø ˝ˇ>·ﬁlµkû_¥œM∞¨„öp5\â–±:Nï∞*§aò oë_ÿjX[YÃ¬¸öjåÍ˘\∆*ÇH÷Ë;-séT 4©Lo¨–å$’éàÒ2z®∏w›ö_EπÕÉWÂH‡\Ûâ3‘ï
Î¶⁄à
M©ÿCñﬂÿ5∂vYL»ˆ=’$”Dôô‰@ïVwb~8‰5◊˚f1ò€dkÁ™¸#Zó∑Œ#ÅÏÑfs]2HÊ“y]”4¡ãø&HíV÷˜ê=Õ˚{a
öÆ“µi#:j¿∏Ω+Å(“S¯@V3^ÇÆ+®á)*ÊHxÇ–r≠≈^óãnˇûÚI¿
 b¸pÇæ8I€’D™ø˛≤Äå]¥Vjà(*ªÊÇk»L"˝ETﬁRu\≠⁄ØH.úÀ‰£‰Û>F,OÅÙmw∏ÄVfÉ&DõJ!=l~∏·Më'2P˘Sœ-[5{∏¸˚ﬂë&f|ùaÆÆ»Và˘“∏„√oçv⁄ı·ÔûÙû˛Óﬂˇ£u⁄>Ú∂ˆÈ—í¶=Üªò‡oB„úˇ©¶.à¿≥¯S>(∑ö†®/‡±ih∆Ëxr8∑Tˆ≥†º)Ÿ7Ëˇ·8ØP/ë%ìÏGc≥aSjùn•Òº
:˛°P/÷•1Œ††úÓg#Pí’êu>˜=*„¯ü†DÀl\⁄{ã§Ÿ€ﬁmÜÌ⁄˚Ç)é†%Î≤À2`HñQ]EËIÑH&ö^6)Já–ÜÂ<íH‡€“9éü.í¶tΩW¶ä(>h˙ﬂ“t∏’cöErõ-„”Rât)•\ÊH#’f∏·eºâ…K@ ÷$õ≤w´ä\ñ]l∆NÇ*ê$z ¨Sﬂ…ıÅ%±À∑<ìÖõ8±Ñb–i}≤1D÷8KæoüâÂéóÎ‚f—_ï¨q»Ç∏ﬂ™zªX¬s€ƒ≈‘œ€=\Sÿ>ΩÑíqYŒI≈a¨À‚`ç.3¯9J±Åem~ÇÑ˛≤wæk#˛SZêÇ5Éîy÷Ó˛π›>uoJ)
ÿ–Ÿ≈a˚¬<˚ﬁÏ?ªl‚nÇøÙx€Òewˇ‰<H∏ÑD≠h£J·«ùìN78Iƒ˘q÷(˝•ˇ+öΩGUp¿KJ6‡‡ÆÃÍáØ‡„+òìã®Ú“Vç¨*ß∞;ï√¬ˆ`l€u·yçÿâÂ1ΩAï™¿fôÄlÉ≤5Å¡,ÃODÀ©SMyÒï…%Ë»ô;v6Müh$C@-∞èvwX∑∑i.⁄¶dÜ=ŒoE`4zãºb4#9Cvßº•kã	D’(º«HF7BFﬁ…∆,±±Ÿ‹∫hgÑÖÜëacì˜ìiãy˜=8‘≤` :|Ü≥˜Jò€)Ï¥S5D)&êèã9‹∆A/;áÌ≥œ«A/%∏±2„ørê’]d±≠≤∂Í¯≈AAï{9((˚`í:Â )ºÇÉ"b®¶Ã Õ~§R|‚alÏb2á˝⁄&WL∞gÏg7S8Gpﬂãd’s)†\Ò÷Æ†éë¯Ì˜µÊÏ»]˝˜/wqõì˝Ó¡Ü«¯4ÑÆòèÚC!™”ÛY«ã((‹˙ L‘IvÏº(„F¯\V8Í≥/5YÆ ìMﬁr1√u”õıÿâfÉı[]m"ë›#⁄Bhæu˘¸@£ÈÔ`¢wOÕk$)WáZs÷YRπÔÑ°çÆ6Õ¡î∫à¿rsa´ÿ=\–Äfx‰Û ë°´≈o TÆN¢+k# ∞Ú1ªÈ™´kÇ¶6M-§∂O€\`evp7ñ/˚∞¥Áz^vMøZÁºq`πoC	Q’º=`ü4–X= WS◊]È]}_÷rm5æ ˙£F'pç∏Ô…„N¿%¯R∫®D≥»^¢Ò>@ÿZÒX\|ÿT;Äåå
+piHÀhHò’1
¯%˘lÕå,è-∫)—¡~K™G§ä»˚)Â‰wµ‡8jë[Êâ\∑œªîd◊D’ •,ô ◊…≠§q=∂éü€ÂAÜÿ.ølØƒc•©Tzò˘~Ab˝Ft •,Ÿ7#!&˙ê^¶ÊøwöZÊÂrÄ€…”Au—u»á‘íÑ˘„û:}≈oº~ö„¿ÆÇ∫rÎ©/ûh…’–™ri»Î6u0áﬂ˛
í:¸ES˛‚…C‡/ó^Ω>‡FW"co,≥Ûè%`≈^π!r=^˙l%.V∏ósâ∫^˘˝0”Íø!±C,ÃÎ«≥j+†ß—/åïPKü°‹„d>OpC¸Yt;Ró)v–÷b!¶Mˆ∞:5>Gjasn9u…l˙î?!Mé¶÷ ƒUŸ^€Ó“0öKñëRW˚S≥,ﬂìı±}úce¿â7©aı˝óC?ΩP©ƒor¨‡›ùVôŸÓZ]ß¥Ûÿt$é 	]Î,∂ƒâ\ B˝É€1Y≠”Õó9∑ËËßI4Yf¶UMÂV3≠ÀNÉuÆaP˘-◊‚◊%'ôn}èíÔƒTÔPCø:Ëg!E»µá®5´ì~ôp)÷†‹Ì⁄VÜ‚pé£e”-5Gúãòà*Xä{∫Xw†4©˚mŒ^CÔÍæÁ&@›\K∏SÈ⁄lx°ì7ÃG Yxüy±ﬁ¡Ê|<Œµ÷/ñØ	ÿÅ}G≥Ôöcõ[¥0 o¡kw‘µx£‘àÅŒFIIñÓÅäÑŒÃ‡ÊFÆqﬁ}ÍÊAì≈-‰Q?CENŒG‹K®ìb*û–Y∏îIicíÀÊ$l’îHNw§É≤ﬁÍ)ƒY‰õßPe[RöX9‚ÖâÓow>AÔ:áèkchr'ˆÈYÖRkj˛páÛ ì5˙¨ÿÚàWÏ94Í>/hG:€’Öz8)ﬂ¬“Ö® NJ´êﬁG®Â¡xˆ:xô…˜ „√÷{Ä]@ƒF q ÆVLò‘¶ΩPÆaSÓìÂ!xU%æMˆó@∂∞ôﬁ´ıeˆ6y"åÿâ˜™°oq~0¿{–…G 3)•í,ò%‹áõ˝Uì≥Ñæ”π/Uc?©_Ûx~»˚÷¡Æá3Ø‚Ä≈nŒ`37U≤Òï÷5îm/◊ƒŸ"ÿoıé¡—Æˇ;ê©7gó'≤#ZÅ¨±VtLÔ˝ìà7π∞Œ@¢q2ÊÛlysÀ ´§É∂F}ò#ÜbÔã∫)QÒ[í9a˙ æv7œª1qÛ_iôU•˜j»Û—Ph‡Êö.◊ÍIH+OÆ™(ì∏Ïâ7ã¯ÙeÀÈkÏ∂¶ıÕá\è.¢ÒæjDokéæÑÿòÄ≠s‘.'πQªÔFëá(A17ÃÙ∏i¬ˇîÛGs˜£ì˘ºÕ∆∏=â—tv84…M>T[Ú¯A◊Wq€Í'∏ËWœ„I‘o2«Z@w∞è‚4ƒÅòSÏ’¡˝^8ª˘çóÅwCYVF©ÜÙ5y«Iu3Óí-⁄‰>ËõX∫ﬁb
|’pÚ√´Ü√,ØsÄ^m?-n÷r{M#:[A_t2˝Aﬂ-TœcÛµ88ŸÖxÜüBú∑ºÒ‚G∫®†@ëÛÎ7‹?¯ñ∑7áöUD¯ˆzç∏ÑlØ«ºPÁ ﬂ NN.·ÂÄ˙ïÙ3/∂&≤z®,ÖX•xî/I¶*ïtaÓ–?Î#¬D≠‘ë3±*¡<®^§kl:û{ø¶ƒ#Q{†]RbääËxØÑ#≠)—#õTìQmM˜∫TÀR"àØLGß[∏51Üï‰ÇJ∂Ä'$$yí¢«à6Ωæ!z¸ó:‚™<B…ÂÜïºK 0–W∞îa–«h’œy'R«¯Äü≤ÜPì~ü≈¢L⁄∫å5u˛ `,“cÂåâ)w‚Î\@òZ«¶¬™À≤Ω–{J‚A±;~^Ó_µ/y!≤KQ˜]_1páWÁ«ùÑπõÔ⁄ﬂ≈â–°ΩËˇn¿§v+É#%ÅBz+
ÑOÉãG¬V˘∑•€*°E7¡ˆ©¸d@∂üNW\¨iﬁa≥ÄÀ=A{° k[Ùè™xÉ‚µÔ'O™tWRkÔ™ˆÚ…kèıIõŸRIßV{A:ÿÒπÂIó‚â≤πÂqœQ∞[vm◊gúkÜ=<¿Æ¬b≤#*Œ‚V® Z˘ËÀ¢Dﬁ”¡œÿmÿ‹πÈæÁ¬hë˝6®i&ø¡€çSuÒ^RÑß3≥äxÖhlÈVÜRÂ µKI5$±f{EÙÜ¨0Z:^W\7ï -V≥e`ŸÍÍÌZ∞sÂLr´nü÷	ÅÛÉ^ÅÚº<¯ÍB?6ﬂ¥åÆ)m`õË¡≠πÍ‹ƒy/úå	Æ7-œJIhá¬∫‹∏ÅtP	NSHn[vüäÌ0ÓüãCeIùdéÀ=T
+•"L?PÚÜ`MËªªJ8`@_6m≈JI˝€AHÜ)N\∆Àµ∞uin§ÆFó^∞wèpY%TJ™6cËõıÊª≤IADF`9.n¸Æm-Q9´,DÉ¶˝ﬁ¸—#
Á^°$ÕS;·âƒ&2˚àÁ)ÆD‡ìùÑF;3U^ÿ\îüù±È<ùÉ±&9zî∫ÅçD//>u∫2m~j®Í0ü»|ÅZîm„—g«Uã–tÖ<◊[Ô¨=ML´2±°òÎ> öQºúOÉ£"ºäŒQÖq∞ﬁö'˚3—…]˛ÿw3ŒÆ¢¥Ò*Tê–?DÇS"9qx6©oß\"4ÀˇöÄ[◊8… BxUSˇâØìŒÈ>bÎzáÌ„˝Ô{óÌ∏A.yùèqï†#ë•ƒäº‡)≠˛—hwÕ%;·‰S>ø/∫‹m}=¸Ä‡ÆAõ	^c„ÖP b?Z*m0Çi•Y¥e’ilPPjhAiÄÑ`'†dÒÚ>>ÉΩxF"ó¢zå¡ª-‡ŒnÄB≈ß00\(dÏÁSPí-d”0i_⁄V[¬-vÜ`º2X“Á€˚7(JCÜü´´ÀˆEÒúßzóñÕ†ÌJGÅj+
Æ1hgæåí¯`ÕRÎ5ófAp.∂Äú‹ª∫8∆ô.¡Ëû~!∂écœ~√PBE, Œ]ÎÀö-—7\ ÂCBÊi≥&≥÷Y˙‚¸åπQ¥Dpˆ0b{U-á,7¬>€æËvœU2'◊pΩ∏ä8Àˆ€wÔ(æ}˜Æ ü≤p∫Rr~¨Yºˆ˝Éı§(eö»/9°d˘Yi¬äyrΩ‘,EõÒ“Vˆ”⁄ïÄ≈=lU• BP(æ!îî ·ifﬁ$c ’r,ôœ&‚â;Y—?•ÙoSOY˙ÈÌÛVW©•@*ß‚Ö0	]
-xyA°H∞xñm€+‹≥%xîn …=ÏUY eÌëï&D…\—µ ¯[⁄¸àCzÒ§·,Ö¯â≤)àÍ¨n“í˜–y9y	:?—˜çH_≠2∏€BŒÎbˇTtSRdÙdêY6[ÇíRŸ’úÎ÷DûÀŸÖcG]∑˙CÛÑ¸íﬁCßÿ)(g3¯f2_áÁw!J;Ñ?ZeN≠*‰à™õk|tRú'”`ãÑÜ≤úé@p‚ìõbÉ›¿&ƒ1R¥©U˘\Câƒó6ÜëáŸh‹‘êËîä(›Y62Ó±h_	YòEÔppœj”{´ä§Í7÷e#dè9≈Íå"ÿÙQYCÓ0(ú_ˆë(¿æÛäµ;(x’nDò˛,πÙ(Õ©4wK}â"»{ãÃÎ´
S|•›˜v.ªù”ÉÆôµ–ìE˛v>^ië*”—≈Ÿâ ù˘ß«Ì£Æ˘Ø≥Œi	s”7ÿ,çbJo˙æ9¸ÙbﬂV:’mx–JÁROØéè+mîﬂÖ˝ÒÍ¸A w$+?‡îZÖmK Î±-‹˜—ÿ~„QÅ–´∞m˚ÛPlç÷`;Ëe=∂ÉV €(ø{∂ïMu" ·L,Ùk§µïL+®ª–4®Ø–{KF‡æÖœ¢ú%IØ¶•¥â3È»$ÔxÇifıÅ£—∆ÿ˚ô)πÇ(˛1@r®˜l’k◊œæäVÓA¬Öã¯U	â7Â%‹‚!‹r≥{]J[˜Ï“°Éå3∫eÓ‹âlöˆﬁ¿Ë@•$èÆöŒäﬁ§k‚‰xAû]8ÇF±<Ò,x4Œ™ﬁ§]á´ﬁpCÉ"$Dx0»≥Q”#
ªË∞#¡ú±2e$µRIëâπ â bGÇóÉ‘´∫ÜqGéS˚%£íHı‘Y(‹Y‹ôA<K»¨Ñ˛¿bHèÛ?¢ƒ ! %TÔ^‹ÃÂ{◊ˆ4üzç˚wCﬂ|+kz§≥aF$"…u\iòı©	‹ó¢‘ı√Ô⁄Fõc4có÷⁄A7˛Lû[√¬Ê›ﬂŒZZIœ+É¡˛M„iu√+$ìkƒ}{˚8}U°P*k=,^©∂:Fèç
dmi;∞C:∏¯]€Ü≈ß.ûµ%>>E¿˜>ı◊O∆ÁP9 0>UwÜ_T˛Ñ¯,K˛∞¨ñ.{…ä∞Óî¿oÇM	>ra›ˆ’µ\›¥ª7∂øbÛ~‡ORC∫–Ç—GÏvWæg ¸`Îﬁ*“óqåXÄ¬uÄ›‹≥Æ:Há˜˚◊‹Ü^7–∂À2ÇJ0ñW‡*:*h]B≤”	ó‘˙Òªq?Öãﬁ¥gç ÆÏbeÚîEdU{lê€4%Âé˜–·4,K#z+nÜ†§,ZN˚⁄=6Y˛—#=AwÇis,qb<1«p_FT;ïñ6ò±l$Û˘ªã¯í∂Ùsy”‰“áÃ\lÿ'â>–'ô›òj€T
{h]mnlocNá£»+¿í¿Ó≥ÁŒ∂ßÔfhÒ0ÛÊ∆ˇÏ¥&w≠˛t∏±∆Â}õég *Åï@ñù‘häe÷„F›ÿÎ ƒ†ÄZÌq◊¯Ê7◊√
s1G K´Oa¨utÍæ¢K≠%ä¬qâÊî˜!%“¥≈£ÉÑ”f®‡kÙq‘ÜZÚö¶I∑ê¨áw @Åa¯ôfd⁄dzzÿ@ßx® ∂ß2$%≈ùËäy≥Á∞∑%ˆ~õÈ/—#ˆTÃ&Rbﬁáügíû-*‘≈I-UB”]®:IYwÔ•¿¯bô~”q"‰M˜ˆW«ù”∂¥ü \1∏§˘
Ã’.âúx≈ËYx&Ω1'˚&=ö◊<gÆ≤õßÕy∂A∏\öü–joÅî/ÚNÓ6x–˘≥%ÛVËeV∞`'xõ—∏…ﬂlW“®*ä-¶Î»∆azΩºqsè`bƒ@@·†‚≤Òe ñd”9R.R˜≥ ÜaÀ!K|S†∆o∞$ËíCpJFYo0	Õ5rE"(ªÂb!I2`)]åv`∆aÜ:#@ëï
π"¯∏7¬gπËÈÈW—â;ÒhªRÿ∂;–ÜŸÌ%”∑	ùÚîåM«Ib”9uŸ>ë©@ÅêÒ—ﬁwŸ≥ØÌ¯[í}@~OKπ§é›ù	≤Hû.√œ®
±!©cDNˆ|D›òˆıwzkå∏,“A0ÕeÎ„”]”~«îÌ2\'ÿïïÇ’B[X!Ÿò<£˝ÃB¿:ﬂWp˘¸≈Y˜¨wÿπ .òk’˘„ò•O‡/ ¥h(	…ÕÍ(ô&ÏD™Àâÿì›¨‹!b√W]óuU)˙æ&Ö∞ÎáY’(–WgÙñ`îâÄ5aïÙLÕ◊Ó$Ìß$dqMï'…ãuÆÊ¨õ@M`Ò	Ë(!ÂË´ﬁ?Å≤¡¯‰	Ùñ`%J9ıDÈßM†ˆ∞>£Œgò¿EÜ,é=üØ‘gf‘vô.V,0÷8≈ﬂãƒô?êÜ-cÌ9µ›UÛ•Jœ~··0i[ñ§÷Ùƒ%6–Ÿ
Ï|§ÇßJ£t …„0fi Ωª¥´Æyˇ1…B#+L fÆπv(N+MÃGlÔ’v‚LJlëØ“(îÿ£{ÏÜdºö]'¡Â"ÏÀüO(ò	Pï&Vúér'§”Åµ±Æ4TCÂÏ¨œNxu˝¥∞
?Ñ∫µø{Ûi`˘µÄ‘µCŒﬁÜ5> 81|⁄π∂?—PørRükÒZ˘vY#Î†É%èïÉŒ√8Ó ‹M‘5Ëà·º8
å"¥,≤]~Ïr ≥ı©kÇ≈ù¶c™êBe:%#ÉüÓUù?TûπŒENØÓ<úüB˛ÿ dü _:1n6‚µ:j«ük+mV3PI*êY⁄ëZñ†«:0°≠SXΩMÓÜ∂ú"V}ûﬁ$ÛÙN$>/+dR”¬c’^Ø^÷Ïâc∞ÖnÎ∞wsœ-¢B⁄Ìõ=ÕÕóeFjÈ—M:ñ˛:Öég.≈ ‘™Õ)Ÿ≈˝¸ÑÿìòΩûŸÉü¥◊£q°◊€PVK…ˇ/√DQ
--- Content of ./.git/objects/70/83b2a3c6bfa6c8d24f29c355853303d4888bb0 ---
xuTMLGûÒ˛x¡6M’hí“6nV§¥¥î%≈I)%±iC.÷⁄;ÿVÏ]gv-`µT®™TE*∑ EH>•Tπ–«¶ß\*≠+–JúzÍâKƒ©ov◊	˙ÙˆΩ∑3oø73˚Ω…Wå<π:2r˝öHt"êøäKªBˇó∂D¬‡OêÜ4\AU|c§E~B˜#ö V–ƒJJˇÚ‰$ˆtôÍÕ=¨S∂RCÓdx†:lÄyÇúàÜ¯5D:÷"´¢&8‚S§â[¬™‰<Ôm—$?GvS¥%>√=á'å,^!9íÉÒ3{˛z|Uvd÷Â»ZÙ›v":√JÏHôı‰πía¶'W÷®a⁄›ôÙL˙´,)k‰Ê›oø!v˘~:}7MÀö”’*%„‰C”Ó∏√˜^÷ãƒÓ&ãÛÁ˘Ù(a|√…à'i4_/2æ®d‘ãj˘\¡–uO·H<”Î¨R≠¨Ê¨ïı‰äQ,RÊIñöØPOÚè÷ì5ÎÀå	‰h>U2™4≈ñ
jµñßïJjäµº±úöcFë©U35∑bï=Â√6g∞¢™óm RUUW°íôÇÖÒpm≈(R+,®¨ÂÚ+πˆ2Ÿ;Púo¬d`÷–ﬁ¿•FÈÔÅaw`x}z}zgz-Ω›§n|4Px;û˘q∆Ìﬂú∫Ûy‡õ‚DKúp≈â˝ƒ˘ÕëFz{z˚Àfb§ïYªπ˜ﬁE7ve˝≥çãèøÿ∏Ûxl}¨aπ‚ïC®ä
∑°tÄÁ:º§ í	oëLíI!…dGlÑût@2rd'6 ©¶)[—”dÎ8M7»¬EN#®“n¶e¥G ‰N?∆km…ßkp2~Ä,ﬁ<°"ñ\çÊÒÊjO"-~3·Dœ¬\Äf^ç˛ÂÿA¥Ñó–≤∞Äñp≤kñÒeº¢ùüõ∫ûM˚…§≥DS°≥-ı’}¶áÙá~yﬂùˆ{ü?sgfîÿ]d©lïHMÂÃølGÜ»N⁄ |çiƒ…≠)b˜io¿«Ìﬁ Ö,™–öﬂDvdî$%∆ÈÓ˜ç'ñıE√ÎH/hÕ*∫'Q∆ñTò9û“&¨◊ÈRé£[Â*e¸¬c1n‚‹$x.¶&ˇ&l#¬∫˘`›_fH¸7´cÁañ£ò8ˆ?§ü‹ “OzåÙô∆ßnOt7¯óJ‡¡6≈lKÃ∫bˆ "J_„}•o£∏Yo8;˜‹è&ö dKôtï…=•Îóÿ£ò{Óﬁ¶t{9/áﬂTZ Ç€÷W˚±s‚qÀa‚è‚nﬂ≠ÌO¿ÄÓ^¸j‡õ Ìñr€=K_Å≥é‚˜´◊—ã¡Œ˝¬ã·7zÖ?{%àgì¢ó/7Z‡?…ˇu˛µ·„oàı¿Á˛Å)cUC´WË{∆¯•nNÅÅJÔ°è›ìz JxË Ω6]
Ê[<€˙U˛@Ìœ◊
--- Content of ./.git/objects/1b/2475b2669c85b9a93df3fb40ee1bd198f04ec9 ---
xK …OR05g–œ»œM’/*ONÃ-HJÕ…—w) /H Ø–( O/JÃ-÷®,…»œ”OIäOŒœÀKM.…Ãœ”+® ˛/
--- Content of ./.git/objects/38/98e92bc4090f673edcffdcf5415f2c9066f071 ---
xµì]K√0ÜΩﬁØ8Ñäà‡ÖÉ]à´(¯1›¶"%]Nj∞Mjö¢cÙøõ§…∫Å‚ï•–ØÛÒæœ9Õ
ô¡ŸÈ…S≤ö•+)Æ4óxYI•øp’hL?TÎ¡Ä"ÉuZ"Â$Â4Õ÷)„
R‚–à!ºâ°ã”Î
c(dû£ç`M≤a—ÏMjYG¿ŸN0Lvæ`Q#DOú¢âs…NåIf—<πI.¿)\>ﬁﬂ¬∆ïm·˘*yLúå‘*3°á>µqD1kÚ!ã¨-.Úm&ìj+õ‡§çFÆ≥¬∫)¥©∑«•wÓî≈0yÒ(‰ÈF	Ë“_é_Õi˚rŒ·ùÿn*JÚéùª’‰Eﬂ%–èA‡gj#4/·ˇ¶ΩúMœ…ñ’<Y@/œAˆ‰Õ<~Eû∏ç≤ÃÁ7±C÷¬'◊oPE z2‹Ï˙jcÿ«Ì»B´u∑Hvô˛∆n± âS?õÔóÇ&ÕN,~ö⁄Âm·zû9ıb{Îì}Ω^"~≠∞“ê∏ã˝•HÿãˆMQ)©∂]ÅÛ7Q∞kËMˇ–ﬂPCªëÉoNA‘
--- Content of ./.git/objects/8d/052072dd255a322875c5caa7089f081f170ee8 ---
x+)JMU010` bÖ¯¯Ç ‰ƒ‰å‘¯xÜüÀÙ.ö‚ªùıÖèsŸ˙DeÅï%ƒóñdÊÎT2®ﬂ]Ò¶∆ΩnˆM˘CyçˇúÔ?Ë ˝lh``fb¢êúüõîôóöü_ZRPZ¢WRQ¬‡q√9∑ó*N[¸kNÆt`˜ª;ùÀìÛÛ“2”~‹˛ﬁÀ öq÷Ì_çR^œq–πxjoJR<PQ^jrIf~»niï“MisZwÆ¥˝¸€·ùÙ≈¸NBÀMÃKLO-*f»úÊªl:ÉH˜çê[˝ûmº¶gÓ:CùóõZíòíXí_êXTúZ2pF€‹÷ÉŸVmè€‚∑9›œËŒ◊~®Í¸ú›Ç¢¸‰‘‚‚‹‘îÃD∞o^<k›≥iœù?ÖE∑˛eïzÃ7ª‚ ®“|†ÙjzOÑƒºl9S˚˘x◊…{[˝óAÅë·±ªXÍ˚,è÷xgz^K,h“E ˆ%≤k
--- Content of ./.git/objects/9c/9479a63636e0661e86d8a9f824f0cea411079a ---
xçUÕé⁄0Óôß∞,!-I⁄Kë8ïÌiˇ¥Í
°»$ŒbëÿñÌt!Æ}Ä>bü§c«$Ym9Ñÿ„ô˘Êõœìe!ñhÙÂÛ¯+•P	›Ûo∫ZJ%R™u/W¢D1‘∞í"oﬂØk´$fU∞ÂﬁxÀ^/£9¢oFë‘$©¢ ±^AŒ
öXèp“CskN ˆ ƒ÷/â¶v´sÿùey{<÷Ü(£_ôY¯ˆ˚eÇ}@‘®M›.Ïœhﬂ§äµ,ò	0¯ÃG∫>Üê¢¶Rº)≤(i+¯£34D∏ˇ‹/˚cWQÿ†o)ï]∏?&¯{í ùLù¢∫*†k9èU≈É9¶o,7B2F_Ö3`ñáãaì{_¿·J$TDQYôÈÉ™ËËåMW4]ª˜∂éÃ$„∂#5:`!KìA∏ßoÇ À(úG£Öﬂ
ÁÁ-ù'©Ù·cEeAR†v‚JÑ«8tÏF˝2:‰˜4∑>œµ‡¥ñ])~–ƒr‘ÍJ&ÍÖöƒJkà2µIÄ‰È7RhÍuc{	ˇ]≥énê!∆i§Ì∞Tåõ «˜k&%„/h€ti7A)·É$Qö:?‹í]√Ô’ ®AfL{èÇÏ}D–Å¿≠›Ωé«Âû$†‹hﬂZê6âËv◊b˙œÀÊÉ[ ”¶˚(5h†£s6vYu–πç«©±0ÄRÄ≤≥`5bm€\ª<)Ω·iíñ õc∑rRÖô·ZÅ˚&’ùn˚‘∏∆DJ ≥ Gë¢V2ëïJid´”>qsùA&kq≥kË—‚5˚J∑É˘ÏÓ9π{º^ ÒzC‰ÜÛ´õßã≈`◊ï˙˝Û◊± ¶BÉ'l∏wR<¨Ú¿≠;LNNåº;e¶[+≥∞
€W"c˘∆üw€v„f„çb/åì¢1ûLÅ#‡YΩ*_·Ω ÖUuGB·È±V¢ißºŸ≈”ı„Â•íQ•éò⁄´÷q´G¨U∫r …<wπé æÌçÈƒ∞µÎv¥x°€¡j¸◊'Ã+∏ÖÅı—tä>ç·≤ÎòiR™ ﬂªÁ_„
--- Content of ./.git/objects/d1/36c0dfea399f7b8e9fb35be7dc716769826391 ---
x+)JMU022d040031QàèœÃÀ,âè◊K.®,…»œ”564‘+®Lf∏bpª	ÀüÃÁí≥ùîgV/˘–‰Q’ìíüõòóòûZÑ°´†y”‚c˚óù∏‰Øy8¥’ò˘JG˜®Æ‹‘îÃDú£5V›ÛP ö2„ù√™isä⁄Õ/œ1A—XRîòWúÜ≈ îs_næÌÕ¯4˚»çL˚îˆWñü í[P
--- Content of ./.git/objects/4f/d1b0ce46e924fdf996a3fa9c6d1b518beedc89 ---
xÌΩkw…ë6∏_Wø¢^ËË ¥IPÍãÌ·gñMÇ-æÊÕ$’v≠≈E-‹å$qx∏˜Û˛∆˝%˚<y©*êî˙‚ˆ¨y∫†*/ëëëëqÀ»ã·‰"˚√ø{˘ıˇ∂∂∂ñmO∆Û|<œ&WY{Ω—Ωúå«˘Â|0∑ß∑J<å¶ìŸ<√ã´¡ı¥7+Úô=›∂]ïâ|ùœßΩ¢∞R√…ıı`|ù=œˆ¥)˜‡Ÿ≥ÁÏ≠.fy÷À¯8üeWìY6øŸh“_ÛgÓÒ¶ºG;m4ø/E[›Ó∏7 ª›¥t<õL{◊ΩyûçÚ¢Ë]ÁE6ü†°<õM&sk\GÅ˛˙Ÿ`úMgìKÂ˝A√E+{WŸÌdë}Ë%Eé—≤¡õﬁ∏?Dœ´Ún4∏æôgΩ~ _ÜÓ5 ø…gymÏb „…á’l0œ>Ü√lQ‰»®á>ãÀŸ`:o6áÿz"“ü=ÎÁW|∆YËŒ'›~oﬁªËyKAÔ≤ÀU¿&s¥y8Á+œ2¸5˘JYWÜﬂÀnOˇ¥üY# Ö3qâÒc“Ωaë]Õ&#åƒ#P»∏⁄“ö¸≥5ª.¥v≤ë˜Ê7ÜËˆË∂}9Ë1©Q#¨Â ﬁ»Œ0%ÓÁÄ3§-*6û7ÉKiˆ*üÛãñqÑÉØ@≤}Ù$ü/f„÷≠¨D£ÜZ‡:õ\¸ Di'ΩAëG;/Û)gdÉ4A äi~9∏Är<ÙÊyÇ]å˚&√0ØzÉa°-€º∏An∫—ÍJjoÀ8ñe’ZëA(¡∑˚˘≈‚∫u’HÂF∂5üÁ#@Üi}œÚ^ﬂ£è3Ÿº”~ÑNÓõÌÜ∂9ü›Ü	d%y_dMõœb”jDÏ‡JF*ÖÜ¯⁄A™û.{√*¿€ì≈∞Ôõ¿rÂîÅÕv˘T1õ`M≥Ï¸·íKup1ÃmLÏù3NùT=úÃw9ùŸl2$ä\•´R_ÈÃqpΩR”O√ÈB‡πZá∑u≥–ÖI K â8∫)627Im{“Zπwï›eû¸≤^ëÂ„èb[Ü. …BÍ™E Ä»≠Sè≈gBÄÛﬁ<∂kdæiÄìÏ!¯3gà¸'Àá¿Ûr8 OiÇÕÔ‰WΩ≈pN˙ÙO”™¨&]·q©7∂
∂†T¸	?UéöJºoFS]√oJt—Œ∂ﬁcÌíl¨ŒóG]ò2ﬁgcî-®—uOFjãÙ<Ÿ€'pã7¬Ô=˚W¨∫ΩFYøMhÛºå∏∑¬=§ìõ	÷·fÊA‚‹jÚis5k'X¯ÚCπˆªYµ4ü6µ •ÉìYøZ»ﬁ4W@G‹)ÏAV‹'»?NáÉÀ¡ÛÈ6Eô€+´Ì ÄîtLç0}çΩ·¿H†a/ Ée6)UïÈÀ≠Û:∫iÏ¸Ç¡§#íFπ·•˝áﬁlå•_Â√«Üt∂´{E-È™y«,ïáÉµ6ü‰∆YR»˚hí PaojggØ˜N≥?ÔÌÔgØ∑øÕˆ≥√£√µΩ√≥Œ…÷ˆŸﬁwù¨s¯›ﬁ…—·AÁÏ‘»û8I6*>∞ÅbNù\I‚„S±C úå„VFµëEHÑ¡≤ÀGôÏ.8‰ 7Ä åP2º˛⁄Œ:„Ç“≠|8÷uËLBo1üå jˆ≥Ÿb\ƒ¯ <∫¡˘-°’xJˇÌl˚&ø|g]°ì|¸~0õåG‡“ej≤ÂÒtjÚ§J	¸«Æ	¨t ˚"X)— ≥@ë	SÉ¢X@úó5õA<ñÕ≈@ŒP≥»á‡˛y?FúË÷Ç6]Ã)çã–O˘ˇJiˇ;l•—Èls-b5ªXÃ1œcP;˜˙^v=ô†v?ÔLÂ∑ê€# Y"∫A ≤@±ê∫1*öáqn8*}X»≤◊`ª‡+‰∏˜Õ'V"Îb%]ÁO¨tÏXhπ˘õfˆõlòè[F +ƒ†˝p2 ˜ıÊ}÷ıäwyÂâ›->õVXå”¡¯jRej€éJTNïùôﬂMÛjFÑ·ß‚m’+ExdΩR÷l&|∑È1úp¶0k‡K%√‚ñÄO≤‡ütŒVì«úèM˛ì>6ºn⁄óÙµ¡ªi_|õAnwd$x++âÙö–0áÉ‚ã¢LìÒäöâr-LÈ‘Ò”2T•:ãvXP~∑ÒˇxímV1áìŸÂ§ü∑;'›≠ÌÌŒÈiwßs∏◊ŸÈvNNéN"JÀ|∫< Ú`ÿ˜´`KDw,˙1¥9„ìúÚ≤UO”´Ù~ô∑löœF‡BPuÈRdÖ=˘ìF˜Õ÷NwÁõß´¢.◊éâÅ†±•˜'‡ù§i—¶>‚ÌìÓˆ—·a˜ı—ÈY–ï…x2‘€Ω1°s+ä<ï´ƒÛ7õy´ÀZ Ê&)ùü´¡,ˇ Œåùsò'['’íá	Ê…0ﬁÅr* $‘ì|M7gÑÆ»›K∂%ÌHπZxäﬁUﬁ˝€"ü›∂úÇøö…O“∂âBL;´ô@6õ`”ŸyR>¥òËÃDÛq˚R¥˙±ıf∑õg≥E∏ÇæoÁÛÀ≈<o%]í˚µVBY†öj‘i¥-∞Ä√∑Ñı´iã∏I¶Ø@\ ;É◊™{s9ú¿îwAÉÙUˆÛ/Ìî`lÃ„9ˆÅÄøå∂ñº_—gï[â¶)657dáÙ¿¿Î^2©u[6Z”iXˇbÉ°é2õºá< Ü'q<d<sE‘ñnY∂
 ÷)bPz’J¨7Æ`	S˙Ÿ»éƒ~’Éƒì §UﬂB®&ÿØ–®ÉÈxuéJ6-#øÄN£@ù„ÑXl…ƒ©Èù|∆ÀÓ!‚çiäƒ$∂≠ànK‰Ë•KÏ÷£—`ö~n¬∫>¡lCp€/¶ñKzÁ`?õ`+©»£bßæZåe±Q≈¶†eÅ‰ëﬂîìÅów©?ë	ÿ,¬HñbfÌv_ùÖ‚)K%öìŸd8ºË]æìQû∏8ïÏàe8ÂaU÷Íp˜tÄVß	¶nXÇïˆ≤;˝ºØ,JöÍ§ª´¡3%K‚Ÿ≥g˜Ñc©ìY±^ÊÆtTàÂx‘√ˆ?+⁄b‘Ô∫üôsb ¨"ÔBáπoﬁ+’ ./ÊìŸ“‚⁄¡|÷WPB]ìŸuo<¯Ø\Ï´⁄¡jG—V∞b¯’•Ú<Îv‡∆”¢uø;ÖMΩp,H∂¸¶÷^ÜmÕ∆.ùr˙¸&,ät(-´
$ÄKÂUxRQ°TÄÙq¨Ó·ΩÏçKµf⁄d¸Îä.≈ÖÛ,=œÍ^=3ø—ƒ{êfπbìñœ–7≤Ì∑{{Ø¨H¥OPUFÆ{Ä÷ÍMß]√j'∞é€»A”)àΩxˆÏ`Î¯xÔ€S`∫æ∂5Ÿh`Ëä¨Özhæ•Ó,øÑπ+ÏÙ2ì*m:2∫ùBÚT©€ÁıçÛ	4‘™áı=œ?Œ◊îh±˚(3∆ñ†[≥¡Ä›ïΩ;eÃo%ïù˝Œˆ4ª›ì£ÉÏ. sü˝˘uÁ§£4':˛fˆ¢Põê’Ó$c˘ã+¨ÑºØ"7n)P+k÷3q•|AI$Å∞¸lÚ°NÒLãe ySÜD—¥/©	¸móì·b4"˜äÛ~^\ûø|+úûﬂ≈N£“káÂ˙6√>Òˇ˛ﬂˇOvp+ñÿπàß«™)Éµ˛k0Ö[%Ù¥J WVàÙS[ﬁ:‹ëÜ•Mß^-á]«Ü!%ùy“ùßπ*Wé0$\ÄÖÕ…ƒl¥fΩ˛¯Ç.
Hß∆ÆbG‰%L8c`ÙÓ^ç"da†≈´Óª¸Z˜Xcèökß=ÄK´h9∫'Jﬁ˜ÜãMƒ›äÕŸ⁄		SØ•—^´—Xóƒj÷xâø˘/≥/xŸ8\ﬂjD±3Æ£¡x¡úø¯ó¨∂´∆IÔÉgÖ\L9lûî7cËb1•T˝ ÿ¢T¿Q”ó‡F-‹R˚´1{bXSê±du›yÔ]>nTI‹–e¸∞]Ãg†÷Qﬁ¬óñº]9ﬂxı/o·Êõ{óy´±Ad¨·ü/VÂ≈˜k/Fk/˙Ÿã◊/6^úFÃÇ änõ¿s5Ï7ÄÚäk2ÙéÌÔC>k≠2¨(„ÏÆqõcÖüØ˜™FºÙ3Qﬂyﬂy0j˙ácPNÁZovy”ö5ZÌˇve#˙ù–)Ÿd ri¶ähñ∏˝£>˙¿D∂†çp=†”ˆıl≤òÇå´≤öÕ—òÌóø{˘2˚m6¬◊ﬂÒãäs,eU›’ﬁ<2¿GÜ∆VK|Œ¯Xœ∆X3∞2Kq[]Ç¬DŒç‰ﬁ€“∏ÆQ/©œÚø-†ˇ€‚≤¡û◊5d_ ±I{°Sm>*«‚ı,‹¶±˛v£PcÖ∫Ò§hSÃi3É;Uê÷¯∂·÷åÔün1nOÅ¡ó≠ácÉºÑ0zõ“à…™
á ¬Ïud«*ô∆∞YÕª„úÃºN.1~O—èÔÁëX÷=ªÌ¬?±πã∏H+µÃﬂ17`”‰%¡d‹‹›ΩÆ€eË¥Ô~ìÒjÌn„ª÷ñJ˜‘m_F∫ˇ∏Zá}œÜ1ob˘µ ÅXJÕN¿ΩàHq *ùD,TgBiWÖ≤ò\Á-Gª£gBÎ5eÙπ±aÂ7ìaüÿa‡ämˇ0å[ÁÕEÛ≠≥◊k«ïØÖíWçΩ√”Œ…sgG©‘◊∫Õ8PWÓW≤Ô∂ˆﬂtN≥÷]‹Á˝JC«TBç⁄˝∑°Ìç•bﬂqìÁÜ®Z)ÃÉ#¥ 8¿Œ…˜›ì7áŸü≈%¨ìëÅ™”°ƒ¬O@3§ÛV”ÛáfºH¨Öâ›Ç¨≠Nﬁ]Y&‚≤BIÃV≥˘b:Ãu?.j∂	p;ÍÏﬁ"ëÏÇl”!–°aOàÃo…»c*óEX7l6[ÊÕ%ì[‘≥…ô⁄µ≥ºU(Khâ»íã©à.b>˜˙ê BA“µ9ËìÔ® πJë;TÅ¿¸∆ètÃ\ì±,É^“j†…ä¸ã5†B29vØ‹k‚ﬂÁRÚ-ãµhÌ¿~YrHV8ŸNÁsE*´Œºô‡{§4ù;⁄≥µÇLˇﬁé≠ΩÅpT“ˇbŒá% ”∆L,sÁWçˇçÒ˝ˇö†YJ3:håƒ¡¢!. PL8¶{’÷ß‡Ö†ŒçÄ¥Çqπ7«;[gÉåõŸ}v⁄9É7”≥J‘äiºÓGTue˘ïxYõ∂˙ã∞6á·D/OP≠|Èé~YáåCg»Ì?©$˘è¿◊ﬁ«Ëß”ˆâ£&Ì}:[”ûc∂ñtÎ˘Z’4âMx-±IŒ?Œ„ËÈ`À˙°ÄÕOLï«{˚fs⁄¡hπä≤¡’Y∆&yo⁄ú≤ﬂÿG†⁄ıÛ·º[Ñã©ˆè¥Ó¸o˝ë’„w≥©ã¶=A¨ü—‘.8mﬂpS≠!ﬁ1ó≥Î√E$ñÿE:P]∂Ë^k£∏-\u0&	MÖiŸ"B’∆Ïmy\P¥kwˆ@]√¥õ;\Æ¬p§w∫4⁄IùÕOÏZYÇ≥áXÔŸ‡÷Ò^Ü8¥°Ôâ |€⁄®˜é≈^üùÉ-πW‡báìl—h÷z(π≤È÷éZd≤˝Ω√é+nÜ˘G∆∞ª@‹8–∑Ä°u‰Cbég˜+–lò±’Úô£YmRÓ é’Ì’–'¥PP–àG∆Èk€"øJdW;;Ä© æx06K•€ßÄ÷íAkPeÇ;	^‡«∑ÛLöË7és`V·'Ñk‰õœIÕ>\_fDË˚¯ı—ŸQwgÔL≥π>Ç„Ö¥9Ë≠ﬂLÊì¢˘ÏªΩùNmÅÔ‡2cÅoèéæ›Ôtœ∂˛ÿ9zs÷=9::ÛÌ›LF˘˙Ï√eo4Ω»á√ı˘_L>Æ_∆b∫~ÜANÛıo'ìkƒk∫.1a{«G'g[ágàÇÍçØ?(˛áÅ‡Tí∂ )*¯N@®o&À"≈à…ÍÍ
QÜ†~à]ÙÜ∫[}z˘ú(’€»⁄„¸j5kCÉƒø}êYk¿%]¿∏“MØÂﬂúΩÇÂæºûf-˙'≈ ≥ΩÉ≠o;›Œ_Œ:áß{Gáß¿‰˘ÈµÓR”\øL«˙y=∏íÛ©nÚ¡•º˘ê_LÂÄíOÄ%ü ¨yÔf§‹ﬂh˙ïîMﬁÀgÔ˝@ø”ﬂht§`#CíîØqˇlkø{–ŸŸ€JGVl{1∆‚n)ïòËç{√72`J”Y~√YB¥aqâà,eŒ¶_º∫¸›ieáG{á[g{]∞ÜÓõì} ∂q3üOãçıı±≠˙6<zcXÉÚ|›µ7»˙,ç*o<-ºÅ∫‘≈4û±ëÑ”Oo◊_µ_f≠Ÿ‰¬ËÙÂ^Ω¸˙ˇ∏∆yûé≠4Rí<Q#úÓ›≤˙‡
Z¿Qõ≥F‘ÎNgÎ˚Óië;$ãWÌWhÈ`0å£Ï#O'¬/áΩ[ƒ»œ?‰9}Èé∑Åò·¨åP4ù nˆñh€và E• .C‘ˆ£6ÑT ÿvÔp˜h|uÃó≤ñ˙Ÿ˚å»FôL7äBÍ†)öGó⁄CK€t\æ≠ç)Kﬂlæhı
∏¿F˘Jë≠e/¥,Ì*Ó∑;«≥R hW≈0†¿öÇ∑_>ÑAêIÌXÃÆsÃ¢y∏Å∏I_pPvugrîcU'<’Œ!.–Xx∑üèC∂ã¸ççﬂv⁄£„É™5∏5Âfr‚‘ÔØ^ı•«l2⁄qW“√6⁄@tﬁ∆Gu√fº˙ñ≈'≥ëU8∞πõˆÜhÓT7€§-j∆"€y€˘e˚ßj°Õûàª :+S⁄0-˛›¥J–BÛ AFé4≈hâœ‚˝VIiz‚‡Faˆ¿N´{ö)á∂MŸÔö¬ﬂõ"N`Ö5±jºÜ;ê∞Êﬁc˚ã»µ#çF≈ﬁÇÅc™÷÷É∫iòTî!Ñ˝ù.‚s=¸†≠™¬¶tYÉr¸H†ékŒ´˜¥xDE∞ë*tA[÷X:ﬂ ãÎäÒßà∂a§sCæJdMDåy3"mﬁU†«nå·ò◊‚¬‡b0Ão™‡˚É˚á≥4]UFÒ±6DâüΩŒé˜øœæ»∂Næ}#·æ%.¨z ñP]3È“tC€¨å òÊz4:2	átUıKµb◊2à—8\ü&√É.Úú_–e Ÿ&ß∫¿îÊ°êD”ÜùÈI8ae8ï$n$ún)∫»¡º†ÆÍÇ;õÅ≠øm)é‡A∏ºp§Q*bÚÙ“§'%0 -BEÌy˙â1-∞‡,am0V<ùm`dgXàæø@…>É€9¬Âÿåèà£DŸOb«]ƒÎà,H¢ﬁŸŸó)t#Ñ?ÿ”†5ÀUµ}“°E·lÎõ˝N∂∑ãcgYÁ/{ßgß–Å•,˙Ö-&÷lÎd‰ΩCT&ug«'êÇNæœ˛ÿ˘>Îˆ›÷…ˆÎ≠ì÷_ΩíΩ9‹˚”õ‡]^¡πâo°ÉlÓ!frÁõlß≥ªıfˇ,c66Û´?å.æ ∂èˆ˜ß˝ÓB»bTm˜rØÒ∞BÔeÑ‰G¢¢õ*ºÇàâ«EU‡Ô√)
mú˙£ê0Z„∞,7à	8Œ¯∫°⁄û›ÈÑ'ãq»"IÁﬂz„Kƒ…ã¸£ﬁ$ßteÖ„≤>“J’¯–Å1±^Ä	<qZ®çk§
ıø5AﬁÔ É∏õ•ó_˝B>u#'	?’y#≤∞]apƒd1™W≈øfò»hcÍª_&ˆÂ¡∏üÑ†ÖOƒïì71;g{áﬂÉ¢†í˘πf1)€ÌÕ3öø  w“"8êé1|$q 	Xí–£,¯ìZøˇ›Ôa`√Ëﬁ@^Ç~5¯qÅPr—pTÜ	7®·aˇŸ»ıâsúO`pˇqS	±°˛≤KÛ©c}˚«ç’ªEíë¶ƒ#eÃ] …2OBÑ9q/6}©Ø_Æ§ç2…æŸK;K_¡pÊã~ûÌΩ´-ΩŸ-€É	biUl!.åb…⁄Ä
á OÑ}¡|‚◊88q
ÅïO>P¨∏Y‡¿‹¨”÷Æ5W¡B4Ü0Ë–a•ƒ†ò,Ø.°gHAÚT›™`?K!Ä˝Ú@ ë{O©ñ†	–7R-s9ò¡Øﬁù\QXªÇºùNΩßéø7[òr©tÎˆk}£ªv:~ñ&Ü*îmÊYÀÍ√9ÆÂKX‹=:ÈÏ}{»ù?^…N:ªà!;ƒqg√j˙+ä¡„˜;7∂∑N∑∑vJ´ iÀ∫ãõí÷∑Ù´ôäcF#˝H©iRå83 Fúƒ¥J‰˛∞{¡∆s*6ûÉﬁ4ÉQüªÖqg{l∞[£ß»”9£5ÖO¥ñ∑Ø€p ç±˙i˙–ªÂ«,'”öåõIs˝AÅ>nuˇ8ÉÅ+nKõ€EÅÏf≥˚Âfπ‹Aó§)yæıPUW»UbKº˙˛9†Q?P‚ìòÆÌ◊±öe"ÀÑdÀ±∫j•¯ß¨g´K-hﬂ_º¢èeµ¸ ó¥⁄ıˇ)àP]˝eãâ¨ïòÆx∏+˛≤ZÅÍW##§õÓÉ¢‹ﬂG∏˙’∞=ÒuÖMîŸûæ™Vå´Tb"∆X8ãHé>˘€≥“âÛù8∑ÍYU:…â„˚˚ác{ﬂÊòX`aÿÓ]B∞HÕü¥≥¶ËI§õÙUU∂‘IÅÂZ  ˚À…§å<Ü‚Ù´`.˝â7yÅSÌ‰îƒ`~Ä`B5Öü»≥êx 8¶RTùTPJ	ÿ1Ètì3}	>JÒ≥`€ ˚Îò≥K§,Ä	U⁄lCjCÜ¯∂ìâS!∑nAäÏ©ﬁ⁄√÷∂ƒ†√„ä@(Ñ•ëŸπJ&œ:,ƒŒôÜ≈ÙF√0°Ô_«"∫“"B%ŒΩ´O¢ƒ4πÈxÙòÊØN¥e◊H‹íkÍ™~—òdÀ”Äüê2.áÍ¯ƒnb4ﬂ1GÇNúÉÇ¡u±j.	 ıfÔ∫Ω¢ÎçXbjé¬áKVÁîßœÏæ^=Û&f3%˙&ÃeU6Ó	(ø†≈ô6AÁ•£©öÜ>fˇ°é¡¥
õôtÍ’Ç˝ÑÚKTo’Ÿ;ˇ‚`ﬁ2FÇ-Ã‹ŒÎE_¡“ıcëæ/p ^ˇOﬂS+}sºø∑M;8ıXdÁáªF€h˘GP†¸wr£jâåo52BÆf<¬.˘:‰Ù_÷bÑ˝Ià ¨í≥$(H]à.ºˆc1Î;(|,<ÉZ–ÖPe%ARÑ·FèNqJÔ*¥„π?!#∞¬i]œ `)s AqÂ.É/ˆ=zﬁñ˛°¡”W©$í3–’ï å:Ê∫`HÇü¸_Î“ﬁ•¿Uº€ì…˛'ê ΩÀ~A√yD¸É<b∆¥ö…·àlÇr≥8Ï¸Ñ_Œ’ Nk{È±ê3ü!4∂IE+1'åBkˆÄp±‘GH-˚\2Víá"∂|Oe˛\»∞ÄÔ.á«F‹7a∞ºs® ( ’`èî√| ˜qF≠Í\Ùîô;~ÍÈCè°ñyXtU¯™ÑÁ&"
¶◊Ú`1ÆØê¥¬C°A…4P3Ω#ıÎy”“T·§~e˚ÜjW•«Økå®¶mf°ae—bç◊'˘∏ÉK)—fH{ÖêÜÄ{∏“3˚OZ‘<é<ôu›Ù8C°Ì¡îÓ%‰Fclg¡"ò h Ñ≥ó˘ÖéJô∏*E¶!Y4≈÷Ë¸Öà1ïQpA˝ûƒå√Hè¡íèf‹¥t4ÇÀJ‡Àœ·&ÜeÙz¥WÀo[*€>Äì~ÍÜ:¢“&ä$(pM<ñSvñ#4´.&Ym@ä‰XÄ$åY3ŸMPiñ#ÄÛóe+Kñ-4L96.ìÔŒã2˝5ÚZ˝¥
B—ôF¿îvgM™*Aƒé√éÂ ∫>o˙Õ∑Ü16Ô¸ƒáî∏§˛%‹@k˘ûœ≥t¬n˘Äe¸ƒô"ßEºÑcT/äqÍ£M ±‰	≈ﬁñp±-ÀMèyD8∞pRwéÌ3Gõw)◊ˆHa«K˙L{	Æ©A®ˆÇù:ÀÛÏﬂ$vò© ›ëyâ£f;ÒﬂÛÏ5µÏm§qlA}vO∆ÎÍüÊå)¥Áà?ú®≠=Åâmï‰'ÙÌ≥ùêOi™ ,Yﬂ´Tv84O@4\⁄–≠‘JuÕyL®Mx|— Ÿ	$U°IéÒÀD‰ˆ∆œ[d÷∞€„⁄≠ËíEgØZ&V¶∫\ÏMißy
¿Á¬v·◊pe—fΩ+:0ƒLBÕ¨›¯S3qEIπ0"M˘àds{;»«ä‚ë\0ã$hæàgn…ÑÍ˜|Í’¢÷ãdá¸c€"Ç–â©ÆóQVâ,ì˛8Ñzﬁåë„!^¨tCp≠À v«+(*KÜAãÙ¯»»>≈`±l@•Å(–Ì¨*Ñ;äXsyï	ÖI»•˘ÁzÏ»ÿÖ46¯¿/ƒQM€¬Ñ[{í!¶‘◊!DÉ—,†Éè°7∆∑QpôOH1∞Û„b÷‚å/Wí¨_#ˇEﬁñ◊]¡`±]	dsâ˜¡=Â¬¸éu=˘–61,Ÿl#fÇñ†)âYè˚ÒÖ›P°@Qú=4¿JÄR÷õ#öÅ≥≤ãu«≤»≥L˘€ˆ(Œ√¡˙$¥yï‰¿(ºT∫öΩ√zÌ#<ù&6˝¡¶ˆŸ÷∑ßrUZƒ?©qÅ5˝êëEÍá√ˇ÷∞£2;òËêãûe$ﬂ	äeFÓcŒÎXöÔÅE‚1YÓZ‰5∫mπ˙erE(éªTJA´ê∏¶^·1Q*‡î’	¬ÈÜJLﬁ∫TCK\∞v^÷êUÆ'°À'„ºi•Ë∂^˚A˛„_ﬂ◊[pª5=z1Ü
2c–µNøÍ0ﬂüzÑ¯&-k#I@}Ò‹¿îÅ-]“ô.Êíß◊p‡∆}]©î°ˆú†‰99dÈıãñvlÌÇQ≥ÏÉ2b çœ÷≠—‚ãT±ò,Heé4ÿ>¨ø~∞•Ÿ«âÿR≥íÁü+fI€Æ]∑4Cé0∑ç9Õ˚«j®SÓ)BTa|>Ä¯ÊÅY:$jâ $:bïbkq-,Çˆˇyä'≤¯ûÇ¨’6íÈƒ;F;®.¬Â´Ä∏Øﬂ¶ña†≤WJ$•Q¯”{ñıÁÙÏÆ0”ëÏ∞7I¢„2$WeÂ\F<æ.Ld8Of´TSñJ.∂b›ÿ•NL◊’Ëc	‚sz¥Íxøúnl„¥”&gÄHÏ-ÿ	]›rô≤Oäî5eâƒ∞arU1áä
XöñázíêJÈ©äãO∞Ní|JktO∂◊h5x”§Îë)ÄOﬂ$Õ[Ãty$ß¿]‚7ÛUprˆ¨”ò<p Úº1 Ã§¨©‹Ùyf*È]‹£&p…á6]Âû›Ωø»R8Cdì¨È∏WåxjBµj2â•$Ä∏-2 8D´◊Œ.1sE≈é§Ê.”@5]Ívﬁ“È 
®†«K@ëTñ≈Æ≥Ç!qíì¬4+Ö∂·P¡ˆ∫lb3{â>-b$à#vì´+-jHöt@ÂyF!$iyé¿s‰ÍëñIˇ‰ñ3«∆?înç1~Ï{QQ™Ø.ﬁo±_¡6µÖt˝+iúõ–z
¸+Ü‰ŒÄC‘¢	§Æ∞—ÕW™≈êdˇûΩ$4~«—§ˆéãøîÈÇV≥wﬂ««ø*ÄJdú#ÖpÆ•í8·ÑµéAe:ìîâ˘3v∂ k”â^À#˘^”îa∂ôó8ùÍº>√âø£Ÿ Áª{»iLRIÀ®)É%ÎﬁÓÇK≈% ΩˆI9§yRàÇ∞ê»÷D«<aÁ4Ê9|éÎ#æ«ﬂ∆¡¡∆ŒNˆ˙5øúûÜTà¨ı"7ÒÑm◊ebãJ‡È≈˜/F/BŒ5w9
õs[‡wÃê£ÀUÜ√W¸+±∏p√íû‰gWöJ?öwx+‚TÌÏè–Å…≈ be1˜c7Ã=¥ú¡t´Z/›Í@ê¢Eú?c6ÁÙ0ãH3Ö√πÆ)‰ï$“P¢ªÛcà—l®‘INÇÙΩqƒ¶+cø£rê]å95ê'C≥«(c÷ˇÁA~É4?Î^æŒ˘ƒ$@\ˇÀkãíTÛ⁄Ík⁄:‚0é¡Ì À∏?X5üálS”¥‡îOªÅ®ΩÔb·õIã—®≠·_∆U,ö™Æ∆ñöO˙$ã*·G∑èîw∏pè‘¡ß1?∞√;a™-Tıïéô§ È—
3ÆæZZû∆#JB¿PÀÁS8’|X ˚≤öÍxJÁ#x‘r¶&¸ R¯åVj)¬˝kA›=\å.xERï%nπn5>Ωr-`8_P”ﬁÈQ-B‰ymK≤≈†-ø’D":äÄ)ùÄxŒhß$·é&T*Ï„@¬ﬁNB=Rîgj'Eké*†íﬂ7\ÊR5…ÇuâπKURÎc)|ÆªˆìØjq"^cÅ ÈEë1Ql,g"iëyE≠†SÍ≈˚4gããfj-é.Jì∆<∆dﬁ¸„˛.<|–g·∞}Ú•ΩAˆïÖJ>ñTUG”.£¥Ÿ∑¯ ˛\…±h@Ã“‰a∞¸_P Aé'ààÑ≠Ÿô!˜”ò†{mÏO÷∂xú´c¸àßÅ¥U{B^‰%\ËÅ÷mıªj<”£m Zqﬂ£5bO‹Ÿ)[∂ß{W£Ü∏ÂM•≤:÷·a`€…€Úï(5ûOê\Rï”§‰ tˆŒq.¬Ô—o‰%ÇÛ¶lê•g6âÕÚsõÕÚõV<å0∑ÂlJπïzµW≤Ûîﬁ%”˛XÔ6˜Â»xKÌ*-=å»¢\ﬁ‰#„˜DRÆ_C-°»†ü 5r„röKr®¶œÍÎc©2Î∏®%*tí	·n®ΩËÀ∆/ÓWb°≥Í?Rg«Éå#v∂:ÓQ%HBÎY•cäÅGUÜxI€çí™Ñ∆ÊÅ—ÓÈOÜ$"¥ü	Dõnkáw™ò‘7,@Bê>~(Sp_∏Á°üÍÒªdÚdÏÇ∂¯æÛˆ∂˛◊à'Û1Æ·'+–¢≤yaSW~&≤¸∆Òö
Bb~ÙcxO¬ÿ) åªå•±Ωz
ÔIz7íz¨Ô_+ÔIV‚8∆7∞cπ-	∂çnH™ï8”^ú*U⁄¯ˆ§R`9¥úQÄ«7{»ú≠∆!œÎ≠›¥F|ry…)ã6|¥vXˇqE;ó)ˇÇ‰°˜#D6X5ˆF÷Ç%6{/2?ÍÄ•Àu–ï##ün_ój¬«?”æÆßR~•ˆı0∫O∑Øk]ÁF £¸≈ÏÎÇ“ÿ ˛ì⁄◊e\ˇ¥Ø´©˜üˆı‡¯ß}€v¡‘ä"ñqƒÃÌ,±ûKdul>Ø⁄öv6{êä`AË¸˝ﬂ≈FÓ˝Õ2ñrPÖú_bt/rÚV$∏¥‘né{h5Ã¶rÃ!ÌÔŒi™fay¸˝”f˛Oõy∫ƒ¨Õ‹ŒâWl§;.Ådb'«+Âwy¶¸DM–qöëñZ©Ò´±ÒF&Í8 ˛ß·qˇC≠·ü⁄d˙~Ç(-øìºHª≈œ`íWÆØVˆ†‹FáóºÊì|\85…€4a_¥I˛;9 ˇsò‰ÉD xa¬˜cTUˇ5;»É6x„j⁄bk¡õ4ﬂ≈ÚÜ#VÂ™9´Z¸KR^Iuˆµ¿6c°k,·3Óôj‹O¨ ˜-8*˘ŸLˆJ.òëä…>~c&˚¯Yl6KûG&˚ 8‚ÇÅhãﬂDsøÏïô«‚jFu∞∏\ ìrÎmT^©Èµˆ±8kL~qß5f⁄r[F;ÂÁ	·ÂÉX5Í*7‚Ã~1HﬁÂ†?ÀË/U∂™YÎ?±—ˇ;ÂO?ì—?g›dPâñM˝FÜ7x~¥ƒé_ôI6Ì]6µ∂˝»Ò∞SA}Òï~jWÄπ~RóÄíår•ƒ%Pyª‚ó©K ~≥Ã%óy
oK8V óÚ∫ãÂ±•kE·mI«Åƒ ßº¨B…pÁmIßıºÏ¡.û €í~>ùó%0îú:bq{∂A⁄¯v˜S9l2–üœâ‡Ò¯ò√@ÚS:$"ø{A7"ÇÂÊJıú»ëZÁ=ê◊!2_=4ª»∆6Kù59:áàµ…Â@≤42âπãkè’4;˛Dm∆BKSAŒ∂à[5◊Ë]c˛B≈oë‚ìÈµéúONÄ…>±–/Û{¶ôVpó¢l'zâw√Í|WH™äéêıv‹$~U…Ô‚@•¿àKﬁ∞-$•·XûÄEm&wà)6Ô∆YÑØvˆçx©–-œCÚ~!I∏|5ò·vÜØôë^ö<ﬂ¯˙Ì}ª˚˙”à$øºmï´äÏ ∫Bá$V6zWqFÚƒ”g˝∫*ç<MÙ/gmkõ_.Ä@ aûö;J‚íëñ:∆⁄üNf8¢â1¶@ 3óFXv˛ådÆﬂº˘©éøÕNœ:«Ÿwxª∫≈îqZ£ïœs^n!g]O‚‡¥uôÎ®noí°µÓ,Òˆ—‰ˇÕä€èF›iÄÊi¨‰•ÜÚ∏…†ë∆Á¢‚q¬(]ö¡Bw˚ug˚è…ëƒ!èa£%ßÎ‰+N∏^É@2+ÉmÁ0ArØNCàyw<¥|§]¬Ø÷Wi‡%n®w6hQ%..A∞re!8á≈#Xt^^Ç•]MJGﬂÑÜCˆü•‹zvÔIÆ‹∑»4?√>Bilé ì∏∫≥  aàcµ,ÊCJp¥‹»Â(çCûW¸√`ÆJ ´ú,}÷é©»1‹tïÈÅ…t{–=Ò”∂©Û–ˆ5˙ìnqªzvø=òŒÄÛó
.oîµU∆ÉXåF˙ﬂ|√HFÍ(Ÿv™¸#›ﬂk√à@–≈¯ﬂj√ê—˝J7å2lˇÄFrƒ˜ZÓåî≥j8§k]6_Ω¥+î-™—˚Ñk◊›7ÈÆüÃ‰§3≠ºª§¸’\&—¶"\öÇ#ØsÕ bü¸`èÖ€r%õAˆâ5¥…¨'lø@¸Á;
áxÖÌué<8Ys*˜õ4ÈIÔiøÿiahS∏Ír<w74ÈnE≠´™oU†„òÅJ˙
∂°ÿI.z+$_\áÄ”¶Ÿ∏˙.‹‡S¬˛/¬».ƒπÍœ1';ú
gá∞‡ß«ç∞≠%wéF0$!P©◊Ÿäa∏Iµy∑§IªÎO ıHÈºÌó…(Dﬂ≈zí
?™kŒ·±vyH_ÓÎ·„Áöû@F´íÓIg
hÁ€$øD∞5E7£*BÉn¨tÖ|ºPõ≥( yovyCëyJcëìUòÊπ5‰êã3Xåpt™¿å2Â&√º°Ä„t0[ÁÈÍµÅ4≈É√k‚ê[p>xœK„≤µyÖXqËΩH¯™‰@h°}Ëìõ8ÿ'‡£O¥ÙW—_¯∫ÎxªÜæ.á∏Cf≥˘õ61÷Do™dÆbZªjº·~è&Xîqsî3\ÍêøÔA?Çà√gäF¢è´º,7k&ae—ª¬YZ&÷‘nöM“∆ÈbA$}A1%-ØˇmÅ4C·`Ü#Ãyî1Çπ6¢éZ1l»ª˙98=úkÄ‹ÔâÎ:g	ê`í9‡Ö8]ûFVÊÿ¡áäÿ¢˝aY˙rr®Y®»uÊVL·*)´X]Ìﬁî)å[æΩ–ìÔ2ùk°&7≈¨1}T∆MÍ!Õì∞i«âeäRÊñ#ù9Õ,öüó—C@u¢∫YùT …!ºRT≥|∞$'J¥ÕJ„i$öîú–‘›∏Øà6«%ú·Ê@®Ù∏Ÿm¯Nà†ƒ¸tC¬Ö≠8ö€5……I\–ç∆≠ap_i
≥.P2¡í÷Îπz£rHπºáÑÚô\≤ååoz#πÓj÷Ör$ª-7m˙	ùƒ6dÄ®)M§§À"ÄëoêzÊC>k≠¥AZ'ºÖ+ô…D4aí √·˛Ÿ‹Ï/£n3⁄Mÿ∞˝U	Õ(ÿ6©&É1ÆÊP	ä≥^;“⁄≈ì√…\íäFÜêÑ“CπÌ¨£KMÕ† ùIgD>^‰Bb% dß<ﬁ:{oGÆè_ÇÜ˛ˇ>·ﬁlµë}{“9Œ¢m◊Ñ´·Jòéìq™ÑU!ó¿yã¸∆V≥¥uiËbt∆H–°ûœe¨"à‰yßù# ÕEJhÕ%íë§¡1^F—˜Æ;Û´∑E¥„™†ú0\ÇÅkﬁ¿Åb‚åe•`›TQêîÇY~„ˆ8Xõe3·≤Ô™¸#Òòﬁ  Ã$€b∂u≤Û√!Øπﬁ7ã¡‹Ù˙©tÆ¬?¢ua„Â˝S#öÕuÀ ôKw\Îö¶ûˇ≠?jUgY–Û‚r≥qƒ·3
uojDLGÌ∑?£Aî»)| ª/A◊‘CÅ3$<Ahπ÷b≥âÀE◊˛@˛á$`Å≤ÿˇ®É†/éD“vµê™≈Ôø, c©ï"ää÷Å¥’îôD˙ã§º£Í¥Zµ_«ê,úeÚQÚπK{œ#ﬁôÎ– lp¿r>Z	>¶'ÇÕ?*\É1ÚD& Í˙‘sÀNÃæZ¸◊!M Ã¯:√î){◊‘’Ä4j|¯‡≠—&]Ô¸˛e˜’Ô˜/Ì√ŒÆó∞µO;DKwRl1¡oB„úˇ±¶.H¿s¯”uPn44@Pü√c”‘å?êÒ‰pn©ÏOÇÚ§\æQˇO«yÖzâ,ôd?ó=J©ªéØ4ûÛ®„∑Aº0¨KcúAA9›f#Pí’êu>˜=Í¬Ò?	@âñŸ∏¥˜9H'∫7®;hÔK0§8Çî¨€.À`A≤å *BO¬,@2…Ù≤I:Ñ6‹ #â‘ æ&ù„¯Èº◊íÆ7+¿T¡Á	Mˇˆ)M'Ä;9¶í€‡ÇKK%‹%_Jr&ÎÇ˘ëÏ£fºI…K@ ÷$õ¢ªUY<A:	*CíËÅÑ±rBÙù\Xbª|À3Y∏â[@ÃMÍ≈∆#eKæoüI˘éÁÎ‚f—_ï¨iÇ¥ﬂ™x;_¿s€¬≈‘ﬂv∫∏¶∞sx
!„¥úìä√–€zÍ≥8îíì°ñµ˘%ÙóΩ`Ôèx4$°)X3HeﬂtŒ˛‹È⁄õRä6tt≤”9…æ˘>€˙Ê¥Öª	˛“Âm«ßg[«≠–µ“_íP!kÔÔÏùe·$üÒœ¨Q˙KˇU4{è™‡Ä…6ppWfı˛\haqr’µ¥Z√´J¡)ÏN˘∞,{,l◊uºVÇÈç™TW€å»6*[ì´ÉÖ˘ó–rSÍTSûÅ}M‰tdöç@”'fí!†Ê–#"Ì{‡⁄ÕEk‰Ã0&¿˘£åFr5#ô°⁄)/ÿ8s≈¢jﬁs$£ #Ôhcñÿÿ\n]¿3¿F√»∞aV\ˆ∆Ìl/áRLY;ﬂ‡Ï˝ÜÊˆ≈;ÌTQä	‰„>y}∑∑”9˙ÈV–w‹XôÒÆ 'ª»f[]⁄*„“
ä™<∫Ç¢≤O^ARÁ©+H
/YA	1TSfêf?Q(>Ç0;]˜&√~Ìí+ˆ†3^NÆ«pé0a4ìVcq)†‹Ò‹Am!Ò”ÎµŸ—n∂˚Ê?ˇÛ{πã;;ÿ:€~ÕüÜ–jaÒë(dÉ~uz~“Ò∂»—7Äâ:Œ˝«≥2*¬«≤√ﬂi≤Ü±P©¬[ÓA∏Œ`|˝0ví≈`Ω™´MÙD{D[Õw.ü∑4önÛ∆5¨ÏiˆI ’≈°÷úá,©‘;ah£+ÅMs0•.∞l.\ß√Eh¬5>èZ-~–®ru≠¨ê√Œ«Ï¶ÀÆÆâöZ…j!u}∫Ê"+≥u@m¨X\¬“^Ëexì˙’Ú4ÁçÅeüÜ¢äyõ¿>i†π|@VS˜]È]‹gf˜s_˝Q#X#ˆY"y‹	∏¿∫î.*—,¢K4Ô"îaYk"áã˚ï»IÖc∏4§ùmkHòì1¸í|∂fËœN’
ÔêR± ïv~F[™G§≤»«)Â‰wµ‡,G‰jˆR.ä€‚]J¢uK$æÛSj¢T\'∑î~‚zl?∂ÀÉå±]~'ÿ^:àÁ.JS®Ù∞Ï7¯éıëÅî2∞mL¶»˛åòP»Cd.„I,bé;M›‚ÂvÄ€…Û˛ÚÈ≈
©%âÏﬂ7’È+~„áß9Ï
+ßpû˙DK.áÜSX.ﬁ‚‹¶6¡ÒßÉøÇ‰œá?4eá'OÅø\z9¸ıÚÄçÆD∆ﬁXÊÊ[¿]π)|=›˙\%n`éπW›“öiı∑õŸ´îô◊ègŸ8ñ@O£_+·L€ÿ ˝„ﬁl÷√eg—ÌHY&h–Œb!¶Mˆ∞<5>ÒÏ`3SÖ¯h`µU+j∞jgµâài∫^;/sı¥c∑*YFJ]mç≥E˘Êò…%‘«vËHpÏπi '¨Ôø˙ÈôJ%~ìc≈JQÌ¥∫òù÷jqú“ŒÛlOÇŸ!ú–µ>¬fKH5“%¨HvFÁÙFÛÂï:˙<Å&ÀãiYì°‹ÚE+√r”‡ú+ªTq√Ω8ÿËKN.∏IÙ=Jﬁ=iu‹´‹°Ü~u8–œ‡CäêkQjV'˝⁄Ö"AÇ≤€µ≈·&GõåW±Æ±9‚\ƒHD¡púBÜwÚ–eÄ“§Í€T¶õ«º0ºx‰&@UÆ%‹©tm6º–Ω˜◊@≤ãqüë[«{PŒá√Bk˝bN¿Ï;íò}#€wπEÉY xã^€Q◊>Ei&:%%6Àæ≤ÑŒL·ÊFÆqﬁ}hÛ TàædQ‰‰|¬ΩÑ:)nA•S¢ öÖK)mLrÆú=©öπ“çtP÷[=Ö:ã¸ÛÏƒEQKJ+'B§[sÃ°|>AÔ:áèk chÔVn¶‘≥
•÷‘¸aáÛ ì3˙õÀÂåp-£ÒH¢æ‰ÌHg´◊÷Ÿ◊<ú‰oqÈ¿*8ä“.§˜jy®.Ó:xô…;Äqøzíàÿx""‰ﬁLò‘¶ΩêAUj9Î)êA”îï•QØ@∂∞ôXDr;£´ß(s∑…aƒN2∏Û¶æ≈˘¡[ÏA'ÅÃ§!íˆk$96·¨&ÌàÈ‹ó™±ü‘Ô˘HDœıP\¬[ªŒºä ªÉÕl™DÒï÷5îÌ.◊ƒŸ"ÿ]Úù¡Æˇ€ñ©œéND#ZÇ¨˚T*:é¶â˜˛Iƒ€å_uçì3üM◊7¬qB:hkp	s$¬P‹’NI˜¬Â* ~K<'Nƒ◊ˆgÛºëw4ˇïñYU™QWCûè¶Bˇ0˜tπVOBZyrUYô¿eOºYƒß/[åﬂA€◊7Øztëå˜ºôº≠9˙.B1¡≤.P;$N≤Q€gÛëá(A67ÃÙ∏i¬ˇî3O3{è—…|ﬁLÜ¶b4XáÕ@rì≈ñ"ΩC–˙
7∞-Çã~ı<ûD˝ˆfÿ·∫ ∂Ó‡Qú∆8säªz#∫¡3gÎêüÿpp	÷nÃÀ (’êæÔ8©*SX]¢“±°ÍA_¶¨–zK)ºiÚˆºiòÂun–˘⁄´p≥ñ5¿œ—Ÿäö¯‚ìõêÈèZ¯2¥Pe<œ≥/ƒi¿…Ï~
q6‹∆ãËv†ÄAŒÔﬂpˇL∞ny{s,Y%ÑÔÆ◊HKàz=‰Ör8¯qrr	èîØ§üYPMd˜P^
∂Jˆ8«ÇB€Y+1T*ÈBÂ—/àçıåa¢éÎ»ôXÂ`Tœ“µX:˜~OIG¢ˆ@∑•§ï–Òf	GZ/.R¢G6©&£⁄öˆ∫TÀQ"àØL£”U‹öò¬JrA%W@Åí<I…„9Xõ^ﬂê<~èÅµºèPrπa%Ô 4¬,eÙ1Zı3≈µìàc|¿ø≤Ñ–H/Ø—BN-üvNŒÙ≤€∆Z:`0È©p∆ƒÛ[ÒuŒ¡L›áR·ƒeQ/ÆsDaßÉ≤.”3–ñB¢¸Y_1p;oé˜˜∂Êû˝±Û}¶°8	:¨~⁄ÄIÌVGJ¬àÈ-àüFèƒ≠Úª£◊*°Eõ`˜T~2 €Oß◊4oÿpŸ¥ãºÆEˇ®ä7˛˚>{R•ªíp(ı°úŸ–‰˘ìóÎì6≥|I¶V{Aﬁ_˜πÂ)^â' Âñoﬁ≈ì‰Ì⁄÷gökÜ=<¡Æ¬b¢Ö≥∏™rÄZ ÏU„ì/ãyOS§Ì‹Sta\
ïÓG.åﬁÔÇ êfÒº›8W'É¬>ú#ÃPÃ*‚¢±eoß2î2{(q®D[´@8J™!â‘+¢7˛√£•”}≈äÿTÇ¸µXç ¿≤’›€Zpse&πe∑OÎÑ¿˘A◊Xy^û|u‡«œ≥/€ônVR`[Ë¡ˆ\un‚ºN∆D◊õñg•ƒ¥cf]n‹ÿCƒîÉ”≈ì€™”S°„˛πÑ0îód-ﬁ¨í˛üñ{*VJ	,L?ëÛ∆`Ü&T«.¡Æê¡óM[©PRˇ6FíaäóÒrm®.≠ïà‘’hb\O∞˜sY∆TJ™6c»õ©‘/“gdRñYé√çﬂ£≠#*≥ rÅh–¥7<{FÊ‹B“,G∞ûHl"≥èàawc√wú„“h⁄9rÑFõô™6]œfl:Œg ñ^W7≤ë,‰Ù’°… ¥˘©°jè˘DFX®Eﬁ6åpvåQµ∏µZ!/4–Ÿ”ƒ¥*Së
AëπÓì¨y`≈ãŸ∏Ã	ÍÆ\q)¢0ÓA∂Êâ~∆“ºòW∏PjÜªN.¢Ù ‚ï© °å¶Dr}∞πH}7]X%B≥¸ß≈ ∏á'Ä	/kÍﬂ·u∞w∏Öÿ∫ÓNgÎ˚Óignê”Äíbà´çDñîKzåß¥˚'£›»NŸ	'_Ë?tπ—˛‚Í∞∫˙l&x≈°îA≠«6¡è¥“
m9q
jî[PxGvgro¢ü¡Üûë»•hì£fÙ∆©}‹RàP®¯
ÜÖ.">%πRê@F0ìˆ•mµ%‹@3ƒ¬K!É%}∂∂uç¢h3`ˇƒ˘.‚9ı.-óA5—JGÅJa)
Æ1h3_&I|∞g©ıö[≥ ∏`¿JÓæ9Ÿ«ô.¡Ë¶~ ∂éc”}¬PBE, Œ]á˝Âö-—7\N±Ù¡ ¿ºi≥&≥ˆY^◊ÓgÃF—∆Ÿ≈à›UµX8\rËÒ∏ÿˆıŸŸ±rf‚‰Æ´à≥l_}¸» †Ø?~‡ìN+%Á«¢sêæ,=)Jû&¸KEËY>EVö∞0O÷KŸﬁåÕ!¥ônme?≠€	X‹√V™Aça ß	è'º.@µJÊÛ“Ü≈NñÙÔMXn3ıî•øëﬁæhü)µ‰†2/ÜIËRh°œ˚»ÀäYÇ√¿S pÀ∂≥ƒ=[ÇGÈê<≤º*[πÏ=bœë)q(yÇ+∫ ÔÜ¯ó˘ƒÉt@Å¢c¸$ŸD4Q7i…{h^N^ÇŒ√O,D§/‚„2‹m
&ÁÂ±™å ∫Ò"à2z.êÈd∫ ; E´9V’DûÀŸÖc]]∑˙C=&ø§˜–7Âl_nÄÁÎº‡.DÈFÉGár¥äl‡#*n>‡£ì‚<ô[$$î≈x ÇòX`"m`Ï)⁄‘™|¨!åD‚w.ÜëáŸh‹‘êËúÇ®ày˜\§Ø7YòEoqpœj”{´Ç§ 7Œe#dè9«Óå"ÿ\¢≤Ü‹aP8æ∏D¢ ˜Œ(÷6‹†‡UÔ€à0˝ÎÿrËÕ©€4wK}â"(∫ÛâóW¶ÙÉ”{wˆNœˆ∑œ≤i=9‘·ª˘x•EäLÍ^SÏM˝”˝ŒÓYˆ?èˆKÄd◊óî•–(¶Ù˙“w!á¢^‹€Jß™ÜG≠ÏùJ ˛·õ˝˝JÂwq|á:ˇ*Ä… 8•ña€»√ÿñ’˜…ÿ~ÔQÅ–À∞Ì˙ˇTláFk∞ıÚ0∂£V ç€(ø{∂uô™# ·L¨]∆öHm%”¿ÍlõÚ
Ω∑Ù`DÓ[¯,Z—yQíÙ2`⁄J[8ìéÀ]mM0Õ¨>0mæÖrÏg¶‰¢¯˚ …°∫≠Ùì6Ke≠‘A‚çã¯Uâ7Â-‹·!VπŸΩn•Ç≠G¥t»†€√	›Ç2wv"õ¶=¬É70:)πFóMgEn“=
qr„˛f›8¢F±=!G6)?Œ™‹§]«ªﬁUCÉ"$Dx0»≥Q”#6
∑È∞#«óú0ëI<j•í"sïÕé/©óu„éßˆ[F$ÒëÍ±Y(Ï,ÓìÃ ~I»¨ƒ˛¿0$âdçÛˇDàAf@r®$ﬁ^<ÃÂ{◊ˆ4ürM˚∑œ!o~ê==ëŸ0#ëdWf}Jè•(µ~¯Y€»ÛlÕ∏≥µ%¢n¸ô<€√‚ÊÌªYK+Èye0–ﬂ4ŒêˆQ^‡L÷à}z˚8-£±P*k=-^©∂:Fèç≤v¥Ÿ!.~÷∂·©õgmâü ü¬‡ªÜO˝ıŸ¯| TéÚÔåOïƒÕKÄ 1>Àú?.Îò•e/ ŸCVM	ÎM∞)¡GF ˜©Ø÷rUi∑7Æø†ºo˚ì‘‡.¥`\"ˆ ⁄ïÔô{[dknáÙe#6†x`7èÏ´â‡qˇö)Ù™@ª.À*¡XﬁÅ´Ë®†!v	â¶o©ı„∑qÀzä7Ω§gç Æh±2y∫DdW{û!)v÷íî;ﬁCá”∞H,çË5Ï∏} e—b|9ß›cÖÂü=”tüŒˆ%Nå'ÊÓÀàjÈ`iÉY€Fov-ﬂ€∞à/hK?ñ7-n}»Ã≈Ü}BëÑ· çpÚWê9≈T€¶PÿEÎ“h´±∂Ü9Ω\É_ñÏ>õv∂=ˇ8Ecàáôµˇ◊z{t€æ_5pyﬂ‰√)ÄÍ¡J €Nûiäe÷£"ån‹uebP@x≠ˆ∏ë˘ÊWÜÊbé<ñVü`¨5:µOÖËTkâ`ÅpáB…pR"M[<:H8]ÜÍæÊ%é:√PÀµ¶i“$√€†¿∞0
|E¶ô6ôû.ËƒŒXBÜ§§∏”£5∫dﬁ‹9Ï5âΩ_c˙K¥∆¿àMÖŸDJÃ«Ûç§ÉgÇ
uqRJï–tU')´ˆ^
å”»Ùõ∂¬!∑≥ìùΩÜ~µøwÿëñ”‰≤ó.>iæsµ["'^1zƒ‘Ü.Døú¥ëì˝ØYÒn0ÆyŒ\y7OõÛlÉ¨riÎÑV{§|pÌ¶‡A6‰œ∂Ã[êÀcÅ&∏õ—∞≈ﬂlW“®≈”}§±ì_,ÆmÓLLÇË(TZ6Ω¿ë¨-:#Âê∫ü0WY‚[5~cIÇ.9#Ëò3d5kÉIh.ê+AŸmãÖ$…`IÈf¥33‘qEäÏT»¡«›¡|ñÛÆû~ôX±ìéˆL
ªv˚⁄0ª=e˙6°S.fó˛éì(ƒ¶sjŸ>ë©@ÅêÒ—ﬁwó#f_#⁄Ò]í}ÄèKπ§é”ŒY$OÀ0√3™BlHÍòêì#>à∫)Ì3ÍÔ÷*q¡X§ÉhöÀ÷«WYG3‘≤5cÏ∫ïÇ’B¨êlLû—~fÀ@–˘æ¢≥»«ØèŒé∫;{'¿s≠ö?é	 ˛ °CCÿ$$7´o†döpDó±'€¨‹"b√W}(Î™R‰}M
·ˆ	≥*)ê°/œ:Ë;,¡*(j¬.-ËãöØÌH‡€ìê≈ö*Oíã5WÛ
÷M†&∞¯Ë(!Â	Ë´>>Å¢`¸Ë	Ùñ`%J9ıDÈèõ@Ì··å:?¡Œ'»‚ÿı˘J}v`FmóÈb…∂cç	Æ¯ú¿Œd¯7lgŒûS€]5_™ÙÏ7ì∂eIjMO\œ:;¶ÕG*x™Ñ1JR·<Ü1GSÓË›©€u≥ªOÅO6Ÿa"6ÀpÕE¥Ÿ∞CqZib>b{≥∂3)m≥E2ºJ£B`èöo68ÿÜdºö^Ù¢ÀEÿóüO(òâPÂ&éù
c“yﬂŸÜXW™°rvVágc°ÆüV·°n/ƒÔﬁzY~ u≠¶P«≥◊p∆G'ÜO{#5`=$…5ÀW∆ıπ?»ø„.kdt∞D‚±a‘y‹«]ô°â∫çé√Q–h±eëÌÚœm2[?vOp∏”tLR®Lßdd”Ω¨ÛßÚ3Î\¯ÙÚŒ„˘	¸«UÊÚâ•c≥ëÓ’I;˛\{\9j≥öÅJRÅLÛÀ¡B√Ù8&§u2´Ω[Ñ°-∆ààúÂ◊ΩYr'üó2©È‡qbØ/K˙Âk#q6»∂ÜΩÎGn)“©oÓ@4ï/∑)•'7È$X˙Î2^v*6 †VmH….ÓÁg ƒÆ¿Ïv≥M¯Iª]∫›Ü.aµ4‡ê¸36XÓˇ.⁄Î»«›]‡J—ûﬁJ.5hàﬁÅA>s?ëŒ}√ÛLN∏ íΩê	¡`ÒëóVêa~}h1Ìr8h±≈ô†¿±7%¥˜û!I˚(
ÎÉ/O“2ÂJ &Ñ—êb‡i (Ûö_1j©’xÒ˝⁄ã—⁄ãæ„DË∂Ö&y•ˆèùŸdz1˘∏æ3π”I±ËäuWuFHxÜI©-ÒP>d„Ó‰]taﬂqµF›àÄÁÎ 7ù˜æÀ  «=ˆ5∫í¡ayo‘’3ëÔDΩ<ïØa¥kò ¶«ñ≠¢CZ˙ﬁrÂ¥ZtW¬„êMÿÎ≤·IÛíäCÕï…Dö∏Ïr„EÔ:_)öÊ\Uy∏0Ä7
n\·A`À`Üó†ˆ
Xa@u
Ë„Ä≥ë|F´ô¡ôb'QX£R1XIpâ)“À¬\ª…|ÎÓ¢“—ﬁtπêòtÅëƒ*t?≈¨.haÕZiõ÷”v}‰˚haøÏúúù¿‡Íc∞êX"qnæÔr]“ê$°A∞»æ∂ŸPs¡∫Ë’rñ´ê‡8€GX»O¨µ§	√f*:ïRª¡KÄa`bÓ´èX•mÙAªa6„Ã:2’ïÔ"hêWò◊¶iOÏÕAqáêKöe2Ê=,¬¯ËîQ¨Eãó$D∏(Ω~
Fÿ¬œèä‡#p®PHam÷Å<0˙ÍÓÄ®÷ÊÿÍÇõLqëƒa∫ÿBjˆë%D"•yº∑±«$tEc#;o¥ò“ÓÃœ\øL«˙y=∏í£©|‚Z}Ä/Ú‡C~°onÚ¡•<ôı>»ÁÂÏ˘ÁZr2”œ¬=ÔÕ¥\ﬂu5˚†Âß(/'îÍ∆RG”Ø§µ—‰Ω|ˆﬁÙ˜;˝}5‘œ#˜ô_å¥Äi‰∆¯Âµ<˙JKéÊ<Ãﬂhèæp_‹«˚…Ö<Ôﬁî/!å9»∂˝¡ƒ ˚Rﬁˆz:¸=»= €íF=˘}•ü=CeÓd◊Æﬂ”¥Ìi_Q÷üh€¯t†Êè√BLßsiü˙ Ñ!fs`ÛVR-—Í6R∑tù¯Y∏{ˆøC∆ƒ˝	ê ü(`"84VÒfg¿TÙìŸ≠EÒQù¬C€bq‹√eŸQ){¡â†ÔÖ Oi>«kò„&C»AÙ1Ëkvmo)•ŸÛ¥¡vÌ3∫*º:~'ø›ÀÁ`Ïª{'cﬁe≤3—≥D∏ ⁄ﬂ\ﬂÃrl≈|]Ì ≈ﬁéºƒ7ƒƒ/N!.˚Wº¯ﬁ^nfó√¸Ëj6aÏ¿¯96yÿù\!–…;P∑Üd«bv;¥µuz≥¿·¯˙ ˚|_ËÔ.˙√k {èeîvS¥Ω€;=b=\zoOv"~√grÎ=O¬ﬁ◊SnÑôÎ∏
’}7âV•UﬁêÍ=<Ndu)M∫_®‹üa∫”˙›ã[üŸπ%W¨éë~á<EÓ…ÃÕmÜ,úL+VnlÛçcâ7lPQÖEB∑7Tå2c=ByÏxe¡"úDÇÔ§Ÿ˚JBf…"UıJ €Òü,ÇŸj^9#¡«>`#±Õ–≈o:√xÆx	#»ﬂ`ı,Ûà€@µ:2`„?éÿ5'#î mŸ^’·pVeË≈∞èÛ^∞(±Â∂ü€z ÷(zÓ≥”ŒôË.Ωµd≠—H	ÔAJñ:îw‰_ŸÈüˆÅbAŸΩ£†ò‚ò fÎ.◊=±€àÔÕ´òàT	ë4ŸdƒçípauoQ8´õûº@´@è˜i
I6ÃÃf
Øúû ¢Az6Y‘ù˜P©VL2À˚7•fÒã‹èd≠≈∫IU◊HWM!ub£jØ∆ÜÉS^ÈºVÄ˚ •Qµe"ø‚bÜY∞B{œÈ_ù›vaVÿû∂à–’¥ò>ı\Ä5¿ÿ8Æ·/\QºÎ:G±
iùî4H°4.^ÌÜˆ5◊a0—Èë∑≠K}T”%•^,PF’ ö¯tJvGá6\
5£ì|ÂTÔ(˛wQ˜Â€Û"!õ]ÇónÊ‡òñ;l¢¶K0±ôÿ÷˛bvix`+Ÿ∫‘T˚Î„éﬂ…ÏXôJ!∏ÎÆQÆ±sÚ}˜‰Õ!v$b–É∏¢êâæRœpÁR«±ù˚3Gc¿ﬁÏÚ>[˚w˚)Ê¢éXˆÈ¶…u¶€ﬁÛì˚Ï`ÿæúLoøh°EiQ: l≈Ö-«[ﬂ"ã'L»Í«ü \•~ˆ¯M\ƒæóp"ãÒ*JH‹O∞Íâã≈X}~>¬q‚¢ˆ›∫56‘D<@˚7Êc-ÿßò[”µ^è9Î“Õ∏'ó?KËñÎ÷ÜZ'&óx\Iñy=Œ	: √˚g∆Á@ ±`øi±´öÒŒliÔƒ^'≤Ro|í…œ^9,mbY4õò}‡ÕîûRÑR“¥eØB»0q6_êÆºÑ›Ÿü`~3¡¡+Îƒ?'“OÉ“d»òÂZO–VT'Éi…Zß¥(\å—â4Ãª>Î´∞´5]n—⁄D¸“°A¡Û‘Æ ,⁄√~ÒvöÒ8Ê⁄Åı©%IWv¶nw´JÀ{úF¡¢	‹Mopav∂é¡± ®Eãø7‰Ô1+-WZNÉöÃ∫ä§ªh…{jÀ:eÕï›z≥≥'∑)‘ñU%÷›9⁄~sÄ≥Æº{°∂tPM]çgŒ1Œ≥Ùç≥fπIπöO&CôXXù%ä$ÍÂtªpÒL£‘†ªˆ˛%WíJörJ+zŸ˙d!!Cÿ”‰‚SçfÜKy†{‰ìj'å‘Àÿ—≠ì'¨RŒÙ¶Tèú≈EL»>p>⁄}ïö»≤Le®Ò∂¥¢•]ô-ò7”7+è•˜a&É´3 Ã∑ÖY≥1Wv≤æΩí&·ÃÆ∑ ?¯æby–£˚!˚£∆i£≥µ#
ò.™ ÎRc4≥Airq¨™ï$9'`∏Ì÷*_B¸üVÜæGÖ'lëã=⁄Àkv0báZ<N‰Ó‹≠.˙&j‰=Á'†™·bÑ∞;Ω√„7HÍ›b´CóWÙÍ∂k≈}¢lúÁEêgÀQ`Bm÷‚äM~[˙Z*)‰πDì≤ëŒ·„˙‹Tú˝‰LÑ/êﬂ’”06 ÉYZ“<TDﬁ&#˜2∫£éÔ∂≈yjÉ%âÆ*J¨N^Œm ¯yµv[w8>Æƒ0≈ãf&Â—Ó6]k÷l˝«ø˝èˇs•ıõÁ[kˇ˘vÖIÙ∫¯≠Øò#U±Fl`|I3êù\Jäu6‰üçÇHî0Cñ°†⁄ssel=j;àP:}VD~Å∑±GüÆëá»SHí™¨üip4ô¬p<(π:`	πbË^{åó≈–≈jK&wá†∏«C®¬B˘¯I¬r∞π€⁄DME!\⁄|º√‹_â‚G%˚.Ù`∂çD√Nëaã€·£¥,°tªƒb`_™{ªaï
~'Ö¥u/zøQ€U≠óË‹ OFï†U’i[mö‘ûlúÂáU~Ω¸KèÙ|VLA}#—èÎ˙r‡ÀMºD´£óà.aÙUâ€!*¡/û≤uıΩ–qäë¡ˆ∆ïÉ=™›≥t™¬iM%tq¶„ Îê÷@ƒnJ§`qH ÜÖc∂Õ¶	«5ìIKÇ€ÿ_	«+ÁØﬁz^Bºÿå’∞N¬Ä¬2∂R∑\©ﬁ!]Ùºó≈SR≤ cD»≥$cA<ºÅp◊Á}åóê
ÈsOµ(]aä~mÜ˘1i·D ˚:? ﬂÕ*öÄd@≥d.ë≥ùÄπ_‡®§˝‘éπGoöA≥flØ≤,•)‡ﬂµÇogà¨◊Ú—¸¸j*
97Õp"Cëáxáß‹Ø¬ÉÙè”QúäPJ&BÎ⁄ã˙S.ÓÔx∆yÃﬁfgH¬*0	QkûÈb·1BÓ"SløõÄ'2∏o""M˘˛R$á∫íp	Ô_ÈCß~»;<uóhh€¢O•“˙†ˇ1í{ÖHq˘JŒdNÒW≥W—rÚ∂ë´FiúÁwh~=·€∞;ß82€àe⁄áN‰(TÑ{±∑ÿ\ãM;ê≥ßÄEy‰¥ÿéo<‡¡]8(aØı‹Nèlö∞Lqa%'R≠i†$k/]‘W8¯À÷ª}≤åzMµuc∞≠8É o˙ÒêπÆ–{‘f⁄ﬂÁ1åL§’JÇb6^å6^Ù≥Ø7^lº8ç∏>õ„üõ/çí¬~.i¿¨9oÉIÛ}7ÉÆ˘6f¨⁄`©…ÜÈTï6›AfÄ√1iÈ7Ÿ"∂„	/Û¡{œÖn¸"$êî‘tê¢dÇ‰Ω0Û{™ëüâö4?áuäHe^≠Ì¥GB/]ìMª¿#@uﬁ◊±'Ç¶$/‘o1ﬂ®Î∆Ê7j¨⁄P∫∫Kv0∑◊x UsÚh*ìä1¡ﬂÇµÖh7%]≈ç_ˇò1r‰xí;‚ê)bmìw’&πí„&“*B¬é+∂ù0ÈŒ÷É1ñΩÑ^ıåò≠Æs|Rz]Å€À¯˘ƒ˛b;ò˜Ê‰PSÕ'°B!ß"mc1“‰çDQ‹tEÓÌ®∆¬–Ùp'uÊS—ß`‘`/Ü>≈û$U·ÌIÎ©ƒMLŸÚÜm˝|Í–.å*¸.ãàtd®˚Ù˘˚;œ[2_2Æîóî§å”,p≥€9^ÇX•ÕDﬁ∞lÈ|n√6Î˙ÿºs_»1ôÕ;˜Ö•LŒB9˚*€ÂejTé/—ëºs ûŒDhÜ∏‹Ö¢´va[æÚ˘t	ŸÛ8_ˆ∆ÈqŒ7ÂD,-|‚Nı…C¢S,JT#w∞X6U°4D6ªΩª[ó›P›üÍÒBg<3–<n 1vçr∂'ÎÜ2€ÅkpÁa(tü`<Sπ)ˇBéwjÜ˚\ﬁLòºÕ¸î≥˝˘áµﬂå%N=;‡>ê®˚∆I,Í¿®ÕF‰W>a»UÕ…aáD9^©(Â>ß"ƒ”œË¯^ÉÒ˙3j∫π¯åö2©’É˚ãñOáZ˘HŒÓÍ2@	,«(,Ω°SÓ¸in~§3eõj˙ß1SÈBê5ijâ+h?ÎäR†$qÜ›“-K@S{hX:H,D—
h¶„DqÒ©}œ3“•àä:`^åõ 4sËJâXñ≠e|¶±/_]±¨èêg ¡<XÎﬁuî<}=Â›˙WgÉwgìwπh ó>É≥Í0åYƒ≥¯π√ú0‡h^ úo3≈~*£UêÆ´¯)HwQdå6E∫+ø‰F¡fp>–ÍØáèò$ÉìπUZ‡êΩª˙5«3‘÷$(úÓWHªs9+áïÒô«kº∑æãªœÛn◊bï™Ò±¶UAa.+hŒÌäøﬁ\‘ÊË67∏˝6W∂û√È¸eo˜ÏËhøªª◊Ÿﬂ°ı\~c∆ù3¨…£Ÿ áIz‹bì~!¨upuÀr>*ÚFPÌYC6∑öG’∫à}π|óñîGq…L£'œ‡∆‚.ë ’Ésøàµ_e§Œ2Â∏™⁄÷U#ƒÂaR≈œtO◊(Û L∆©ÕI7€‹ƒo≥ﬂ¬ºÿXÉ)[©TO†ıÍQ	ÈZòˆ) ÁµnÂÌ£ÉÉ≠√@QÎNñ)„Û\Êg∏hìÌ·gÒ0ó–y{åı∞@NŒ4.¶≠ïÛçØ_æLå?û–∫è1<…c=Ê9§!¬∞i˛º{á–IÃ”jàK™·˝vŸ{ôÇw˚8q_ÊÈTúo•QÜN¨ùÇ4““>å+öà6„zÅƒVÙ–‘ßÃµ1!ô•#Ò€2ULE˝#∆°EeR
l
”ÆX[mé= P\§‹Ñ[(õ÷gY 'Ûj|U¬÷Óbü“mGﬂt+πÕÔ˙â3ÖMÿüëπ‡Äf…~»4aÖ™6%{SÇ‰$ˇZ»Cê`®eõR}Î•ñw≈„«$ˆGuüF¥Âœ∏Jvix´ÎÔ vM/É ¬¸‰¢,M ¸ä⁄‘πJ8 ÊêÜR‰8q™± y!OhµZçó¯#„~ı/øóOÍwçï»¨O\;0¯ŒöÜ$®7ˆ¶Àõ÷¨Ò◊˛›W˜Á]{ão_Dﬂ2˘Ω˝ã>†@| XöMÈéˆ,Ê'ﬂ‘óÌk\ª8m!”ê_¸¡˛˘"¥¡mÑIVÑÃY y◊$jŸ)–≤¡[Ââ HÒoŸíÍ-À-õ∫ã>—ÈÕ’Ê∏yËR[‘Å√”n⁄ÍÒ◊ÒsQ¢Vµ»{÷e√aYìÒ"p#±W™îZå√\ÑÓ€p≤…MGîx%◊Î…˛ƒ£»«÷Qµ4[B.+¸¯‚ﬁ>Œª†ûˇHüπ_Õ∞ﬁtËUrI»ü 7(¬A$˝; yµrøñ<¯¢¸‡Kxøì_≠‹o$æ.?¯ˆ ?ÏŸ„#:ÇÏÈè.”•§«⁄¸+Õ¡1≈¡òÀÚÓaCÊ÷:4îk#~Ò⁄k‰#sª’πñ„©5KX≈≥gˇŒ…˝
--- Content of ./.git/objects/3f/f868f40d574afebd01717eb1002ec97dc2ce9b ---
xÖëÕj√0Ñ{≠ü¬¯‹k†‰VlÜ§Åzä¥äEe+ËÁêÜº{we…‰÷Ä…Œ~´Ÿ±|6ˆ\Ôﬁw/˜™Æõo-¡˙f_ﬂ´◊¶◊>˘(Ö5[Hº!È¥¨ªm»X¡É∂‚MÎÄË°âˇ,ÿ¯0Ûå˙7aﬁö¯|úVÍi*€—É&qúÕ$≤Ã3K:√.∫5Ö)ufΩC≥ØúTë`8º˘¶+˘gÊ†/S8B G)6'ôw`ÒCó VLÀíö¿x±!O"üjµN™µãäûnó^=5ôULlÌ<ˇaÇQ¶‚•Œlúb¿|∏$Ÿ¯U3‹áçbp¢[JùŸ0ûËúˆ∂L˜Ü˚âz*¯·’£™˛ ˆLÆ©
--- Content of ./.git/objects/df/6d9fc905c96f653f7eda20a05971c6674ab130 ---
x≠Z{l«ôﬂ%w…%π|IîDŸí≤zŸíbI~‘v,;JÙ∂bI±%?"EéLqWe>î]2∂xÀT(⁄B)T1ä≥í⁄:pµ	Ó‘Cãsmœ…Â·^Ôpª¬Ã.ŒÄ—CÄÀ*“‚ˇuﬂÏÚ-9Á∂7~3;;˚Õ7ﬂÃŒ¸æov:ôfˆÌ}jÔÏ}ª›äAx„%~nÆ√˛]dÇ!ù˘*
ô´ã±xõ–S|ákC–2LpTfCƒ©Ââ†)dû0ky<HMPå3ø\>»∆&,,˘ml¬ ZY”∑Ò	kc)HiH-ê⁄Y|k¶øDıGöqïb}Q.qê∑
ænÍÂ«/¬Uy0‚cßB\‘U|S!ﬂ¬B <+¯âlSfÜº˛_˝
G=±`L4Œg+∞¯{P˛¸ı rD√°O◊ç	BƒíŸ;ô(eâ…¬Áb	R$ìΩÂW∆DBƒg˜‡ﬁŸ˚8µë\[B°Æ&—$8,HÀ+Ê¡bcËxÕg˚‹ãq0GmπF¢ˆ\^4ã¶BéÖ}Ú∂ou´«ˆaq…pŸ8é]¬ql√·á§©«¢é\_õÄ ß2•¨YƒAøîH˝ªN∂à8±XÇzï“z¶Â.·ó0ΩùfÀH¸‡ÜòÒG¬QÓr¥5‰˚f9ñÒ«x!¬3—3√E˝sw9 DQEûÛGx6ÓÎÍÎ9Õ¥0˝£œ3Ò2Ê‹Òæ—>f&‰¶¬æ«<Õ4
ß—lõéÕÃp<«˙ÛGi∑˛_’ πäÕb"vﬁö¿Ex*3√ﬁ0ºnÉôãÛhîÑ5TC€^ï`9¡/†"Üy8÷>	qÌ¸%ø/¥0ÕÉÌΩ|da:rπ˝$ôÂ}!°˝‰bt.nql¿ß”©?Î‚ﬂãÇB∫TÀ∑-,>¥Bo˝ë–BgºuñãNezØ0ô“u–v,Ò˚ÇB'd2’À@*°
»&ÌÏ—„±⁄õt_»|˜±¯Œ~ËäÕ©XÁ ÃÄ⁄:òfãJ≤‹tlV5ÈÉ°öπÀú?ÂTJìHòSmH|`!àÑA1T5∆™•Ô≤ü”KIéÁ#<p3≥”S0Ãa’í$’™w(∫∏¿©¶`dvñ„UR[x7©˘»%ïˆGÇ±PXVA≈9¡∑òL‡iT±Úëj‚k·>™#º`	€4–§'EyñMØ”RŸêL+‘∞Dß\›…í´[èÀd Ó˘˛Kﬂ{)yz˘%Ÿﬁ¢ÿ[61ìeÔ⁄Lä.˘˛»˜FV&è$˜»tªB∑Kt{™ƒ{µ˝Jª\RØî‘/˜§JÀ71‹^ï™ÿπiÅ«¥g5Ú{ƒÂà‰ Ùú´Í≈aê÷M ﬁnHÂù= ŒûÂ°{•◊ç´Ckı≤∑MÒ∂…•ÌJi˚¶}+áG≥.lÓ¡É≈mU¯££À61È…ë¨ z÷èHe=o„z*SΩ
’+QΩ)gÈr4ÛÉVlí¿R°Ùˇ≠=›˚∞ømÔn0~TmÉÏG-≠êˇ∏ÇÜ¸«Dwì˘„&# ?â£¸-øœ⁄Se¸¯hyOÖÒü+H»˚≥Î"∞D˚ù∂¡Æp`	÷&C˛n b∞*äW•¢Z¥Çm≠%‚…¸5”C·z‹ã≠ŒˇjÑ	´;ˆà=£hIòE3k|„Ò◊ô"iëÑıîM@M¢$3Ào¡DsÇM¨˘¢∂Ò¡(⁄”A§¢Ÿ’+⁄cx√ä!‹ñøÉàT!˜§)√'?-Ïs2Øµ\-ñb-¨ı=ë≤;a¬EØk:‰v—{ëÌ;Ü‹jÀ“Ö{WÇZ¡√øÖ>⁄”}<˙µRÁµíi˙ŸNyúû±Î„¨Kì`$pß%¯Ô(Z`”a>ª≥%_'YQØ¨¢ï?ÕuãÓ»pƒ0—öÃ€msÂÖ˝(‰8	∫Nÿt¬.⁄ÿ“8	\h÷É“80Ìàj=9ÈÀ˛DÈ¸øJèﬁ${ZÊåº·ˇ,ê÷ô—[˛¯“ÚŒ(Z¸”°xû'®èal+“c{ÛÌyøÆΩ«ôQQOFõGªöäﬁ4+¸è7˙⁄J„H8Y'[…Ó`w≤U◊àG¨9ŒdI¶Ω¸¥p6±Œ¬˘îpEwÊjh–Q∏Rà.4À
À@´˚ 3Ó q Ãÿêp≠q’⁄ÍVÉV7ˆ	—Ω›ß!G˜´Ó√Î?	πr)¿‡¶c–‹Ω-…<ÁZfôG≠∆lm°‘L¥%˜‹|y&ü;jkç8[W»°Pá`<J¶˙G ‘P»Òë2y∑JÔ˘c»T4ç"±ÌÆG Ê›5Øı]b2∂¬›\‡éÌ`‚Œa∞À 9Œ∏ + R$Tl$^∫BáôL&niÔä”c v£Å8¿˜&3c~˜›+L‹Õ\
DÁöy≈åqåjE¶·T‘wë?ƒ;‚≠_¢ÌÌKÑ‘„Ó∆Ò÷∆Pk#À4ÔhÓhS…ô†OòÎDê@≈˜© °∆ENPâ(„æD{∑›¡‚åÒ>ÑQ„Ó¶Iˆ…Êé<p¡ä˚%öJq[^q‹˛‘lölCıüiP	z‹€Ù‚$;Ÿv˛…ÊI°•i∏[ËOtã›ÕÑ`òÏYP	ﬁ≠N¿˛›qWn/¯xÅc‚ffÜèÑò›çª;m*’ê|¨æ]⁄5†åPæÜØ-ΩÖhÑ_å◊•U
£ê!ﬂLî„ƒ\Sts%ÔBL»@î	™ ≤j¿=!Í˚9Ì–™Qà‡ò›ÃsAü‡=\vq*å\Dn‡ùúè˜œ©F0 Uc UM≥|$∂ ®d»ãàöy~¥Øßk¨O%c0OxΩC`ËsQñõÒ≈ÇQ'¢_tå3ü¿!s¨É è2Õ%*3"ÎPÕi/ èÃö¥Ì†=K˙Éú/¨R`ÕL]‰aîßß¥9©ZmN©§ûX¥d
z∆ >¯úäáTÙéÖT"T5Õ¯êvy*h·ÃòπT76‹Ç>°π¨î¸TG´¶9Ëu	K—é•æ·ZÍˇˆê‰>≤vDôËPàâË»ﬁ⁄ì<,π˜@îâVÖhïà÷˚5çoáﬁ
ΩπŸƒˆíÃÔë©À‘JS √‹ı4lxí/»û6≈”∂lIŸ<í˜Y…Übäˆ‹œ6„…„RŸ8ƒıßÙÙN@OejB°&$jb”–d)Ky™ó˚Ó;+Vèm8wKŒ›˜J´Wπw_êK€î“∂Måpè·øıxø`Íì}7¨7≠wôΩÃ^ôŸØ0˚Ô2L«≠∑ç∑O…ÃÄ¬¨ﬁ´jP™Z◊∑å∑Jn?Kùß‰™Q•jt•Ôçæ˚Ó ’sÓ…›pØöIñΩ9qm‚nuÎFu´\›ÆT∑ﬂ≠>∏Q}PÆ>¨Tñéûë™Q\≈WqÈ≈…Ú=?±·ﬁ-πwﬂÛÓ∏fëÍ˝“x´ÔÁ÷_Xeoè‚ÌY!S•ﬁMÃ‚nΩWS˚n}2ˆæ¯éx„’õØ 5áîöCo¨t≠ººZõ™™NoOæº∂ˇ∆+rUÎ:.WÌC~QUsm0˛ôˇV„OÊ:/Wu)U]+}©ä*–DYÎΩ'Íﬁ=∞F˛˝c˙GéÚáï'øIÄÑ˚RLm≤˚ÜiÕ}√∫JÆí˜*w^ÛJu˚÷sã¸…s?}NÆ|F©|,B`¬4&πÙMzï|Ä:tv√]/πÎQá(©ˆÿ/˝∑>ˇã˘ªù#ù#rÁI•Û‰åûVFßdÔ≈{!›E }0≈4æOøCﬂp‹tº1∏“≥Íπ_]ì™©K’4B‹¥ê5`Å˘+V±„äµ·Ìñ∑Zﬁ‹smœ.ó∑(Â-õ6¨lÁi¨öyóL˙—‡Æùïôr’7î™o¨Ù=xÖti∞ ;0MR¥wπˇı!©rdÌ8à∑∆ıÙŒ>=ïÈÁ˙yâ~¶‚ÚqÙ{Ìx⁄¥î!Éê¬v2À‰Ú‹kŒ◊úõ&å¥ﬁ%<ÑgÂ≈‰ûªu˚7ÍˆØw»uùJ]ßTÁˇ¥Óì›wªG7∫G•±IilZ∫0-w˚ïnøL∞
¡Jõ",ÈÁßí¡ªªmÏ:¥˛WÚÆeWè¥kˆS˛ìKüÛ„oJÁ.HÁf$vFòUfebN!Ê$bÓ~Ê˝|zùì‹OCîâNÖËîàŒîÕµ4$ ê˛—·A˚	““z‚ ˘gÂâ6Ú7m$‰˚˝&∏ù	»˙@+ÍW˚¿UyY3a{R4ä,≥Ñ)äˆ∆tq—$EÚC¸=‡¯¸ıê0√.núGmi!„›‘Ïƒ-ﬁ7—ÃóâÊÌ%`ãj^çs∂%∞@ëﬂ‘Ñ¨—≠~=‰œ”Íge?†Êg}‹ˆ∂„ZËÕ‹ﬁ ,DØÖò)Aq»≥É3+∂
ã8XX*π≠-…ZfÒ|A¥>πè∏¶áoœ≥ÿ&}”¢®˝∫9a+iáh€Ø’räñÌjâˇd—xπ4Ÿ‹…x°Y æ,ôµÖsZ.÷3x‘iëN"W‹ñ ⁄ÚmébÕn¡÷ÿ„X…xÒ¸,—˙[˙óı˜Q^˚Øı†#'s:Ä5t8a◊F¡3-∞M≤«~Sa~îãvÂ-~!Õf≤øjO{€!ó≥ôö+F~ÑÛ£–bº,uØy}yddk@4∂rc⁄Òêë„£ÃÔñ~¿ÑÇÊÆÁπóc FÛ–'r«ùmÃX$∆˚9Õ¶BŸI ï>9Ó”\t˜Ú&nh‚Ù‡»XﬂËifp‰ÙÛP¬4≈≠ÕÃŸÆ°3}cL”CºLáSCpUÍ`Rgëô G|GÔË¯‘ËôëÊ\$d3Ã√‹%&Nßœ¥>≈ÌÉöÙ ™v”íæ	<JÙ;ÃåÓ◊: ò8≥õ?
hv´‘p◊…ìÉ#c¸Q§ÑÚtTmæ‰„√–-ïÑg"*Å<*(TPM‘Ñ;	Ä=‰¬ö/õGàR%£±Ö †ipÓáQÛ»ûkvh∑Q©úÁö‘1ØôÂß¯XX;˛™f… PV5ÎﬁqÅG^Oï÷ ¸\$»r<Ä[·Â†ﬁ87‰Z aYî”ÒlÖ>6S†°Ç>å£'—ﬁ∂Ñ›sî?¯Ω‡jGíó-ä£ei‡û´6Ÿ¥6∞~ˆˆ¢‰:%ªN)ÆSKÉYx€Ω∂CrwC\_‘SôËQàâËπo”|ÀŒ’¡∑áﬂ^{RÆ:§TBÓfgä*ÁºC™‡Ô<≈Ÿ=#SÇB	%§(«≤È>·Ä}BrçÆYÅ@\¸CËÔC∑O»áN*áNÍe21¶c1ˆÖ£dÂ»’Œ+ùriΩRZ/;Gt¡Ó^iæ[R∑QR'ó4(%≤ΩQ±7.ıßJ+Æπrdï]=˚Æm◊çã7/ ’˚‰“˝JÈ˛•°îıÙÍ…zb2˙˛‚;ãÎÚÓ# Ó#zŸÌI=∫‘ìEçI£‰nÑ(ªbóDÏ ™™aµÄ1DôhTàFâhºov§ıQ
˙∞In}àw*ˇΩ˙_™•s”Ú†_ÙÎÖ25£P35£Èfì0ë><}à!€´{ı&f¥ºà'À3' ¯Õ‹∞ﬂ¥ÀtõB∑It[ä.Eg2]•–U]ï¢+ ùêº„†`Ô8ƒ[„ˇt˛œﬂ9*?}Ny˙ú^&”
=!—õf‘ÄﬁåNØ5˘çÊó}≈«x‰¡)Ìòáé∂Œ“ÏI≈‘ZãT6±Hj≠Lö<Øﬂî©
uA⁄.j–’à8CNxﬁÑOüÚ7cü—]µ∆œ[mpÒy1–i˛º”˘;8˘;-o∂R∆;Ó=ÉF„Øç$‰˝˘hÌòb¸†èÖâ-àë*@åäë¢yb¥¿πàU¥$≥òZŒÜB4’ãù˜N"è,¯ìEõh|¨ÄBm9w5k ˇ8)Jm»iÚz•h `?À;±fç€üßhªß€÷-g⁄ˆ/´ıq¸™ÖËKƒgqÕ”Ì ‹
~-ŒF∂«è¢ΩI®K]'Œ¢>XDÁv8™®ñUtlWK4ÒÕZÕÏà≥6M*Z;+∑GëG+DÎy◊ÕÖe˙YºÜ¥–ô◊ñP8äÄ¥\¢k{L&:ÛΩ˜bëGw§ï˜}AÆŸ¬ˆ4§EÊŒvXÁ_⁄◊?e!Q:hﬂ) ü39ü;9pi∫wkﬁÊ"€'˝ù¯ò”»©¿€‹\2¬˚Äs≥qDsÃiN≈¯#S§|™[@ÓKwˆ2ﬂ +	ç˘W»œó˛ﬁÄJ¿◊öL¯u#|k`ø´·!~!n∫†}Ω¿#3§Ÿ¿£˜öÊmEÓ–Ù∂Õ£ëâ∑ÎçN•ëYzˇ÷+o˜Ö¿w‡!°|!‡zJè…ò‰Æ[9$37xÑ‚Ê3'{ªN˜1qíÎ;Õ”®–ë˛‡"¿j≤ÍHMØﬁLU)/iiıƒ	¥7Èﬁ_‰’zßŒhÍc5Íπ|dOh¥Ÿ≈s¿;éu†K•˘9D
‚/"2ãHtË¢¡/>ÑraDêSRG^%Y‰Öæ≠∞|n©tˆõ¯!∆¯Ù—„_FuÕzœ~ïüCE@^SÄ|£:.„ëC â!,àWa–—ÿNù€∂# ø
^Üøcò	
"s∏ñÓ{kﬂvæÂîΩÕä∑AãzçºFÉG&.èUZ≤5@\£◊œ(MGo%§¶!à©Í∫ÂÅïæ◊F‹∑ï§I˙ÛâÆıÀRYDôÍV®nâÍ÷Åô6Å÷Õ0Ωd◊SäÎ©•AÑ≤v_mª“&ó‘)Ä¥ÏıäΩ>y99/€˜‘≤Æ<'Y!&Oø?˛Œ¯⁄¢‹xDi0Ö  ˛π *Ö@îÖÏ∆STEMØMHûià∑^–”ìNΩÎ…ù‘/Å î_°¸R&ñ≤ ∑˜jÕïŸ]´∏küÿ_¬ìgSÆÚ´é+éU·›>@à√7áe◊~≈µ_rÌOπ*–Ÿ≈(.Fr1)◊Œ”lR’d2"ËNK?Ó˛H¸D‘ØÄ ÆÛäÎº‰:Ä
Z—€“) *(@UTû_gk^TˇÁ#Pπ*JAoÛi÷Ô˜Ï∫W™|‚≠Sz*”]
›%m”ÿ	Xe∞”'O-ˆIS◊˝„gf\|Ê!˙ΩÊœºFîﬂâ£|ïñØµ–∆œû,0?7ìêo∆Gö˝#`'°W©hT{˙≥"8Åû– “_*È™8Øö“æÆ‚—:¨YU˙2Çéáu´ô:⁄€•≠∫⁄¬ßΩé©c°rù¸∑†
:S>≤iƒq<ò∏u…Ç~)LKP¶Z*å)Ï†TSÿ©0¶0˚íˆªo´ïlµ≤≠^±’/QõÑ;)Kjé·ÓM¨êàx5é ⁄YÖ£q¸:™ıÛZÿ˙
--- Content of ./.git/objects/6a/5d549b3d74a011cd1502fff22b56934d094b59 ---
x’X[o€∆Ó≥~≈Ä©!2QX;Ì)Fa◊Jb4VRÀNQ»Æ∫&óˆ6º(Àe’–ß>ú_ÿ_“ôΩ"…v›∑
ÜEë≥s˝Ê∆ã¥∏Äˇ<˛Ï≥GP)ëñ_d<l¶Ø√˘¢◊Ÿºê
ä“]IﬁKdëAÃW"„`)‹o˚ÙbyŒ#%ä‹ëî,·≥ó`%è<™îΩaN±˘‹àv'“Ç≈≥å+Ü‹Ÿ,√Á"ø¨UIãÀK.{Ω£Ω∑o«/'∞õ¯AØÛ.πöÒè¢T»Ÿí•íGÖå˝ÿË;ÄD§|ñ≥å¿®≈Øç®`ÿ¸(π0Ù√<	c~Q]˙ﬁiâ¨MW¸£zö±ú]Ú¢JñÖU@¬UtÖ¶¿H˜Õñ∏ÔÏB‚MFØGﬂû¿cxq¸Êneñ√´—Ò®—Õﬁ*Ωö≈µPW`Ì	çdˇ¢J.yº{"+ê˜ÕÉ∆nÓÖ60æ÷e ~„í†QîËeqç≤Ì)mYësÙ5=së@^("Ì ¢Áí´JÊ0∆Sù3QëVYÆ£P¢ÄiÃÀh∫}	˙êÆA‰N*˝îbN(;x˛Ò_8zÛn'Ø'@~Íp∂c)ˇ71˜€í§d8≈ªﬂÜÛﬁ¯@3÷<˘«àœåÙ°ú0›iq¡•,§üx/+n `"ØM∫©º¬_∂‡–ˆêFp…r°ƒoºN
_≤Î˙b÷§à¨≈Ûú©´]r≥pîrñ£goñ⁄íÑÔò]#ˆMŒBπ¯ï«®Y[íSrÂËäG+¡”∏ƒ#V¢÷í(Ç˛dˆû/RMIÒ¥î°P<+}´ß	⁄˜+K+é˙∂51ô}«´¡‚ç®Ã	‰Î{ﬁ@#l ﬁ6~Ü˙‹>Ù∆_Ïy-Å$îX‰7Z”ùC'&òÏ2k—·˜?∏qf-Aß"™ZÎB}Ì¸G¨;ÂÑn¥Õ’◊çÙMt"`w<™º3≈ﬁÛ‹k‡GÑÙAbÅ5©T,è∏Øπ°„mÌ^±⁄ú ò≥≤§db©‰,^ê>"Ó‰QÚ¥l¡›ù•o-eV*â!√ˇFj‚%¶\J>O*„…˚OÒﬂ≥&~k|êáSó8`™g÷í0Ó<?G.[?>› ûn≈∞ıj∏u4‹ö8ƒ9~<]u[í≤ÚjÉ«¥ˆ(uá|◊R?-ÆπDı≠⁄o¡K2BaY•Ô˙W‰ﬁR{∂ªÅ[◊!Æ$£⁄µAçåQß@ÃÛ∞‰LFWæÙ¸≥¯I0l˝GqçÜÎND4õuXê[Æ∞\‡yîÅ…Áã\Q˘@°·•,™9&·:C:Ê¸sÖΩÈÀØ∑∑·	dx˘5]î@…=ﬁcir∑yDÒOÏ£sŒ∆;#2Pê6„Û∆«?)Jﬂ|ﬁ5`s⁄≤ú]îÕï˚pSb∏3N%züÖÁOÇ≥Ú±¥ˇÈÂ˛ßÔˆ?ÌÌ¶±ÚÂ¯ÕÒË€Ω…h=˛w{<Ø–ﬂ6(©6í÷`AÜ',Rÿ∞m|L$ﬁæ7Ñù¡Ìœø”€œæ∫ÉÊ»—<~¸Ï≤óŸó.uÀ!˚¬
€÷ÇÏ¨˚àÙv¯¡§ÚM\—7fâ±ŸvC¢ºgä íï÷”Ls&KﬁÓ7z0ÔÎF≠5Xˆ©;µ{Ò[onzò∫¶ré!—«
¡(/+…*ÅC§mÔ⁄G˙$(Ö„5´RÂ{ı0É[Î◊ﬁúÇ∆8]{`Ëã2§—$º`%ßô€åötãûzû≠@∑Iã»œMÇPSÇ◊¢+)ÚA⁄úW€.è&◊ÛKóÿ!%˙Ë]≠õÛ∞◊Ù=≥q`ÁÂRÕrNC⁄¶}√1ﬁ¥n`£ñãô¨Ú›õÌ-√úùú0hn“8mÜŒy¶nzåëÿ]◊√£ﬂRÂˆ)Ráó"d8ﬁÍ03ö˘∂QÖ\'8ÆßB¨*¥#‘(¯ù⁄†≤ZsãU‡ö…ÇÉˆ‰Ω–["ˆgr=¸˘˚ˇ!•ﬁÀj;S◊ÙaRT2‚zªBeks]à)ÅLòMvX˘"O
˛g&i¥“i‡mÔnm˚µU˝:_˙AÌ≥ñPgNqQÙk«Ñ86◊}YßËsﬂuo=j]iÃ%—ˆ–)DÓO˚[eˇKR s”uJõnÂá)Ôp<ü¿·¯‰M«o6V’`¿ªΩ◊ß£	>mÀ\^«QfO∆0}ˇ9ì r…á‘˘wPÔhÚßM¬XU{!cs£i¨›Pˇ8;>·á¢JcLƒÆ-Ì=¨Ò3Ì´ë°»”ß˝ŒËæiÒ˛ªª6z` ™ößv∂u±0"°ŸÁã,je«Ó~®qè5Î[ÔÖ …ºß-Yânπ5"±πÈwÛ:ó†ﬂ$˛:Î>•ó‹jÆWõµ∂pöÇ“º®1EEƒT8ÕÆ:®ﬂ´ÃpìˇóTc;•*.Á∫'ë;µÒ;V‡‚— um_∆Ã0K5UP$uÔö»'TX€øßöÚú»|z=Ä≈3{ªU^	V%G‹lÈ∂$kπË≤}\h4ö“Ks@óﬂ√óëB∑IüvûazÃ∞∞*ÚÀ4Ò~∆∫åoñ?„O|ı•Ÿ£—´Àπv^∑H⁄Ga]"qeô: ôÆ¯ùæ=ÿ;9ÕË%‡&£hïæZ©¿Ωí‘XÈ]‹∆a+û·˙–äGﬁxp¡≥n7Ë∏⁄ºù∏°Úo˝ÇvòŸ7P›øSÎH•’;:∞Ú~ÒæöGGp&•˜»a¥©ÓA∑ˆùÍ w√ˆ@´âÎ=ÂØ%ÿï@#π];b1‰zÔ˝å…
--- Content of ./.git/objects/c3/bd020d0aaf376e409e755e9552e066f8ba4852 ---
xï[l«Ò^$è-â§H v\”ñïàµE—Ø&ñ’ƒ÷Àí®ác…≠,«ŒºìDâeÔŸÈAäÅÅÿ™Ç2A‡8p>‘ E‹èJê¬)–w¬"`†Ìáˇ∏uˆ(æ$1hó{≥≥≥≥ª≥≥≥≥≥ºé]ıú<yÚgƒÁªvYH˚CoÕ|ÿ?p•ê®M‰i/ ÀOdòò»ó‰	u*LE®	äÃ”Ë	zö‡ÈO…	Ügﬁ'&º†ë7Ò∆˜…	Oé^ˆ	tÿKj,œIÇä^≥Vﬂ¯‡#(4äraÕ“Ö†a∫fäÒ°©Î:^€
emuC‚∂ z‘ç!.8WŒ° 8Ù1Kı`a›XR|4|O≠÷AíÃ@e{‚…$ÒÒ1uè$àÂËÖ‚Èi
kC*µõ∏
lD∞$1M‚2EUù√¿3e£ª…-ÛÓ$IàH—fB¬ÎŸL≥∞¢|JR∞G˚íΩ¥Ezä©*ã9…Ã
˝3∆V^VÆ¨≈Ú+jwëa'•∫b31ÀÚô*ıÀ◊î∆KxÎ˚D“ê1˙ïóï≤l’ Xuùª$giú§1SS™ï∞ —+e‹qùeªÿM\πü2%Mkiº∆˘⁄{¿˝†ÿ#≥´‘Z¬*%H± im©µÑ%ŸJÈRÊ§K˚À8Ã[8,I:PU?uI”G_ü¥¿:ô û$ë¥$È§©ø)V¡∂9Çyßn~Xµü]ÔÁ¯òﬁ:ÎÕ/¢mMÑ‰)≠ÈÅ¶j`$[âV¬¯ÜdÕNªt	ºZ™ÊFMîÕó‰qçæD,êI<ôs8q∏ÁöåK°Ë¥G∏öíb±∞'"Hx6(8)ãzb—vè∆XTÎl∞Ë#@|ﬁ=m∞LLÉ/∏bJÅMíXÆ€‘MÊ#üì≠_^J£|~Õ0¬ºà≠¬„y˛z€L,"¥°Ö ôø*Ñ√m›(65v≠Ì<äM#."∂ùø.Õƒ¢mÏ-Ûp2Ü¶πh(! ®ÁeûúÁê( ﬂ¸ıÁñépHîÇ±»¸´âÊÕ•L¬∫tè-˙:¬± _§¿ÜÌM¸	ÄEBn ÁïûL‡æ!»ä§ß¿A$Ã]#CCgáª€=œIœòó÷jÉ‹ºG¬d,.Õ«%çë`RÕúÇs	Án¡”√%ò⁄=°ÉVAÖ6ç@–µ9»2¬⁄ÙΩl)ÚG|+‹m[ŒY˘¡H˘TyŒí‘o®õm∞7rCªÜw«ÑÑ˘04C8∂  /çÏ∏âú”»∑E|ìx<‘ %®òˇŸ\–M| ®ÿy1üˇƒ<$Ω≈-áñB:sAqµ®ÆñuóoÕÂS\~’Â_9PdFxÑƒû·äpaÿzædÆs¬u±›É^¿Ó≥¡†0/Asa«=S1‰y)Aø‘ÓI∏/≥BpáVS/6J`k|…çI–'Â=°hq_¬V‹≈).ræ›„µk^∏ü÷Íz∆˚{«FF'{˚{ªG5f6äj1~u≈ÇÇ(j4äG5cﬁ 4É(°–<pâ±(÷6«ãö!$	Qc∞Uj^⁄+Bÿ.5zZê4õF/¡⁄ã÷¨ô{Æ·Â¬I’Lä¬yˆZ5Û'Bö—å·ÿÙ¥Ä4úáÂÛ±ÀdÑõ◊åH„aI≥œ‚4K¥®aÑmQ£Aêö(^“HAƒﬁ,°òtì–l€N˙90bfqLxë»2ñ_æ7(€^ Ya*êô@∂n˜›r≠'‘˛<	•“4§¨í_üêœ_Vj//û+é‡ø;˙˚Òﬂçg¶ï}>uüO∂˘!+ÃQï9*3G◊Ÿ˚rTÉ¡øa€{Á'”CfıƒílSlc™m,mÃ≤µZ?∞ ŒÅ˚ø¯Ú zÎôµ÷3Jkß⁄⁄πzbµkıÑ⁄⁄mê6†≤ôl∏˜ﬁId^¸¨Uq˚U∑≈¶∫èß≠Y›îW≠Îg.¨ùπ†úSœåÅ≈*Œã™Ûb⁄Rú&«C+âoﬁ˝Í]ÂÂ>ıÂ>ÂXøz¨_v +Ï†  Ï‡øúárDçπèÃ√tO÷Ó^n]j’OÜΩEµ∑¨€}kvüb˜´v∫+kaŸ∑‰À8{≥joBù=G∞ª˙»ÁãQqVùáoQYá3G0∂A2€∞gypiP>–ˇ$ »´Ú•“0†6»Ÿ[nı›Ωx{‰÷»„˜ ÊÄº:ö/ïÜÄ⁄êı¸∏ﬁµl]≤ ˚z3q ˘¨‘üSÎœ…zŒπÒäû˝ßë∞Ç§¡_X9µ‘ nﬂ˝£  +lõ ∂…€Ú3H9:C˘∏∆±8"‚ÿÈ€=«œ9âGNKI?⁄ﬂxÆÉ~‘a |õK’É‡#‡ó	3∏TtP*sêI¢ÚŒîµ¡,õ	\,–K·1¢xbîêäa$AÃ‚YÙƒS?6~•´NëIΩ◊;æH∑%~KÄê)õØƒÃ3<Ñ◊˜`˛ERîTlÕCg.WJ0JDŸ&Ç$p»0∫$`ÃÀ√›∆¯!iÃ—S/éEÖƒ·7¯wN§.∑ø—z∞ceòGØ∑óA˝Ü{N∂£zêˆ	æÓû€ö/µ6GZõyOs_{ÛP{Û®ó’hpá‡,%I‚BºÖïáÇ3öa≈‚Ûy_à◊ß±¿.^_4j«CÑìÄ—\T‡+Æ*‘:"~`ë»Q¨°A?.§πÒ∑¡ªM∑gÓÃ¨ªºk.Ø¸”N≈’•∫∫¿PÕçYá˚÷âçz˚≥ºßÔÔM?ˇ⁄Ú∑•~T≠M≤5ı9Ç2wëY◊ﬁÂπ•πÃÅ€—;—u◊ë5◊ë˚£+M+o)ÆS™ÎT˙‹ÜcØÍ8î˘•Ï;´8:UGßlÌÃp◊g9#âEq§•¥Êù≠©Küq¨˜ﬁ°N+qˇÏAÄﬂY©N,n.¥‚Õ≈ıßx3·mG†”ïF∑≥W∆ ï&ù¢¡ÒmKB§wä2q,Yµï§vÍ≥Û+éß·sóﬁ
~c–?·∏2’åæRzà‰UyçˇØi/[u‹-Ôê¡Rï∑f€∏’y≠[y?ÆI™høkãÊãpÁ}¨Mw⁄ì§qîÄW>§õIuò™é£øú∂ˇc†ø:L7L˙´ “´Cw(ı√â›E¸‚(≈B3ˇp¨D◊√/üg]«Ï8öâr¡3≈Ö√W·=§K¯[tW‰≈≈±T°∏<	ûÈµJ⁄fÌ	vÌ∫/B]Ä=¡Hè~ü`Ôã:1{ÿ'8G› ˚œ„gEy0âbë¢@ ˆ¸ßŒ·
·°Y£#ﬂÊ¬qADÒ®Á0Ë√†]Ñå˘xYt„«hlaŸ‡Ñ∞µ¢ n†$7UÅUƒ8‚±|8Ê ˜ôåÖyAîä#∫úxÒ(b2S]é†ç◊≠kÀÔ.Ω´∏[Twã‚™oö-0ßWeÁi»
€°≤2€ë≠sßÎB∫·’>Ÿ6YaFTfDfF6¨µ7˚eWˇØ(÷1’:∂ÿì5YsÑ…p:GÕß≥ªóKÅy{¯ÙÉÄzÊ‚Áó?Ωºb˚‰ÕœﬁÃSVÑoÊæö[=áË◊—<e5˛ËùÔﬁëG«æΩÒ˝ç<Iø≤>\ º†åO©„SõÙPt=$≠Ö$9˛∂ZPCyz∫s√Ω÷xﬂ.C–Á>´∫œ¶˚≤V˚áÉ ª{æ ≤bÌU≠Ω≤µ7Îÿõy∂Q◊àoÑ”%PÏrjÖìwüÇ¨X€Ukªº-o∆/Ê”z¸Çºø¯:èw$æ?hÈ©•ø?“ÿc¶ˇb6 Ó%á¡öaìÚ÷¢€æΩP8™Œﬂjx/æ+Ù∑Q˛e∆vDb|<,ºä&†º¯ üH2Kÿ‰BŒÊE˝ó%ˆ…ï9K‘,Íø√8(7¡b]Œ∫ól»E–n!·
,Ç∆z\≠tˇrb/ª
--- Content of ./.git/objects/98/869d85c16be160aab75eb44eb3674e32dcf58f ---
xçVmo€6ﬁgˇ
BÄa	≥7MWL@0Måhí°ıÄÆa–“…V,âI5…ˇ˜›Q¢ﬁ‚f”K<ﬁ=º{ÓÖﬁ¶bÀ.ﬁ_ŒJ≤BHÕTπ-§A©Q-ë0ä•»Xƒ5Ë$VÀÌ⁄Í=(ëèF7}Z,ÔÔ?oün>_eWl5b¯8◊hæDÛ{ôÏíúßŒî9%†îvhu+¢$~ÆVïÕ"Ia†Q¬œà^⁄.%}M#Íj2áNËHFÎ—(Çò¡ìFsΩ±1*7F≈M¡ı~ R±€ÅÙ„cµ#ÿñ;7vnû ,uíÔ"âµ)À@sƒ·49y¿é‰…ÒV(≤åÁqÊXs"fˆ‡¨Ÿœl;34Ç4:9,íôoñ‰l@z•l^üÛÛ„˝ÌÌáªkÙb¬&˛ÉHr∑>›#oå	ø…xÅ˛OF¢Âs5eTÇ*Sçõm…¯≤lp¶,‰Ö.%lD©ãR_-e	S¶ë⁄˙3‹Cx0ﬂU¯:†Ûd7H‰íàT:B(tπ:ŸØ÷¯íI·z´‡›|æ∂Tñ%~#ÂäQ}˙©‡ër{ ﬁj^QD6πêOìÄ≤p<¯äîá‡:å·x“ıˆ›§‡0≈Ã@˜,?—ê)◊´8#‘ATwÌ!÷é‡Yahi¢¥€:·ìÿı⁄ú⁄k©o”Cöhçaò2˘a$&±§LO≈TÁ¸hQ⁄ëVìbˇ(íG¶xûh$∞Èu˚ˆ5F§_B–÷Ä≠aÖ∆Ñÿf4LÍNò iëÓ¶ù ÏcKxe8X#ëÓLäê*¯_û|Å_ıC∫r}„Ç∫ö51ajå≤ƒY–©-øDÑ`_–ã¶	W¨@˝»eés»Ã§∫Åbé3!B¬¿:);47ÃRßW√OùÕ`≈Po`ê£T48ç∞M™±!π‘Í1—{◊uÊ¯PÎº˘ıΩyﬂâØû6Mµ¥◊d'„:‹c¬$¯
∏˜ÆtæE«À”*¯6[„◊EÁãôu–˘≈3≠CmÒ°√∂üÌ0ûõÜ7õ˛Nä≤pÁ^€2Åô¬¯s—bëÔ˙Ëf§QÑ…¿≠!1ÓÒﬂ≥q6Gl¸{0æ∆_{IlR–]õ+IAä≈∑i™Ωò\[·ˆZöbªßêÛÆàŒöh‹*∂GVàU‡8ˇ≠Çˇùß%–‘ir1®÷?]pÕË"CäÀB⁄˙Íêd∑™ªeÄx'Z8S˜>[ g:≈F√bû¶[º“M˜õªìÇ¥ù©ñâk ≈£◊≈…æV¨ûﬂ˙≤z5iπ´BY.ΩÚß‡¥¢ÎªïÛ∆;ÕzÇã°‡≠wb=çKÔÙÔÜÇ_hÚA'7|‡L´–÷üVØîY”3»¡\™ﬁî•?}ñ~Ã≠=–R^Å4M`∑'ˇcLùÒ`QWn€'ñ£ö^B
--- Content of ./.git/objects/e0/f3762ed3f2944dbfae3bd0f19d068fa05a6a50 ---
x+)JMU04≥d040031QH,(à/-…Ã)÷K.®,…»œ”564‘+®LfË8TQïvÒÊÅ5›ÊªN]õ›≤¡÷™)%)>9?//5π$3?C„Èø7á˘k?J◊ı-¨„≥x•‘’òõZíòíXí_êXTúZÑ°ı^&^ÆıÊyÛJ„¶=H˚±À# È C
--- Content of ./.git/objects/88/c2787a66d1d9c410ac8b37bacad69b84b03d48 ---
xÕ[l«qó∑$èî)JñT€q$ü%S&Ì»tÏ∆éTß][2ã∂ÏÙ√j‚¨;QTH≥w™d‚dÜÅ6Ö–∫ÖHßŒ√)Z†öü¯/üwƒ" pÅ˛©p?˜ß≥G©S’6E
¥ªw≥≥;ª3≥≥≥3{+Ø‹NüED"a•[}gÓo~Ñæb∑¯ö»≥4 ëÑ$úG”çOcßÔõˆAÎÀsnö√ô&wM˚%0 Ö§¿=<î¬-/·Î(—Òg∆<ù¿6/âö¨Â
Ún cM~˛gó>D⁄6⁄|◊—#¿∑˙ÀX«UWk∆•U¥Ü–<„ÎÔjå¥êKÅY`çFyÕc∑É™Å∫ë∞ó◊≤OÎlìÁyØnì‡é!∞ﬂé’úmSÁùb}ùì∏O»#ÿ·„÷.AÎ›%u¥9¥1ù”—{HÚÎ>ÄÅµºñâ«Œ{‹u⁄.viI€°≥_˜€√Ím{nÀÛh‘ÂéKAØtol“Ú	–∏€]•ÔºÂÄ¯F:˛#ùyØto#›ΩÆ¶€[›ˇµgvŒîB:ŒÙ∏‹tvÛ¬È2ª1+åƒ§ÚÅ;…T)›RñíîôÖÇ\‘‘‰e%´&ﬂdWS^ ©ZFy€∆ô29ëW≤ÂÉ±x^˛ëú/ä9°
#B,^êUUÃBØúà≈EuÜ›Â&ÈüNOÙ⁄A‡óÕ≥v(+k 3+SõWe¸mˇÖãÁ0AŸ]µπ¢≤$çŒ2ﬁ∂OQmRµ9;,/ïƒ¢¥†≤•ÒmY Q†Õ+π¢πÆQY,\z»úz[µ™&)öΩƒå+¥ jêBm¥c<óó›%aQí\<T3âYUâ†Õã•RÜY¿∞=0·,àe@CgWP√ÊÅîôvv'åÉ&ôπ¶*{ÿ®€SY§Â˘…9• 'È‚åX(›íÛ˘÷È\•Jñä5yı∂6ßìÿ™ÿÄÖf≈bÆ,”$”kAÀÂ’•€v6πP 4≠LAì•^áªQAë^+2∞∫dF‚V$^ØìèØ‹ΩÚ´âì&¥»†AüF˜≠ËÔﬁYπ≥ÆEá´e3z äû™\⁄ËÏZ…Æw
µN¡8|ŒÏ|ÕÍ|≠2±A˜ﬁ∏¨1»Qìµ»Q@6¢›+ã?◊™ØN|»±|ø{µ—4£Á≠Ë˘ •ß}/Z}«~s˙ì1≥Ôå’w¶íÆìΩÎ‰`ç\õx4:fëc9Êå™ëCøZ¬À∆©+¶p’Æöd "Sôz⁄ÛÇ’3\]2{NZ='+óÎ§kù®ëkGﬂ1I‹"qÉƒù—˛È_ÀZI„‰ÕÅ∑¨Å∑Lr”"7rÛK^'}5“wøhíòEbâÅ}öcyìYd» Cı}/V∆-“[ÔËÆL>€¢ôV\ÜÀ Nª»◊Õaª«#U[Yòµä77ALá¯Z„˛! ∏˘>∏˘¬≈k◊Æ\Ñ2g†,3Ÿ~ôRÖ⁄˛ÖRI¶	e·ﬁ6Ôµ ∂$Ù03õ¡%áÅ~¯’Ô á"XlŒ$á,rhùƒj$ˆ·˛ﬂ|<`&F≠ƒ®1|æœœ6ZìLZd“p?:<ûÔõQä≥πl”≠µ€%Y=1Ø*≈›_Ç%Q»Îu∞Ä7?æÇñ±∂ÕvÛ≠“w‰ÏˆíÅÍ]è¡rCËe§íEﬂw-bån Ur(⁄∂˜¿Dá!ÛoÀÒÌWÑ‰s2/«2/‰]∏ÉÌwF9ú¿qŸw«wΩŸ.‚E‘êò i”≤0Ó^–!Øàí‡ƒ ¡1ì0KïÇPˆç	l¢î‰"DA∞úMÿL;tqiF.i9•Ëú∫\iBoÇ≥;6œ8Òœ⁄XVôµ  5Nºã1»8¢2é(˙
#√Ø÷ T–¶œÔﬂªÈæ|U5#CVdh·êP}g£gﬂÉ—’©_ú{pnìÉg∏˛¬f˝ïÅˆÿnÿ÷÷÷n√Ì±≠ßΩõ»Áﬂ€|t%jÏü¸Ù; ‡˚‚p£5˘¥≈ß>]èvˇ$‘Æ ck”,†U_Öm›ÌJ!ÙÀﬁ”‹£=Ä¸ûú˛Å‰è¯l3Ü<A·‘IÓI¯`Í8˜$Ü~‹yÀÖ5rÇò)¿çKÔ‚»Ãqò©ü}	‡ˇŒëá˛Ö#3ﬁÒd˝∑.Ã•Èqÿgy˚ B^ääÊ:q√PÇk®1Åæe/MzöÅo∫Â∑önπ√ îLÍ ∂9ÁëUÓ›ÃJ∆Òö*˛ﬂªÊÎüN˚_áœ‰Sü2¯‘√%G¿%˜ß‚‹ìAú<Óò¿4∂ÄÊkBç∏ú≤á°Û¬¢'6» 3ûs≈S~Ñú»ÏÑÇÁ¸πÇ"-‰ÂÔ“1òÑ·W .7∆u‘YqjÖ*N≠£p≈©u‘oxø:Í®8uìÙb∏∂-∆ig‘ÜÅ õ‡]ﬁÆóÍË˚w∑?
--- Content of ./.git/objects/27/dda8ec7c477e9bd91fc26e81fe43dfe08a6df3 ---
xK …OR05f–œ»œM’/*ONÃ-HJÕ…—w) /H Ø–( O/JÃ-÷®,…»œ”O,(à/-…Ã)÷+® üŒß
--- Content of ./.git/objects/d0/f275fdc26ee22e5924a82649d5638c5532d19d ---
x’ZYo€ Ó≥~≈îÜa
UËhjTΩp,%1/ıí€[A%hrdÛä"y9§ÓoÔwf„êñúEã
∞≈ÂÃŸ◊›d≈˚Ûﬂ˛Èw;lÂ—-Øƒ˛ä'iÍ€†|“UYT5ã™€2™7˜‚IòÀ¬^âÊ¶¨äò˚‰WQ‰ÉEU¨X’wYz√4æs‹™ITÛ:]qÛ∆‹ÙYq{õÊ∑
8*À∞©”Lh¡Î¶5Ãà—˚Eîf<±¨àíP	T?ï\ÿ'u$eY±PòW\?ñbV-˛å«uXd	uhyì"%7a\‰9ﬁßEnË'a]ttµ:´∏"%ga¸√Áñ◊!LEÊ4ˇèã*…◊i.xUá9ÿ≤)â≈pï
—Æ^§<Kƒ`ËR_@G·™∏ÁVR∫	È1læ`≠ﬁÿxÃº/i¬·(,aù.ÎbÈKDd‹°zIXTÌ[R~ezUò§’à%’SX5˘P"›∫Æ‚´")rÚÏzß≈=_z,ÕôeÈõ8J"qG´òø∆“ˆï<¸õàﬂKΩ˛ Ìçà Äl¿µyû¯¢Æ|ä4?îñ√aPqQd˜‹∞‚y≠øÜ√¡`˙˜´‰úç_Ñé?ü~úÜ πƒ{DùØ°∏´Ôùﬂ5¸cƒfs`˙r<ôûmÖ’æ§aØ'«€aõ$-⁄…Ÿ—ı…ÙÙj+ÊI7+»d@úÛ„”èƒ≥NΩ‡ádÉÎÀÈE¯ÈÏd
(“VpW¨††¡Á≥£√œ·…tr|^úù]·u∫oÉbp1=9ªövΩ˝UìQZC>ıÂ¸•‘YªèÍ<çÎ¶Ò4dk^@ˆ˘–0é˚m b`prdµ—≥Ù*]^Kp™√≠√™t°RâÑÇÛÃ≤ﬂØ,SpvYWÕÇÉKÀÚ"@òç¿VöÑ/L>]‘Eë…ú‹ÕJ∑(|:w≈≈
•/÷ôá,W¿˘º7ø‚øÕ*sôØ®‰*H¯MsÎ/ºã&œëqôFq¿÷{l/¯µHs_?>{*”’’Sõ`s¯	(∂µ3@N4ãF,éJÚå∞hÍ≤©«WU√G¨ÊèÊ2æ„ÒR>vÚ®Æe@K8 ◊æ"à:Æ·Ï≠íÉí\_ñËÅM!˛ÜB†"ôK#-≠P´‹BI’«òó5P–ï∆H0'jjQEÉÓ,-UπŸ¢®ÿ⁄™˚î˘íÎÁ¡¿Ûºôÿî=ŸΩ®bÈÎÍ<“•,EG`0œ®-†¬Dñ¥Âh¸!Bˆ÷Å“íµ]ÿ⁄≠ß≤”¬¬∞∫–¸(AT%Mìó"§∂vÿÑ◊ºZ•9g˜Qñ&4™◊ÃèÑ@:cì˜™¨YÂ}Zﬂµ∂YÚ'4B9y¥‰aåVC˘Äá+#o√˘ı\%cıà(6hΩZiÕW¬w™˘ª\¶%yvôÒ«˝ç∑LOﬁdô∞5K—{à: cÓKÙ#Êghg†adπ·êaç%Î{≠”"7
'ü¢⁄(Ù?öuœÿ;*rÙ+‰X⁄7•¸Y∫‰Ã;™8Íˇ¿ãÂΩlÿ<ãBÈ%Ã#hï2GÄ†Û´=ˇßø¸˛üCˇßÒÏÕ?Ê√Ω€Òÿáù^Që0l@æ4G¢h™XıN∫C2¿F
‚^ê…´â|ãO€ Tlwœ |Dﬁié¥j$ØπßëË&„≠£j?[ryƒÒÑÇú&ÄÌÓä“∆Y‘R!%Gï‰fo.ûÒpWxn…±4os%ŒoØû ¥Æœ'áWSCêBÒô]NØÿ∫•Ã~˛4Ωò2ƒÑD+ç–UÜaWÎ£ñó˚Ã$I⁄Daã )Ï%âAø∫K}°€4_H^ìã_¬ãÎ”ˆs—dââ|≠F%UG≠Ï!≠Ô¨tIËˆãùAÆƒy‹†ñ¥âMﬁ¢4àKiÕóÒ=˙÷RjVØÂpêtUæÅπ5|H¶ú·≥ÂUÁ%Õ2°ˇJ¢w8‡UUT–÷9õ9)≤CﬁdzJÎ2ØS⁄aí4ë˝+jXQ`
£·êÁ’EŒuN'G&∞U—ñ)≤¡Cî--'øı\·2éd)3Ñ∆8	C®)ÇÕê!Zß†◊`	~
J%5ë¢ÃêJkŸmgÔÊ6ó¨˘¿¡h‚§®ãï ü®"XÃ≤´P"7]ìw]…êÈÀà\D≥/kr—î4‡ÛÚ6È˙TSı$ØáLz%|Öfƒt∆É!†}e∞èkSt;^hò†oM™»û⁄'sÉ‰~SnnUhSçÕ¸	´mKâ
˙◊XpEΩíÇW®§x>[ √î	©›EŸ∑§ß/›É+ßRƒPU◊∫®1ŸÏ<=e≠à37=ÃŸ≠óé%`õõÜ0qkã§MD4$w€ÓœN'≈¢e1y2∂ÂI k;πB‡ƒµ)[Jy™π¢L%¨DÌCE¥	!/õ\v%Ú˙≠¥Œu)añÆRäáwÍ°ﬁ∂êÔ»Ju∫qsûJdù4ytön!9⁄°
%ﬁ’ÔàΩsd/+æHÅ·ıî<[·Û~GΩÛ∂5Ëh≠<≥sµù˝Ëê ~∆6√¬:EËô5¶tê∑KÛËv√‰⁄¢GÌ“∞iP!ÄﬁzujQˆ!B`ß”Q”
76¯∫eeŸM/√D|”óø~n;cÉX[yZñ5ugóΩ7lÃ\Ád•ñÃ%’Çfﬂ€˝Â`wu∞õ∞›Oª'ªóék:˙h{ôÒÎö∂ª,:fˆÈ`4K{Øm˜ÊnVW{(Ì@gX¥8±ìâ}PT “q#ÈvÍÛ◊ô5é~4ÊÈΩMƒ≤MµÄòÑëâ¶Œ±]5w˝∑◊îËƒaÌ ù d÷æ2Lòˇ¡€I‰›º@,ıÃpD√(Y3≈0ÜhπçI≤a”ƒPü®≥nˇrÛ≥óÛ≈¶1ÆuLYY˘ç™2ÆÛA∂øñ≈i_C#Üf´!…T∆ÍŸMc¶Mo„õö≈»ÃKoÓ¢Êç”∏Ω¨‡=-cÿ4À¥b¡ÆÈ·≥∂L´‰€c⁄Õ»õò6ëC[Édk˙Ï∞˜r]dç∏≥O°j™z.¬!˚Îò9Ö†k”H…l:2B aπ(∫Kà∫~€ﬂ˙n]Coì_ÿÒﬁ©)*ù…ÍiE!2ÙQ§P‘^ÅÀbg<Íèá§
◊!æKfû1Ji}'¨ä È.Íó*“o7 ¥jzù»B}äç⁄sπÔjoá}HsÍÉ¨k}ßó¸º£Î“izLæÆ⁄Ìˆ˚€≠c/)W∑†Ùö©À•ÿ∆dÇÜ%ûå;m’»Fœxm4ÜnB”ØıÈJ3^ÎÇ2Ì$‡Ã•¨Ç4ì‹awñŒ≠hè¬#JÂj/œÈÊÂàb3Aõ©∞÷ˇø}
yëhgjëﬁ vLWÿ¢UOÑ:îÕ†“’‚'büäà€ˇ´∆?LÆÀ;∫#¬NE_sÀd£	bt‚Ëû/bV∑,ıπQıõg9LqRe¶…ÿ†ªû
5sfîìU≥íÂÙ˜v4≠Ò∆Ì%
Y{a˜\7˜˙Tvl¢É√ÍVˆúÀvÃ«˘l\•røyÏ]Á)6∑vBé¬N‘È∂.
S%IàCmâ¬˜ﬁº—'8Bñ«πcO‘∂›kÃêØ/‘' ﬂøΩ/ˆœæóÙ˝?∞R€‚VJ£æ∂ä§›e≠Z˘E ≈6≤jT ·ÿ◊˚û2π˛πÅV≥$PZØéWh√X›©cìÌò/_ô€M†B¥œ–VKñ‡Ê3øÁôL%àÀ`2}˝QÛ‹ŸÖs"¨ôQé?ñàhlÖVæ˜Ø˝`ıƒ˘¬È≤∫âï¿ÿ‹2Ÿ¨Iˆ·VJÂâ-≥ª1Òô]ëÌ—Ös,Árˇã:≈«¶≠˚ÙN;√ÕØÙ9⁄¸
ÌYÔ+@&ﬂ∫V¸—åa“-Õ¢c«.˝ÃgﬁÈ¥Ï4±õîÆ¢¯[î~Æè∫≠ç-ÌwWÈ˛5∂gÎˇ:¸ ∂o˚ú~Ä£˜∆0mv…˝`åÉùŸì~ΩÄ¡¶ˆﬂ¡X0R(G‡0îø@	Ò{ù4C}¬¢j√`0¯7ÀÅ≥≠
--- Content of ./.git/objects/f8/dbf78d050568c1dadbfef53264eb9c402cd1d1 ---
x+)JMU∞4a040031Q»MM…Lå/©,H-÷À*ŒœcX´ˇ‹éªÔŸ¢¯Zµ9~˚›åOÛ”Ç´-ILI,IåœM,(»ÃKáÍ∞ˇëÒÖ7‹Îﬂ^∆¬∫çz'kùõ J'à
--- Content of ./.git/objects/64/cef4db31ed8d68f29bc4d8693f6487eaa0a7c9 ---
xùUMlGûYÔÆΩ∂7?çqHb“Mùö$∏MQ+Ö %°Q©ÅP%ÇZÔ∆q≤ˆZ≥íXÎ*ï8Äd©FäD*Ç‰˝°$.=V*ïzh•5rã5í%§™áﬁ\á™≥ª±¡°Ì°≥œoﬁõyÛﬁ˜ﬁ¸x^QÁÖ—∑ﬁ||…Û^@⁄Á©ãwi ~∑îF£vÑ'£D∏$ AÃ9=úÉ∂NÕQ§ßWöû£!êâæÁ	û√ÏüñÉÿ0ƒÙiQ_úLê ÕfÖuëﬂì«$Ãu†√Ê0‡-¢›néîö“s nÂvs u¶©Ä%À≥›(¡o©[$∆ÌF: åÉ"ºx$O∑ƒ•ˇG\∆`J/Ê’ºü÷£˚öS`âm»íÀ`n âæÈjçA·LKFÓ∆
ÉiµΩ@ÚÕ≥ywﬁcxà˛sûk…ãm]ap9Ç%Ô5‡é‰3(DILJlﬁﬂÇ””åÍ'(›Üópè·ªnÓBAjJióÙÆÜ= Kˆ¡≤t√k¯^⁄˙Ñ-6Îcx[ÒBœò$Œ¬sì⁄m]¯,ÙΩœë4òÁ[|çY…kÁ‰3x‚i◊˛C0K{ûˇî/|„Ù´p¨πf¡*,‹5\®ª≈g≥Víˇ_p˝R¯≠ÔIÄ\>vé\èºñ“Ù∏∫úÛüUWPB≤‰¶πAReM»®∫`[Ãq„”≥ÒÈôÿaÉwâmAFBér{¶Â¥zIñÕÒ≤êR‰√Bnﬂ§HI–UŸ/Œ9äòõ~?VW©a7‹Ü¨;ÑΩÚZVÃH+öå0•jÿìóe)Ö4Ã⁄¿4ÏV‘d2ïIb˜™à2ñ@Øä 2¶Sô≥⁄‚äûR0ìP≥Î£òu``nb-!gıîö¡ååêäÜ€∞€¡N<Î"J :vKh=éV2∏ÕYo8ˆ9}‹™¶ë™Í∆1c%Øa:#¶eÏ“Pª$M«l…©5e≠çd&¥¥g≥—E5-G—jBLgÁeEâé#5;ØÆEO#5âƒ¥=ΩÆ/™ôhö§/:<Æ¢§òIÂdMã1)#mgBﬂŸüÉŸu‹÷P‚60&—≠˚Ø=&Ô⁄®Òù≈»’Ö¯¡˚¸`ôèT¯»∆dçf/PdKìéîÈHÖé··+=u–ÕúÄèl~Ö≠{∑ﬁπ¶l*ÇÓîÉ—J0z≈WmÔ}–>pø}†‹Æ¥áÎÄ‚ˆ‘¸]ÖèÃ–˚_!Ã°≤™‚ü2˝SU‡è~a;YZ.˜èV˙GÎ†ì;~5veº8Pú©Ó›Wº5lÒ"m≈>tmis©t®‹_tUÉ°-˝Z∫Ëz85{ﬁ›Í€Íª3]dk›õ˛kÓ;NËNó”v˙r«X•cÃÏ{ÿ›_\Á	XÙnû*uïÂ¿H%0bF™›Ø◊≥Á<¨StœyXıoOï_ƒ∂c[±Z(º} û¸æã0BÂ–…JË§i””⁄´Cu …íπµ‚Cs‰‹Oa¬,:3ÌÂ–L%4cæDOI´ª,7ñ¿Ÿ@¸ 8Hú⁄p˚6Oô«IB«	ïcï¿ò{Z∞ Ù»eWí∑6ÕŸ:Õzô~8˙∆¯{o»;‰ÓçˆNtr?v2D¶&'áYd=%®›b÷£à›÷WRÛˆï¥œœ◊‡	ô Ë5¬ûyé¶UiEëè°˝Dµ˛,µÛÑ–V∑aU¿oÿ_¥mÿ_Ï5[©N˜AÊq!ÆˇyÖ
--- Content of ./.git/objects/5b/28aade48226a9498ee40aa969c728737d39c34 ---
x≠:]lIö’v€nª€ÒO'1!4Ñ &@!d`F0Å¿2!	xA«›	˛…∂€¸x⁄»7ö”òQtÎ±"w;#Y´õ<D˜ƒc¥:ÌÒp›®W¯ZäÑtÈˆ-s≥+ÕÕΩ‹W›˛…Œå¥ÂÍØ™ÎÁ´Í™˙æ˙~<OÕ∞áá–ÔúNÇ∞n˝=ã–·ój∞U2ﬂ-ôzå8ƒq2R"DËÔ¶êIOÕ!≥ûí!RS‹í∞Ü¨nké€∂êMœq*DA∑'!GÇ—	&ƒ$ú!ß^oâ∑$\!óû∑∆›	O»SÈÁy°ü-ﬁöÖ|â∂P[¬Úà'Ê€´”-uTsç©	ÒùX˘¿°ß°¥≠ökLü¿À”Z¡|W5[œ5ci~#åƒ4„má≤n~{iGWc QsË	¨ÓSxå–å1ƒ˛’ﬁˆÈΩÛØˆv¸HÔ]µ7˝#Ω{†∑s√ZÏÊòOQ®◊é8'§{ mÂ\ü°ΩvyÁÜ¸>ŒuA~?ÁΩ≠Øä¿ ¶`3&8ƒî˛€˛Ñn<Hh‰DDº)≈ED^å%¯ ©9”ºòY«Sss±‰úÊà,,Ñg#±8œiÓx*¬Ö<ãÑ≈˚|ZÛWJƒ`àÑ–:••?Õ«˘®N≈9>-ÜkZk4ïL‚*1Öã#3ë44kùsºÊÔ≈“"`®"—î¿iÌ±döƒpíø€\±-≥Äá±t∫ﬁk6∆«π¥fù∏ïSê^çq<§ñ”.ñ“Ï#©h&¡'≈t¥vÑ`90Èö·˘.	Hó‡Lö3ÁLQÇ‚7gÊ»Rç8Î%SÛë¸˙zC	õ'ZÍ}ÊÒ»zêLúˇûYüêp»·1BŒ,⁄´yÑÊk}%ÛºµZﬁ<*gÎ¨V†πÂWPπŸ¸$r
ı ±•ÜÌF¬ﬁúPı≤zé≥KË7àsH¿F6œÑ@15]÷ñ≥<∞¿!‘”ªƒ]tœ|›%ÇÙ∏F¡Œœä©T<k:8üıLfíIÿP6öJ$"Inò˝Å`ß·ê¥D#bF‡√©å∏ê5R‰Ôâö%zãèﬁvf€'#wŸ≥Älê±	ﬁ8ô√l÷W+4N3;õÿ¨iò⁄5«œdÊ4r>KjétffAHE˘tZ3ô$ßSIÕÇè:ú¶¥»¡‡ö˝ÏΩ(ø ∆†∆v7"‡Ÿ≠ö}%º T•Y1ÒÇf´|Éf¯t&.jTuR¡ßÒÊ±z¯·Zˇ≠TÇÔÓF#âÖ>ÔR3©{˝BjNà$“˝˜≈[©døNÅßÑπH2ñÂÖ~X®òÆTT^-‹◊<““Xß9aåã˘k˙?‰QŸ’πt¥‘)∑ÙÂGÀ§„≥ãü\î=C•©ﬂ]˚ÌµÂ9•wPÌÑà
yB%O»‰âuìÕ‚]Ûl{‘]≤='Wèæeœ¥‚ôV=”ÎZk˚£·•ŸØJÎµı¿Úeµµø@ï©ñ_1ü3r€âÂ{  *‘∞JÀ‘pŸ’^p}øF˚÷ë…‚≠‹•ÂÛπ˝ùÂ àœåT°ﬁU©weÍ›≤ÀS∞◊ﬂCX∑ H”›uˇz⁄}∆å~ovú9j˛Ω≥ÎLø˘˜AÁ˚- £5“É¶x7z‡˘n{¿ƒüØÂ%‘|ƒG–ÕºòrÊ	Db*5≤@héêÃõõ˙ﬂÀY≈jCHÎ,°Tc’H≤6œÄ3’…ΩTcç=öÔÉúM≤Iƒ$Ùl1jç≠4‚êÃ0.|[˝ˆΩäZ¸hÀoÜõ}Û‚˝≈‚–
í„Y«T4¢”˚0˚'ºƒYˇ‘Ìò~ì∞ôd:≥∞êDò@–¶ôÄëìw#Ò€ñ]4R'5*Ωèú û∫À^ä •QB*WOL–¿&¯d®5-Ï“;‚*çkL±Ä'öö•13HíeÖΩ∏±;∑R¯N$„¬zs·8_É'˝ ˛~y¥Ë˙joiüËS}Î»fyG[
d!Rl´ù˝}•›r€>à
T©†LÀæŒud±C{ Öë5ØÔ—ﬁWﬁ]/ΩªJGÔ>’ªoŸ£z˚^y^zÔ[™˜≠¬{eó∑8/ªXàk˛éGsè„_∆KGó}äˇêÍ?$ªÎÒµ€ˇò˘íë∑ü\· @T‹ßT˜)YèÎ4ŸRùÓw=Ë\¥ë«„; …wˇ«Í3ÙôÈ1íHÅ‰à{DŒí≥P¡4k‚LüR1Ç62™ë|$™˘»ÊÏ—Ê7(gñlpõêí}≥€Ñ≥¿»xhxòúì≥ÊZÊPŒèªÒVï(Œ÷|XGP—tsœ8¿9OŒ[Öí<0ñè≈9æ∂ÂZ∑öïdlR+¥¢%/ÃÀú4·∑Êo"êÿ@8Û5“›ú$%osÔúOt‚0Ç‰}∏A‘Õµqå‘váÓäÆj+∑ÎC$˘û9ü¿.=≈;•áú_ÚQ…ø≈}›“<≤òOB?¯ˆ9£Ç
ŒÖ[‘YÃf$Ωe_wÛXƒ÷£x$ﬂfò%s∫{´]·º[Ù°9[V3G/˛ﬂñ3k›ºØÿVˇr`y>…;{Ÿ èµKÌ¬â-Ò˙0^ÆÌkÛ∆/ó‹%∫éªûìºR;ÁØØØ‘&µœæ!G%o9bª>b«&#∫∂±mˆπ¥â^]Õ≥óZnÎã0(π‡¬⁄°”ë7◊!÷ßç`µ:jI§‰}÷˘h·iç$1ï=aY…Uj8ÎıïhÊ @OµK!i√I™ÕhXr√åzn¿ÂºπŒ\G. nØ„ÑYu¬º3˜¥∆Â`fé Ããªaè~“Ãä¶≈}ìï¯Œ}K*18j@Ár€$Ngó‰ ∏]¢vKN†;¶yø±!.Ë„”—Ü=–5•VX€Ô0ø¯5‹sHB7;rD”N…áÊfé;DÇ>e˙¬ºhYÏúBˇÇÇÑ~ì-öÈ–aç‡4”ÏÇq?;å€ﬂ«i|Ë‡BŒÁı€¯«I|ÉTΩNvoEPØ®Ö˙Â|Ëd<çƒ”Ô@¶⁄†H}…ﬁõF\⁄˘«cgW#/Úï_(«n®«nÂÀBÒH≠dÑ!Ë¯Òã¨Î&;ù#qVgò’5é?asê∞@÷|ì˝≈DˇƒÕ¨ì°´†≥ö„=ÅEu¨n„˛…HÇœzzØ˜&Ü{9∂˜¸pÔ•·ﬁ©lÁ‹áùçƒ„3ëËm∂™9É
s¢™ΩQ….DPë∞…î»ft¸=>ö›¯ó^∏ü›ππ:ŒÇÜÕ«Ó`·*ª{dÚzxÚ ¯0˚a*Áÿ “÷t(Ca⁄˘÷µGŒË%Uï£eŒ•2Ié›Patw`aB‹ﬂ–›5SåÀnOm“#—ï¥ÜNÜ% ŒÕNº‡≠7Ÿ©hà¬˝a6çeHû;ï•∞F+¸‚8P«»ß±\âÀ(O&""hé‹©†K3√Ühd,9>	ˆ∂JË√[{ÄFa+ﬁ2]s©QiQò≈V]0_◊¨`·ìú¿‡K4ŒG3ì‡6„\”ÈTFàÚX(MÔ‚F6n&å-"êÓáAﬂ4$[€^òI•yÕQ∑∑h¥ë◊èüFã¯,©f3Vì”lïO‘®Í"hˆ⁄ójÙ˛‰p<ñàâS1´ËeS±•oÊwO_cÕ∫ ≥±{’V_Ç^<o∫z√Ë¥’Õ∆ZÆn≥-õâbú∆TÎ¬BÍn?b?™
ÿSC‡n›Ñ¨zŒ¿ìû.ˇ=Ú∫QÆuDXvî›2’]∞mØ´ƒ]!Òè!Uº7UÔÕ¸ÿö∑≠x[ÒÓRΩªÚcXÀ˚dLvü,æ ‚Ú«F™êßTÚîLûz›X&ÁGÊ ,Q•eØ˙∂∂Â/Í‡õ@Oil≈£ﬁRo≠£}ñùﬂb BøπpΩÏ*Ü≠πÙûë.˜)¿Ç´ÙÁÙÛ„≤o™xGˆAz|˘Çë|1¯ÇV®iïöñ©Èo|˛G£Ø|ª_˙vóÆ+æ~’◊_∞Øµ¬ÀäUi=Æ∂/PØÈˆ•{2Ω‚Z‡äwÂÍjLL(Å	50Q+ªÎàtéÂ‡—W¡S/Éß‰w.+¡I58Y§ñ∫˜ûrUS∏¸ºcıÄz‚y˚eàä{RuO Ó…Z˝5≈}]u_ó›◊kEW;ÂÌ!*ÓK™˚íÏæÙ⁄Â_Gf{[ôÒ˛jÏÛ1π„˝Á˜@Tò1ïìô±2”Z¸Â√ãÖ—2„{]5å<Ôî€F *‘Yï:+Sg◊¿Ç·Jl5‚™“:≠∂NÉ)Ån≈Í“qå¸‚ÁÂŒÀ+1 FTòIïôîô…2”ÒäŸÒíŸQÍ\>ø2˝l¸˘˘’[2˚Å¬L®ÃÑ¨«◊U”0nÁ¥Êä \ëô+Mdˆò¬™Ã†Ã˛≈äWARË.ïÓ*—/È>ôÓ+˜ÄÈ¬Ÿ≠≈Ω≥h_\sÔ]∂≠¯üVØæ¯P˛(&ªÁ˜ºÍûáLŸ›±t˙gë*R˙@›/ônÖaUÜïˆ∫Â¸ß.`‘€u†∏O ˛°“’ÂkÓæÂ—ïkœÔ¨JÚï∞ôìcÎ 
ÁLêxFMﬂÍœ:4J Óˆ•Å/ò¢≠h{sËˇ“Íﬁ£X`(Tg¡^\£vîlÀ˛ï¿Û´´ ◊"25£P3*5ô2Â.û~Ë,Ppèù∆Ω⁄t†P–uhÈjÈ∆’S]æ∂rÁπÙ"$_áyﬁí≈úL=P®*ı 2e Ux»l€kÉ>ÒdßL≈˜ç‘Ä+o7æΩj|ì√≥MØ¬˝∆W»ü7]÷◊d™ae,”&XÄPΩÍW¥Q#¬∑ΩÆˇd@F%Hﬂ`Í!@Æ2m"èì8Äí.±¶©Å\k›∏…¨í≥7i≤H2Åk©⁄"Y%‚ô˘…˘µjJ±üsi_ØYª!¶:t(H
óaä∆55âsS Çf·ŒÎÚfÆAá~GÈï¬P†Ÿ@˛
É?`CwçÜk66ßﬂ=`ì5^“`”ã0=”iù∑\ùπÖÁ÷z|3Û–À˙È$ `Ê≤–GXé<`DÖ<¢íGdÚHŸø]nô*pÓè=É+Øé+=SjœT~tçl_≤ñh`sevÔrÊ˘\πÁ 6 ˆá∞ˇœ‡ìÿ å]Öakﬂ›˙ÆneÙ„àgÙ•ﬁÿ∑7ˆ<≥4Ô)h[µ∂˛¨÷∂ü’ö˙Y≠Ì?´µcã÷gªæ6ÕöËt≈—Õ∫ˆª‘ΩpÊÎ~éúﬁ™ÆV¥°éîÃ¬0F÷tª˙¯âﬁ˙€<>¢zhY˜Õ¯´u`à≈¢ú6◊
πZSŒ¬9sxæ5ﬂI≠Û5{ç∞[ƒ≤k%ÄølWúÎ∑Ñ∏´Z¸†·kÅÓu™Ê~Îı¥∂fpö6éQ˚:°w√Œ;Gà{~Óò´‡<A˚Í}¡t$g±p\	Õµbã¯πö∏hÔXzÆÑ∫„ôÛm\s›;d{`3FÃAÆ¡?‘6ûmªíåÅ_èc/aÊ¡^2|†K—‡^å
1›ì•ºc8˚i1n"Q»`ÖÀ—YÆ_–ùÇYÀ¡É†`eÌÇ‘}§nú≠à‹YîÍ!ß!ƒV\)Y˚É˛Câ˚á¢…YÕb01º´As÷€ü œh0∑~√›òmo,;ûùp•¢©ÒtÏˆtÍv–≤Å√
∑ ±√ £Êøf÷yúßqÃ›)t—˝x*ÊtePk9-ÃÈéŒ	]7‘ò«Ö°V/”z#¸û,xlO7fÅoPnxÒ"áèk∂™+ÿ2rˆÃï—•¨Í¿“3†yjfXNÕj¨æŒ€5«’#g?üΩ6=JÑ·ãu\∏tzÙ¨^&`˜ì`≈cô”˜¡jÇF{´° j§>5L˜V}YYﬁƒTO&"±§	TÆ‡{·8ÇiﬁŸ¶:wÀÁeÁ≈yAu^»ü˘ˇŸ˛.«ÚIôlW»!ïí…°üPa[fÙ«TÚòL´˜†ó/ÍŸO®∞/–{W…„2yºL{^—]/È.ÖÓVÈÓ¸»7Œ¿“ªä≥Ouˆ¡ú˜‚˚2≥gi˜WÚgÀ-ﬁ≈∏‹≤â˚*^;ÉU°ΩX©p}Ó˙⁄ˆïS°ˆ®‘ô⁄≥N˙,>›K øÔ•ﬂÚ6≈Lı+–ÂN∂–Úöv-Çe±_&ä‚£èç‹”±‰/uî;?íı∏÷ŸSﬁŸ˚œ]+WVGÀΩáWª◊Ì§Û2Ò-hóâ?Îkóâu¡4∑ƒ8$wˆˇtdçàÕxÜ∆ÏæˇKbtSw`çÚﬂïw_9 ¢B©‘êL≠QÙ"UÙ<§ÈB”ØÍ+Ùa_!∂b˛qÜ<gG∞;F-Ê?¥ÓEÊG»kT˛›KÜ√AÚ‹πsÇN¯»çè˚Ñ_BW·∫≈ Äs] 4ˆO≈c3æ–[ëpó€Òø*2b,^!>Læ“|oiÆ™ã\…ÿÆcÿúKAEŒ¬˜ófxÕ£#:d*)ñgtÑn|–M¬%‹ﬁ6¸-ÿÑk6Iß‚wxùÍ‡?ö»5|ÈÙ4‰EÕéc!áq}å;;N_πP°hÁ»Ô]πtv|⁄ p
˙L\ù2Ï#ÿ?¶+Ï:+–Èèä≠·∞6Æ≈F5√†GùL§∏LúG¯5îaSc˙–Ì∫ô PDwﬁÖe‰»Îø2≤Áı_y‰j,#:Øˇ ®Cnée¥]née‘í◊et]˛±XFG‰ÊXFÂÊXõ“∫â$@è¯9ÄA˘)ıôÎW—øë‚»R«„è∆_˘ˆøÙÌW|TﬂR}√ä˚m’˝∂ÇN™Ë§åNævdG@qt©éÆº≠Ït¶äÌè∑}πmÈZIP<˚Uœ˛
Áp¸‰ K3ä'®zÇäsøÍ‹üwî›≠0©—«c_éÅê=©¯´æ√ä{@u‰ùØÈù2ΩS°{T∫'O≠ì\˜5–—GêÎ!Ç"¿≥Y~ÙÒ!±n>CX·⁄,yﬂÑﬂ.\∑PHÌÕ¿∑õ jØÅã"ôBˆ•πS6wñI*?ÚwÁ>=ó◊ÎfD†X?jˇªûë
--- Content of ./.git/objects/2e/7c8c81c8545ce984cc7df3c78ac9dec1854fa6 ---
x+)JMU01f040031Q(( ON-.ŒMM…L‘+®dhôùì¸øæçŸﬁ+ho`‚Íã*W¸¥Ã˝
--- Content of ./.git/objects/00/b4510ff3014e8abf647d09582f16b9eae91450 ---
x≠éK
¬0@]ÁsÅñ…ƒ!)àÆ‹∫qù&S¨$M	ÒˆÇü∏{º≈„ÖíÛ‹Äåﬁ¥*."ZäëòΩ!rñÔ-∫aBß'mQƒ)o◊R·\F©.pÙy%%ÿ’G¯Ú!¢ÓkªüËì_ˆ†-ì!;8Ü∑à*º'ö¸)ßNÀ‹fü‡”Ö2A~¬ZÀMBS/d#K∫
--- Content of ./.git/objects/00/9820abd65ac1b3e0e07b21b70260a4c6a12903 ---
x+)JMU05e040031Q»MM…Lå/-…Ã)÷K.®,…»œ”564‘+®Lf∏ü;ˇ$Î…¸T˚∫[
"è•{m4  û$X
--- Content of ./.git/objects/84/9e5b6c63ff7f86033f4a52bd5161abd124d44f ---
xuèA
¬@E]œ)Ç´DW
ﬁ¡©ì©ùI…ƒç‚›ÌXk©`v!ÔÁˇﬂt‹¿˛∞[y·∂$y…¥üBÏYzîL6í¢CE≥T∏Êœ ÚT0eO29∞¥ò¬ù¨ç7]ﬁv‹π&lÿ,^4p2∆ëá^¯B9WEe{‘kÆèÜÒ,CjΩBH0«[πO]‡ÙSÆ*™˙˝£pÀ*’$õÅE∑xÛ}>SsÓ ØœchrGx∑Á∫6ÊÆFäb
--- Content of ./.git/objects/cb/98fb01b3564f2be2672d4d717e0e38ea228a5e ---
xù9[l‹Vv‰ê3√y zè,K¶„«Hë=≤c'v'∂4íW™Ω#YíÌX^wB9“»#R!9∂5πZ£hU#®ç`[ªÿ5 Ù#ÎEvÅ,˙Ä—üzù˜£[“ ê)ä˝Ëü∂Ÿ¥AæzÓÂ<8úÒÆ6£´√ÀÀ{ﬁÁû{y8üïÊŸ∑ﬂ8ˆ&Ò”P»O¿Ô/˛˘√≈€Ç¯/tS˛Q•ŒW
ùáOdñò≥Æ‰úﬂSsæ“s¥ãË%wY|Bƒßo˝Êººáw˝99«^ûÜ´Ó›pıÛ‰—œ¸7öñHπJ”—≈ˇHÜØ˛óA¸’
-ÇX™Ù?Å	ü¬øı[s©tπOõe™C–„…ÒcÇw=¶j%$Åa¡µi√Ø¢à⁄πkTÅRé’™h^≈^ÊE◊ÛRC’yºœÚ8g›%k84÷∆[†@$˜V)V{µˆ˘1ÒòÆ’Ñ$ƒ„˚	uW„ !Z£k87÷Õá•ˆËFTÔ|`çæCﬂ"o∑©´ƒ-≤@˛–U EíÆπÓÇÎ&)èÔÄK®‡˝¬òW”éµtDI®ÕU˘]òfsΩΩÆÇª´2qÕS#_c˚∑`Z≠NZ$Ql¢Æ˚Òm|˚'ÁüVb}Õ˚ πµﬁZc^9≥”1”˜ ô«LÅQé÷h⁄ÿﬂ]X”›ÿÆ«ÓZ*w◊>ΩK|JæÜŒ;N„{
xªsÍ≠Á·#‘Œ*ŒR†‹Á˜b<ø”k>ÒL]tø±£ËfQ\Û˚úzæÊ‘≥.Í˝ æËΩﬂf€ız◊Phák%9môÏôP¡:FË¯áq˚∞≈øn¡'∑Ø´’•F|µÚÁ!!WÄ|áøì|G
˛ËfÀ¬ÂXÇ¨√∫bÎ-¯WH˛¶Â≠ïÌÍû*ﬁRSπøiÀßÂ1Ç(xL¡Wˇ¸çO¿æüVlº®ÒUcôé;y3ƒvC˛KïlŸ¸?◊ÇÖ‡RKYéW`¥ñü/µï{7pÜíªk§kúN8•ˇÓè‚ŸÓ‡πw<ﬂƒ~´>:ƒkÔéÔ¿˚$éçSx˜Ï@Ú∑Aÿ3]Nõ·=3x'X›3˚á∏øÅ£éüÖ_\E!•*¨*±˚˝’ôãXûSπyNÿúíÿî,Ç®f∏¨¬¶eiÊ•$1ùY»…úöëD6ù…
1LÉayA¬=ƒ¿ööDsÜÿ)N]Dú‘EÅç-Ø∆Rb∫4¡Fa) êbgafÈÜÕà—¢à,yn-fRòlZPQP`RIgﬂ—«‚MjNm≤≥À´ áŸX	[íÌt§˘%†hëòÊ2ä`CªùV,Å'“X eEHe“ÅØJØ∞¢§≤i)'Úl-È4ó…*Â¸ ?ü¨J?ƒ´™∞¥¡`8Y‡¯ä≈ê/¢yW4ñp ≈•\ñ«Ïj¿Ä–ç±ÁPw9≥∞®‚Y¬Ìå¢"°ÊñK•E…ÃÉOÛ°8v¥eÎh>≠UÁƒòCÄô¶íŒe≥´çÑnE2`Kîú´±˘◊D∆dDBLp÷àBEáÿÑÈIe3ö˘às¶‰˚hûµã‹ Ä¢˘Ne¯&x iRˆ«W•≤˜˜SâÂﬂqp	Øú Bá⁄◊r\9®£◊Ú‘ıhÃ§%E5}Y)≈eqóŒ)Çl2+ú¢‹ídﬁd ‘ÚNc_Çâÿ1’†M+Úû(+•¡Ò{F´€âÀv®0Ublsy‹Å§Z·(ZéUs»ä’PÕà™ s∞ o
lYvÙ^QcÏÏ¯ƒ{e‚¬v|8Ò=v"¡&&G&≥c”√ÒŸâÀcÏX‚ÚƒÙd‚˚câŸôX~Ô¢VJNj6aﬁtà~º	+÷ÀÇ†V˘€Ñ ÆÇÉO∆ÿ1Q……63
RÀrW)√ÄŒ\Nïñ9H 9QâÂGv¬ ∆∆Ö‘ç21 #à73≤$.Cƒ∆Ú'2W|#rÀ¬ÔÛÊy∞ÙÏ"j-ﬂ, †i5g∞E…	†H»∞ºêÊrYµö‘S≤∞@>Vóm¶8ÿÉµ!’Éƒ÷~P%=T∑“Xv‚vàç~KB~pËƒ≤(4·aæªÓI9ºÜXì|›§í(‰}lﬂ2ß‹¯˛¸û:Ñ≤Åπ„éßÒR∫∑ídÌ.6ÑCˆ›hﬁ=Ã¢ï›tÀÀ	›¢ƒ\Y<˝¥åé#2zÛï°H@»Ëç+ˇ∂ÉgMäÿ2≥ebƒi¥X^v†:g∞ têÎq“óâ∞qî„-8á+Å|òÂ`A™∞+ÇºÓÜ}Œr⁄˚B,lá<Àf´6GY^Ç¿A÷¿;B,fáT‚úà∞JëÇ‚ãÕÖhµ÷‡x^Ü›tëd’“#ùëÖ[\6k++¿‚äÓêeß~êWW8T6Ép!åÓ<YiaÆn^òœ-ò4⁄FL&%g‘dX≥ÌÄ	I≈õﬁhL¶îÕ”WŸœM
2àÈΩ≈…"ÏA¶ÓP2©¨ ötFLK¶üL_IwI6Ω•ÆÈ∂ª¡Ω¢d˙∞óS/òc”…·x|lf&9:ñòMéMOONõM0>2<ö)¥ƒßìÒ…D"9>93kçıáÃÄ•7>Tôﬁíÿ∞b˝M?R?SLR0√*'Éÿ…Ú4üe_∞T£07˝%·!§L
$V–ã:2U~ﬂN.JÀ¬†|+≈-ØÃŸÏ‡®,≠ÃK∑ßdià28µ™.J‚‡≤¿g8&%yÅ3yAÆ=·ƒVVÕ÷œ§*%ÀÀRéﬂ ¸+ˇ´qù¯z7ﬁmÑÈ°>#‘∑~nãˆˇÂÖª¥ÊÈgÔ ∞öNœÙåFœlªw∏ÿﬁ˝⁄«◊6ªıˆ#F˚ë±©kõp˘Æë[¡ñ˚ì˜&∑	¢gÿıb¿∫⁄·o	"4‚˙Ü0˝≠ñ˝⁄Å´üù`5ΩeŒhô”Çs[L¯~^Pkø˝l	 j¬ç/ı•†Í¬MC∏iÍÃ™¡¨j∏}≥hI‹·*@TöÓ5ië˜ü]Ä⁄•ÀVGgÆÃUçπZdBﬂ¿o€òË ˚˙4ˆ¯É+Æ<ç¨'äﬁˆGó5Ô~h%j z◊5◊gÔYWj)—~˝qW¬ıËr≈ı?÷‘w]E˙£ã}:<Ò˝ = „ ∑¬ùZdf3¿jzx÷œjÃÏóª:‹1vZü®8k˛≈≠yﬁj:ù2ËîFßæ¥›˜ﬁªè:¿SÅ#F‡»˙h±<§X#¿¬@S‰˛⁄ΩµGszSü—‘∑>^7e†	YÛT≈ê‚ã^-"¢ñ\*u"¢ŒH#iåÑ≈~Kü4¬'5Ê‰óÅ÷m¬„û'z¯8ÜàåQœxÎjAmn—~kıëAŒQ» Á(A–E˚ÄNgÔè˛LãNøh`5Ωs∆ËúŸﬂˇf´)Ç"qû¥C[TN∫¥ŸK@ÆgYπQXN·∞úB„–ﬂjÈ÷ˆ|†∑pFßπRx a+>Çf§{ò≤iuñ“.&9r…P[êÌ∑V©5å’∆jS_{w¿Zrqù5ËQç≠8ˆ¯ìQ≠˘∏’t˙ÑAü–Ë;|*<[‘Áû(ˇ4Û4ÚÀÎˇx]—†ÕŒiÕÇ’t:m–içNW(æÛ£5√¬GMßOÙiç>˝»	ÁÔûöøÁ¬æÉ´uß]∫juJ∑ã+–…ê£ËqŒ∫TÊZS¿ÓqdkÄ0Ç†´≈ﬁjﬂ˝£‰Ìá_∂.6∑£÷ﬁm€Gt˘-·ÓˇÅˇ◊A¬◊t?p/†µMÍÃî¡LiÃ$ çÈÇ’øÎ£3÷€Ñ•Ä2(¬Ω˝ÿ˝ì&#rÃàåøåkÅq[P\t!ˇOcˇOcˇóa1¥Î£´è˛d–ÿ}‹ÿäk°x	S€sCõzA‹Ù`÷f5‹j—ŒΩù”BÁ∂B≠˜ì˜PÑÙ^vi…î’±Cê"|I∆+7VV’ˆúñ M^0Ç¥‡ÖrÊj]!2ï	HÏˇ0<4#û«¸Ò^Í˘©}Ò.ÍÛ.7Ù_–ëÒ‚Eè¢ãz=2—F˝[õ˙ˇ|/ ~hªxä˙ıﬁx€≈„î~‹7&«áT•§—˘4ø:uéáPP+õp[ˇ„…ü;
&ktÅﬁ¨|≤c»ÇävTmôJÚOóäZmÄ[)¿€qk?òà≠0Øa¡µv|“†:™ù2∏qŸŒV˛Ü]|j∞ï˝‡ÉêßQÅË*||[Û‹ÒƒL©g+y≥˝§ÈÁ3∏ò¬…´?#L
ù’[.-$?Ã	Ú*ãÍ?ƒˆ{·íìtn©ú*ò.  F©Æ2›©¨g4Tû3›+2ºó¶∑tÓ3›ò®ÈÅc%L7& ü@ì=pxÑóπnt>/J‰#Ë©ø*í|Æ£Yø ∞N†Û@[±9Ú∞˜„ﬁ''ÙÍÕGçÊ£û¢ïÌ‰•eü∏tf¿`4f†xh‡IÓÔ≈MÒA«√ΩÔ’õ_3ö_”ö_{zË_ˇeP:où∑∞aÁˇ´G·çp±©}#TﬁÿÒÓnÅ-&§Ö£õ√ †ÈLü¡ÙiL_±©uC-ˇï“∂ª≠¯bJ‹>6|Ç¯’	ˇH7ı´˜ZF:®ÁnËßÏQS˘î…@Ã=|eå◊∆ Âe[å6éW¯úI6äï’8n—⁄®_;â]Xoƒ&ZØuøZπ·”√ñ⁄±ña]– ±ßé48©„ıÆŒÑıÛ.¨?bΩ÷˝úÿ5≤5˛@G!ãÚt¡>UÇuÎ>'B©÷≥Êæ„ÆÆø˝ê]v&˘ÉhøóÎ(w«¨5®@≈’u≠≈ju—ã"‘cnfxxc≠˘≠"d„2n©†j’dkﬂ±mX{ù-OÃ’B™
/à•aqD≠ı>ƒN‚J*óµ™≈$rÖB≠q)w&[˙Z)√öüg/óñÖPy±$f])ı"Œp%a°ök+l∆Úáú‰p≈“öl'boe†Úmi»Ê]PªÏ˜„î&£Ø;Ú.ﬁD‡$ Ù&∑ºúQÂShgIFñ≤Ÿy.u√D/ìí‹Ôë–√w8ç Œè^KY≈Jê(ÓëaY÷ è°íV÷ñ«‡Ò"¸+>àHë"˘"‘˚2‘´áX#ƒÆü€v›ùËËà_oŒ<ukÌg†ÈÃYÉ9´1gmŸSgÃAç9Xlâ<¸xPoŸo¥Ïﬂôñ/òÆóLóŒtL∑∆tWËçËL‹`‚/6ul„„R%ônÑø˘:@€∑	
ùê  SÎ~…tÎLè¡ÙhLOÖZÚ©†µ'Qõ~ø‘˘¡u´£3ÃÛA˘‚z8Â˙—ÕŒ“Ô0…ﬂø5≤èxæœÔ£ûúäÔß>ﬂÔÜ˛Á}T|Ä¯|†cî§˙…Dø+!¬Ù˛ÄåˆY≥…Ò˘@ÓÜQÂs”ã ®Ñ‡ÉwÒViÇI&Qa'ô¥Ç Ω‚}{F~nøÇ;Ô[ÊÙ≤ƒCÖ‰=˘<å°äÚ◊ ∂)í$ãD´VnE¢C+∑"^«ïŒ∂áwotæ›èNÈæÜÔ¿∫g€?Ií`‰:8ÔÚë∞á’Çé.≤sõxêˇD˙»èÔƒ
--- Content of ./.git/objects/e6/9de29bb2d1d6434b8b29ae775ad8c2e48c5391 ---
xK …OR0`  	∞
--- Content of ./.git/hooks/prepare-commit-msg.sample ---
#!/bin/sh
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

# This hook includes three examples. The first one removes the
# "# Please enter the commit message..." help message.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"

# case "$COMMIT_SOURCE,$SHA1" in
#  ,|template,)
#    /usr/bin/perl -i.bak -pe '
#       print "\n" . `git diff --cached --name-status -r`
# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
#  *) ;;
# esac

# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
# if test -z "$COMMIT_SOURCE"
# then
#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
# fi

--- Content of ./.git/hooks/pre-applypatch.sample ---
#!/bin/sh
#
# An example hook script to verify what is about to be committed
# by applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-applypatch".

. git-sh-setup
precommit="$(git rev-parse --git-path hooks/pre-commit)"
test -x "$precommit" && exec "$precommit" ${1+"$@"}
:

--- Content of ./.git/hooks/post-update.sample ---
#!/bin/sh
#
# An example hook script to prepare a packed repository for use over
# dumb transports.
#
# To enable this hook, rename this file to "post-update".

exec git update-server-info

--- Content of ./.git/hooks/push-to-checkout.sample ---
#!/bin/sh

# An example hook script to update a checked-out tree on a git push.
#
# This hook is invoked by git-receive-pack(1) when it reacts to git
# push and updates reference(s) in its repository, and when the push
# tries to update the branch that is currently checked out and the
# receive.denyCurrentBranch configuration variable is set to
# updateInstead.
#
# By default, such a push is refused if the working tree and the index
# of the remote repository has any difference from the currently
# checked out commit; when both the working tree and the index match
# the current commit, they are updated to match the newly pushed tip
# of the branch. This hook is to be used to override the default
# behaviour; however the code below reimplements the default behaviour
# as a starting point for convenient modification.
#
# The hook receives the commit with which the tip of the current
# branch is going to be updated:
commit=$1

# It can exit with a non-zero status to refuse the push (when it does
# so, it must not modify the index or the working tree).
die () {
	echo >&2 "$*"
	exit 1
}

# Or it can make any necessary changes to the working tree and to the
# index to bring them to the desired state when the tip of the current
# branch is updated to the new commit, and exit with a zero status.
#
# For example, the hook can simply run git read-tree -u -m HEAD "$1"
# in order to emulate git fetch that is run in the reverse direction
# with git push, as the two-tree form of git read-tree -u -m is
# essentially the same as git switch or git checkout that switches
# branches while keeping the local changes in the working tree that do
# not interfere with the difference between the branches.

# The below is a more-or-less exact translation to shell of the C code
# for the default behaviour for git's push-to-checkout hook defined in
# the push_to_deploy() function in builtin/receive-pack.c.
#
# Note that the hook will be executed from the repository directory,
# not from the working tree, so if you want to perform operations on
# the working tree, you will have to adapt your code accordingly, e.g.
# by adding "cd .." or using relative paths.

if ! git update-index -q --ignore-submodules --refresh
then
	die "Up-to-date check failed"
fi

if ! git diff-files --quiet --ignore-submodules --
then
	die "Working directory has unstaged changes"
fi

# This is a rough translation of:
#
#   head_has_history() ? "HEAD" : EMPTY_TREE_SHA1_HEX
if git cat-file -e HEAD 2>/dev/null
then
	head=HEAD
else
	head=$(git hash-object -t tree --stdin </dev/null)
fi

if ! git diff-index --quiet --cached --ignore-submodules $head --
then
	die "Working directory has staged changes"
fi

if ! git read-tree -u -m "$commit"
then
	die "Could not update working tree to new HEAD"
fi

--- Content of ./.git/hooks/pre-push.sample ---
#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')

while read local_ref local_oid remote_ref remote_oid
do
	if test "$local_oid" = "$zero"
	then
		# Handle delete
		:
	else
		if test "$remote_oid" = "$zero"
		then
			# New branch, examine all commits
			range="$local_oid"
		else
			# Update to existing branch, examine new commits
			range="$remote_oid..$local_oid"
		fi

		# Check for WIP commit
		commit=$(git rev-list -n 1 --grep '^WIP' "$range")
		if test -n "$commit"
		then
			echo >&2 "Found WIP commit in $local_ref, not pushing"
			exit 1
		fi
	fi
done

exit 0

--- Content of ./.git/hooks/pre-rebase.sample ---
#!/bin/sh
#
# Copyright (c) 2006, 2008 Junio C Hamano
#
# The "pre-rebase" hook is run just before "git rebase" starts doing
# its job, and can prevent the command from running by exiting with
# non-zero status.
#
# The hook is called with the following parameters:
#
# $1 -- the upstream the series was forked from.
# $2 -- the branch being rebased (or empty when rebasing the current branch).
#
# This sample shows how to prevent topic branches that are already
# merged to 'next' branch from getting rebased, because allowing it
# would result in rebasing already published history.

publish=next
basebranch="$1"
if test "$#" = 2
then
	topic="refs/heads/$2"
else
	topic=`git symbolic-ref HEAD` ||
	exit 0 ;# we do not interrupt rebasing detached HEAD
fi

case "$topic" in
refs/heads/??/*)
	;;
*)
	exit 0 ;# we do not interrupt others.
	;;
esac

# Now we are dealing with a topic branch being rebased
# on top of master.  Is it OK to rebase it?

# Does the topic really exist?
git show-ref -q "$topic" || {
	echo >&2 "No such branch $topic"
	exit 1
}

# Is topic fully merged to master?
not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
if test -z "$not_in_master"
then
	echo >&2 "$topic is fully merged to master; better remove it."
	exit 1 ;# we could allow it, but there is no point.
fi

# Is topic ever merged to next?  If so you should not be rebasing it.
only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
only_next_2=`git rev-list ^master           ${publish} | sort`
if test "$only_next_1" = "$only_next_2"
then
	not_in_topic=`git rev-list "^$topic" master`
	if test -z "$not_in_topic"
	then
		echo >&2 "$topic is already up to date with master"
		exit 1 ;# we could allow it, but there is no point.
	else
		exit 0
	fi
else
	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
	/usr/bin/perl -e '
		my $topic = $ARGV[0];
		my $msg = "* $topic has commits already merged to public branch:\n";
		my (%not_in_next) = map {
			/^([0-9a-f]+) /;
			($1 => 1);
		} split(/\n/, $ARGV[1]);
		for my $elem (map {
				/^([0-9a-f]+) (.*)$/;
				[$1 => $2];
			} split(/\n/, $ARGV[2])) {
			if (!exists $not_in_next{$elem->[0]}) {
				if ($msg) {
					print STDERR $msg;
					undef $msg;
				}
				print STDERR " $elem->[1]\n";
			}
		}
	' "$topic" "$not_in_next" "$not_in_master"
	exit 1
fi

<<\DOC_END

This sample hook safeguards topic branches that have been
published from being rewound.

The workflow assumed here is:

 * Once a topic branch forks from "master", "master" is never
   merged into it again (either directly or indirectly).

 * Once a topic branch is fully cooked and merged into "master",
   it is deleted.  If you need to build on top of it to correct
   earlier mistakes, a new topic branch is created by forking at
   the tip of the "master".  This is not strictly necessary, but
   it makes it easier to keep your history simple.

 * Whenever you need to test or publish your changes to topic
   branches, merge them into "next" branch.

The script, being an example, hardcodes the publish branch name
to be "next", but it is trivial to make it configurable via
$GIT_DIR/config mechanism.

With this workflow, you would want to know:

(1) ... if a topic branch has ever been merged to "next".  Young
    topic branches can have stupid mistakes you would rather
    clean up before publishing, and things that have not been
    merged into other branches can be easily rebased without
    affecting other people.  But once it is published, you would
    not want to rewind it.

(2) ... if a topic branch has been fully merged to "master".
    Then you can delete it.  More importantly, you should not
    build on top of it -- other people may already want to
    change things related to the topic as patches against your
    "master", so if you need further changes, it is better to
    fork the topic (perhaps with the same name) afresh from the
    tip of "master".

Let's look at this example:

		   o---o---o---o---o---o---o---o---o---o "next"
		  /       /           /           /
		 /   a---a---b A     /           /
		/   /               /           /
	       /   /   c---c---c---c B         /
	      /   /   /             \         /
	     /   /   /   b---b C     \       /
	    /   /   /   /             \     /
    ---o---o---o---o---o---o---o---o---o---o---o "master"


A, B and C are topic branches.

 * A has one fix since it was merged up to "next".

 * B has finished.  It has been fully merged up to "master" and "next",
   and is ready to be deleted.

 * C has not merged to "next" at all.

We would want to allow C to be rebased, refuse A, and encourage
B to be deleted.

To compute (1):

	git rev-list ^master ^topic next
	git rev-list ^master        next

	if these match, topic has not merged in next at all.

To compute (2):

	git rev-list master..topic

	if this is empty, it is fully merged to "master".

DOC_END

--- Content of ./.git/hooks/update.sample ---
#!/bin/sh
#
# An example hook script to block unannotated tags from entering.
# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
#
# To enable this hook, rename this file to "update".
#
# Config
# ------
# hooks.allowunannotated
#   This boolean sets whether unannotated tags will be allowed into the
#   repository.  By default they won't be.
# hooks.allowdeletetag
#   This boolean sets whether deleting tags will be allowed in the
#   repository.  By default they won't be.
# hooks.allowmodifytag
#   This boolean sets whether a tag may be modified after creation. By default
#   it won't be.
# hooks.allowdeletebranch
#   This boolean sets whether deleting branches will be allowed in the
#   repository.  By default they won't be.
# hooks.denycreatebranch
#   This boolean sets whether remotely creating branches will be denied
#   in the repository.  By default this is allowed.
#

# --- Command line
refname="$1"
oldrev="$2"
newrev="$3"

# --- Safety check
if [ -z "$GIT_DIR" ]; then
	echo "Don't run this script from the command line." >&2
	echo " (if you want, you could supply GIT_DIR then run" >&2
	echo "  $0 <ref> <oldrev> <newrev>)" >&2
	exit 1
fi

if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
	exit 1
fi

# --- Config
allowunannotated=$(git config --type=bool hooks.allowunannotated)
allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
allowmodifytag=$(git config --type=bool hooks.allowmodifytag)

# check for no description
projectdesc=$(sed -e '1q' "$GIT_DIR/description")
case "$projectdesc" in
"Unnamed repository"* | "")
	echo "*** Project description file hasn't been set" >&2
	exit 1
	;;
esac

# --- Check types
# if $newrev is 0000...0000, it's a commit to delete a ref.
zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
if [ "$newrev" = "$zero" ]; then
	newrev_type=delete
else
	newrev_type=$(git cat-file -t $newrev)
fi

case "$refname","$newrev_type" in
	refs/tags/*,commit)
		# un-annotated tag
		short_refname=${refname##refs/tags/}
		if [ "$allowunannotated" != "true" ]; then
			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
			exit 1
		fi
		;;
	refs/tags/*,delete)
		# delete tag
		if [ "$allowdeletetag" != "true" ]; then
			echo "*** Deleting a tag is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/tags/*,tag)
		# annotated tag
		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
		then
			echo "*** Tag '$refname' already exists." >&2
			echo "*** Modifying a tag is not allowed in this repository." >&2
			exit 1
		fi
		;;
	refs/heads/*,commit)
		# branch
		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
			echo "*** Creating a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/heads/*,delete)
		# delete branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/remotes/*,commit)
		# tracking branch
		;;
	refs/remotes/*,delete)
		# delete tracking branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	*)
		# Anything else (is there anything else?)
		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
		exit 1
		;;
esac

# --- Finished
exit 0

--- Content of ./.git/hooks/pre-receive.sample ---
#!/bin/sh
#
# An example hook script to make use of push options.
# The example simply echoes all push options that start with 'echoback='
# and rejects all pushes when the "reject" push option is used.
#
# To enable this hook, rename this file to "pre-receive".

if test -n "$GIT_PUSH_OPTION_COUNT"
then
	i=0
	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
	do
		eval "value=\$GIT_PUSH_OPTION_$i"
		case "$value" in
		echoback=*)
			echo "echo from the pre-receive-hook: ${value#*=}" >&2
			;;
		reject)
			exit 1
		esac
		i=$((i + 1))
	done
fi

--- Content of ./.git/hooks/pre-merge-commit.sample ---
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git merge" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message to
# stderr if it wants to stop the merge commit.
#
# To enable this hook, rename this file to "pre-merge-commit".

. git-sh-setup
test -x "$GIT_DIR/hooks/pre-commit" &&
        exec "$GIT_DIR/hooks/pre-commit"
:

--- Content of ./.git/hooks/pre-commit.sample ---
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --

--- Content of ./.git/hooks/commit-msg.sample ---
#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

test "" = "$(grep '^Signed-off-by: ' "$1" |
	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
	echo >&2 Duplicate Signed-off-by lines.
	exit 1
}

--- Content of ./.git/hooks/applypatch-msg.sample ---
#!/bin/sh
#
# An example hook script to check the commit log message taken by
# applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.  The hook is
# allowed to edit the commit message file.
#
# To enable this hook, rename this file to "applypatch-msg".

. git-sh-setup
commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
:

--- Content of ./.git/hooks/fsmonitor-watchman.sample ---
#!/usr/bin/perl

use strict;
use warnings;
use IPC::Open2;

# An example hook script to integrate Watchman
# (https://facebook.github.io/watchman/) with git to speed up detecting
# new and modified files.
#
# The hook is passed a version (currently 2) and last update token
# formatted as a string and outputs to stdout a new update token and
# all files that have been modified since the update token. Paths must
# be relative to the root of the working tree and separated by a single NUL.
#
# To enable this hook, rename this file to "query-watchman" and set
# 'git config core.fsmonitor .git/hooks/query-watchman'
#
my ($version, $last_update_token) = @ARGV;

# Uncomment for debugging
# print STDERR "$0 $version $last_update_token\n";

# Check the hook interface version
if ($version ne 2) {
	die "Unsupported query-fsmonitor hook version '$version'.\n" .
	    "Falling back to scanning...\n";
}

my $git_work_tree = get_working_dir();

my $retry = 1;

my $json_pkg;
eval {
	require JSON::XS;
	$json_pkg = "JSON::XS";
	1;
} or do {
	require JSON::PP;
	$json_pkg = "JSON::PP";
};

launch_watchman();

sub launch_watchman {
	my $o = watchman_query();
	if (is_work_tree_watched($o)) {
		output_result($o->{clock}, @{$o->{files}});
	}
}

sub output_result {
	my ($clockid, @files) = @_;

	# Uncomment for debugging watchman output
	# open (my $fh, ">", ".git/watchman-output.out");
	# binmode $fh, ":utf8";
	# print $fh "$clockid\n@files\n";
	# close $fh;

	binmode STDOUT, ":utf8";
	print $clockid;
	print "\0";
	local $, = "\0";
	print @files;
}

sub watchman_clock {
	my $response = qx/watchman clock "$git_work_tree"/;
	die "Failed to get clock id on '$git_work_tree'.\n" .
		"Falling back to scanning...\n" if $? != 0;

	return $json_pkg->new->utf8->decode($response);
}

sub watchman_query {
	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
	or die "open2() failed: $!\n" .
	"Falling back to scanning...\n";

	# In the query expression below we're asking for names of files that
	# changed since $last_update_token but not from the .git folder.
	#
	# To accomplish this, we're using the "since" generator to use the
	# recency index to select candidate nodes and "fields" to limit the
	# output to file names only. Then we're using the "expression" term to
	# further constrain the results.
	my $last_update_line = "";
	if (substr($last_update_token, 0, 1) eq "c") {
		$last_update_token = "\"$last_update_token\"";
		$last_update_line = qq[\n"since": $last_update_token,];
	}
	my $query = <<"	END";
		["query", "$git_work_tree", {$last_update_line
			"fields": ["name"],
			"expression": ["not", ["dirname", ".git"]]
		}]
	END

	# Uncomment for debugging the watchman query
	# open (my $fh, ">", ".git/watchman-query.json");
	# print $fh $query;
	# close $fh;

	print CHLD_IN $query;
	close CHLD_IN;
	my $response = do {local $/; <CHLD_OUT>};

	# Uncomment for debugging the watch response
	# open ($fh, ">", ".git/watchman-response.json");
	# print $fh $response;
	# close $fh;

	die "Watchman: command returned no output.\n" .
	"Falling back to scanning...\n" if $response eq "";
	die "Watchman: command returned invalid output: $response\n" .
	"Falling back to scanning...\n" unless $response =~ /^\{/;

	return $json_pkg->new->utf8->decode($response);
}

sub is_work_tree_watched {
	my ($output) = @_;
	my $error = $output->{error};
	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
		$retry--;
		my $response = qx/watchman watch "$git_work_tree"/;
		die "Failed to make watchman watch '$git_work_tree'.\n" .
		    "Falling back to scanning...\n" if $? != 0;
		$output = $json_pkg->new->utf8->decode($response);
		$error = $output->{error};
		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		# Uncomment for debugging watchman output
		# open (my $fh, ">", ".git/watchman-output.out");
		# close $fh;

		# Watchman will always return all files on the first query so
		# return the fast "everything is dirty" flag to git and do the
		# Watchman query just to get it over with now so we won't pay
		# the cost in git to look up each individual file.
		my $o = watchman_clock();
		$error = $output->{error};

		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		output_result($o->{clock}, ("/"));
		$last_update_token = $o->{clock};

		eval { launch_watchman() };
		return 0;
	}

	die "Watchman: $error.\n" .
	"Falling back to scanning...\n" if $error;

	return 1;
}

sub get_working_dir {
	my $working_dir;
	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
		$working_dir = Win32::GetCwd();
		$working_dir =~ tr/\\/\//;
	} else {
		require Cwd;
		$working_dir = Cwd::cwd();
	}

	return $working_dir;
}

--- Content of ./.git/HEAD ---
ref: refs/heads/main

--- Content of ./.git/logs/refs/heads/main ---
0000000000000000000000000000000000000000 00b4510ff3014e8abf647d09582f16b9eae91450 Robert W Campbell <rwcampbell@d01.rob-campbell.lan> 1752327985 -0400	commit (initial): Initial commit of my project
00b4510ff3014e8abf647d09582f16b9eae91450 00b4510ff3014e8abf647d09582f16b9eae91450 Robert W Campbell <rwcampbell@d01.rob-campbell.lan> 1752328111 -0400	Branch: renamed refs/heads/master to refs/heads/main
00b4510ff3014e8abf647d09582f16b9eae91450 00b4510ff3014e8abf647d09582f16b9eae91450 Robert W Campbell <rwcampbell@d01.rob-campbell.lan> 1752328637 -0400	Branch: renamed refs/heads/main to refs/heads/main
00b4510ff3014e8abf647d09582f16b9eae91450 00b4510ff3014e8abf647d09582f16b9eae91450 Robert W Campbell <rwcampbell@d01.rob-campbell.lan> 1752328747 -0400	Branch: renamed refs/heads/main to refs/heads/main

--- Content of ./.git/logs/refs/remotes/origin/main ---
0000000000000000000000000000000000000000 00b4510ff3014e8abf647d09582f16b9eae91450 Robert W Campbell <rwcampbell@d01.rob-campbell.lan> 1752328753 -0400	update by push

--- Content of ./.git/logs/HEAD ---
0000000000000000000000000000000000000000 00b4510ff3014e8abf647d09582f16b9eae91450 Robert W Campbell <rwcampbell@d01.rob-campbell.lan> 1752327985 -0400	commit (initial): Initial commit of my project
00b4510ff3014e8abf647d09582f16b9eae91450 0000000000000000000000000000000000000000 Robert W Campbell <rwcampbell@d01.rob-campbell.lan> 1752328111 -0400	Branch: renamed refs/heads/master to refs/heads/main
0000000000000000000000000000000000000000 00b4510ff3014e8abf647d09582f16b9eae91450 Robert W Campbell <rwcampbell@d01.rob-campbell.lan> 1752328111 -0400	Branch: renamed refs/heads/master to refs/heads/main
00b4510ff3014e8abf647d09582f16b9eae91450 0000000000000000000000000000000000000000 Robert W Campbell <rwcampbell@d01.rob-campbell.lan> 1752328637 -0400	Branch: renamed refs/heads/main to refs/heads/main
00b4510ff3014e8abf647d09582f16b9eae91450 00b4510ff3014e8abf647d09582f16b9eae91450 Robert W Campbell <rwcampbell@d01.rob-campbell.lan> 1752328637 -0400	Branch: renamed refs/heads/main to refs/heads/main
00b4510ff3014e8abf647d09582f16b9eae91450 0000000000000000000000000000000000000000 Robert W Campbell <rwcampbell@d01.rob-campbell.lan> 1752328747 -0400	Branch: renamed refs/heads/main to refs/heads/main
00b4510ff3014e8abf647d09582f16b9eae91450 00b4510ff3014e8abf647d09582f16b9eae91450 Robert W Campbell <rwcampbell@d01.rob-campbell.lan> 1752328747 -0400	Branch: renamed refs/heads/main to refs/heads/main

--- Content of ./config/media_types.json ---
{
  "Images": [".jpg", ".jpeg", ".png", ".gif", ".bmp", ".tiff", ".tif", ".webp", ".heic", ".raw", ".cr2", ".nef", ".orf", ".sr2", ".arw", ".dng", ".rw2", ".pef"],
  "Videos": [".mp4", ".mov", ".avi", ".mkv", ".flv", ".wmv", ".webm", ".mpeg", ".mpg", ".3gp", ".m4v", ".mts", ".m2ts", ".ts", ".vob", ".divx", ".xvid"],
  "Audio": [".mp3", ".aac", ".wav", ".flac", ".ogg", ".wma", ".m4a", ".aiff", ".alac"],
  "Documents": [".pdf", ".doc", ".docx", ".xls", ".xlsx", ".ppt", ".pptx", ".txt", ".rtf"]
}


--- Content of ./config/metadata_mappings.json ---
{
  "Videos": {
	"FileName": "file_name",
	"Directory": "file_location",
    "CreateDate": "date_taken",
    "ImageSize": "resolution",
    "FileSize": "size",
    "Make": "camera_make",
    "Model": "camera_model",
    "Duration": "duration",
    "FrameRate": "frame_rate",
    "VideoFrameRate": "frame_rate",
    "LightMeter": "light_meter",
    "LensID": "lens_id",
    "LensSpec": "lens_spec",
    "CircleOfConfusion": "circle_of_confusion",
    "Altitude": "altitude",
    "ShutterSpeed": "shutter_speed",
    "Aperture": "aperture",
    "ISO": "iso",
    "Flash": "flash"
  }
}


--- Content of ./db_connection.py ---
import configparser
import mysql.connector
import getpass
import logging # Import logging

# Configure a logger for this module
logger = logging.getLogger(__name__)
# Propagate messages to the root logger configured in processmedia.py
# If you want separate handling, you might add a file handler here.
# For now, it will use the main script's logging configuration.

def connect_to_database(config_file, section=None):
    """
    Connects to a MySQL database using credentials from a configuration file.
    
    Args:
        config_file: Path to the .my.cnf config file.
        section: The section in the config file from which to fetch the connection credentials.
        
    Returns:
        A mysql.connector connection object.
    Raises:
        Exception: If the specified section is not found or connection fails.
    """
    config = configparser.ConfigParser()
    logger.debug(f"db_connection: Attempting to read config from '{config_file}'.")
    try:
        read_files = config.read(config_file)
        if not read_files:
            logger.critical(f"db_connection: Could not read config file '{config_file}'. File might not exist or be accessible.")
            raise FileNotFoundError(f"Config file '{config_file}' not found or readable.")
        logger.debug(f"db_connection: Successfully read config from '{read_files}'. Found sections: {config.sections()}")
    except Exception as e:
        logger.critical(f"db_connection: Error reading config file '{config_file}': {e}")
        raise

    target_section = section if section is not None else 'client' # Default to 'client' if section is None
    if target_section not in config:
        logger.critical(f"db_connection: Section '{target_section}' not found in the config file '{config_file}'. Available sections: {config.sections()}")
        raise Exception(f"Section '{target_section}' not found in the config file.")
    
    db_config = config[target_section]
    logger.debug(f"db_connection: Using database configuration from section '[{target_section}]'.")

    host = db_config.get('host', 'localhost')
    user = db_config.get('user')
    password = db_config.get('password') # The password should be explicitly in .my.cnf
    database = db_config.get('database')

    if not user:
        logger.critical(f"db_connection: User not specified in section '{target_section}' of '{config_file}'.")
        raise Exception("Database user not specified.")

    if not password:
        logger.warning(f"db_connection: Password not found for user '{user}' in section '{target_section}'. Attempting interactive password prompt. THIS WILL HANG IN NON-INTERACTIVE ENVIRONMENTS.")
        try:
            password = getpass.getpass(f"Enter MySQL password for user '{user}': ")
        except Exception as e:
            logger.critical(f"db_connection: Failed to get password interactively: {e}. Ensure password is in config file for automated runs.")
            raise Exception("Failed to get password interactively. Check config or environment.")

    if not database:
        logger.warning(f"db_connection: Database name not specified in section '{target_section}' of '{config_file}'. This might lead to connection issues if no default database is selected.")
        # Connection might still proceed if user has default database privileges, but generally a good idea to specify.

    logger.debug(f"db_connection: Parameters for MySQL connection:")
    logger.debug(f"db_connection:   Host: '{host}'")
    logger.debug(f"db_connection:   User: '{user}'")
    logger.debug(f"db_connection:   Password: {'*' * len(password) if password else 'None'} (masked)")
    logger.debug(f"db_connection:   Database: '{database}'")

    logger.info(f"db_connection: Connecting to MySQL database: user='{user}', host='{host}', database='{database or 'not specified'}'")
    try:
        connection = mysql.connector.connect(
            host=host,
            user=user,
            password=password,
            database=database
        )
        logger.info("db_connection: Successfully established MySQL connection.")
        return connection
    except mysql.connector.Error as err:
        if err.errno == mysql.connector.errorcode.ER_ACCESS_DENIED_ERROR:
            logger.critical("db_connection: MySQL connection error: Access denied. Check username, password, and host permissions for the user.")
        elif err.errno == mysql.connector.errorcode.ER_BAD_DB_ERROR:
            logger.critical(f"db_connection: MySQL connection error: Database '{database}' does not exist.")
        elif err.errno == mysql.connector.errorcode.CR_CONN_HOST_ERROR:
             logger.critical(f"db_connection: MySQL connection error: Cannot connect to host '{host}'. Check host address, port, and firewall rules.")
        else:
            logger.critical(f"db_connection: MySQL connection error: {err}")
        raise # Re-raise the exception for processmedia.py to handle

def safe_query(db_conn, query, params=None, fetch='all'):
    try:
        cursor = db_conn.cursor(dictionary=True)
        cursor.execute(query, params or ())
        result = cursor.fetchone() if fetch == 'one' else cursor.fetchall()
        cursor.close()
        return result
    except Exception as e:
        print(f"safe_query failed: {e}")
        return None

def execute_query(connection, query, params=None):
    """
    Executes a SQL query using the provided connection.
    
    Args:
        connection: The MySQL database connection object.
        query: The SQL query to execute.
        params: Optional parameters for the SQL query.
        
    Returns:
        The query result.
    """
    cursor = connection.cursor()
    try:
        logger.debug(f"db_connection: Executing query: {query}")
        cursor.execute(query, params)
        results = cursor.fetchall()
        connection.commit() # Ensure commits are handled for DML operations if this function is used for them
        logger.debug("db_connection: Query executed successfully.")
        return results
    except Exception as e:
        connection.rollback() # Rollback on error
        logger.error(f"db_connection: Error executing query: {query} with params {params}: {e}")
        raise
    finally:
        cursor.close()

def is_processed(db_conn, file_path):
    try:
        query = "SELECT COUNT(*) FROM {media_type} WHERE file_path = %s"
        cursor.execute(query, (os.path.basename(file_path),))
        with db_conn.cursor(buffered=True) as cursor:
            cursor.execute(query, (file_path,))
            count = cursor.fetchone()[0]
            return count > 0
    except Exception as e:
        print(f"[DB] Failed is_processed check for {file_path}: {e}")
        return False


--- Content of ./processors/processmedia.py ---
from managers.media_manager import parse_metadata
from managers.db_manager import store_metadata
from managers.media_transfer import organize_file
from utils.logger import log_action

def process(file_paths):
    for path in file_paths:
        metadata = parse_metadata(path)
        store_metadata(metadata)
        organize_file(path, metadata)
        log_action(f"Processed: {path}")


--- Content of ./managers/db_manager.py ---
from db_connection import execute_query

def get_media_id_by_filename(db_conn, filename, media_type, logger):
    table = "Photos" if media_type == "Photos" else "Videos"
    query = f"SELECT id FROM {table} WHERE file_name = %s"
    logger.debug(f"Querying {table} for filename: {filename}")
    result = execute_query(db_conn, query, (filename,))
    return result[0][0] if result else None

def update_media_date_taken(db_conn, media_id, new_datetime, media_type, logger):
    table = "Photos" if media_type == "Photos" else "Videos"
    query = f"UPDATE {table} SET date_taken = %s WHERE id = %s"
    logger.debug(f"Executing SQL: {query} with params=({new_datetime}, {media_id})")
    try:
        execute_query(db_conn, query, (new_datetime, media_id))
        logger.info(f"Updated {media_type} ID {media_id} with date_taken={new_datetime}")
    except Exception as e:
        logger.error(f"Update failed for {media_type} ID {media_id}: {e}")


--- Content of ./managers/media_transfer.py ---
import os
import shutil
import logging
from pathlib import Path

def transfer_files(sources, target, dry_run=False, remove_sources=False):
    target = Path(target).expanduser()
    os.makedirs(target, exist_ok=True)

    for source in sources:
        source_path = Path(source).expanduser()
        if not source_path.exists():
            logging.warning(f"Source path {source_path} does not exist.")
            continue

        for root, _, files in os.walk(source_path):
            for name in files:
                src = Path(root) / name
                dst = target / name

                prefix = "DRY_RUN: " if dry_run else ""
                logging.info(f"{prefix}Transfer {src} -> {dst}")

                if not dry_run:
                    shutil.copy2(src, dst)
                    if remove_sources:
                        try:
                            os.remove(src)
                            logging.info(f"Removed source file: {src}")
                        except Exception as e:
                            logging.error(f"Failed to remove source file {src}: {e}")
                elif remove_sources:
                    logging.info(f"DRY_RUN: Would remove {src}")



--- Content of ./managers/__init__.py ---

--- Content of ./managers/media_manager.py ---
# managers/media_manager.py

import argparse
import sys
import os
import subprocess
import json
from pathlib import Path
from datetime import datetime
import logging
from app_utils import setup_logging, app_failed, load_media_types, load_metadata_mappings
from metadata_parser import select_oldest_datetime
from db_connection import connect_to_database
import re
from utils.media_utils import (
    get_existing_media_record,
    insert_new_media_record,
    update_missing_media_fields
)
from utils.file_mover import move_file
from utils.file_mover import process_sources

if media_type == "Videos":
    if is_tiktok(file_path):
        move_file(file_path, local_tiktok_dir, dry_run)
        move_file(file_path, remote_tiktok_dir, dry_run)
    elif "Novatek" in file_path:
        move_file(file_path, local_dashcam_dir, dry_run)
        move_file(file_path, remote_dashcam_dir, dry_run)
    else:
        move_file(file_path, local_videos_dir, dry_run)
        move_file(file_path, remote_videos_dir, dry_run)

sys.path.append(str(Path(__file__).resolve().parent.parent))

EXT_MAP = load_media_types()
IMAGE_EXTS = set(EXT_MAP.get("Photos", []))
VIDEO_EXTS = set(EXT_MAP.get("Videos", []))
AUDIO_EXTS = set(EXT_MAP.get("Audio", []))
DOCUMENT_EXTS = set(EXT_MAP.get("Documents", []))

MAPPINGS = load_metadata_mappings()

USER_HOME = Path.home()
LOCAL_MEDIA_ROOT = USER_HOME / "Videos"
REMOTE_MEDIA_ROOT = "/multimedia"

local_photos_dir = USER_HOME / "Pictures"
local_videos_dir = LOCAL_MEDIA_ROOT
local_dashcam_dir = LOCAL_MEDIA_ROOT / "DC"
local_tiktok_dir = LOCAL_MEDIA_ROOT / "TikTok"

remote_photos_dir = Path(REMOTE_MEDIA_ROOT) / "photos"
remote_videos_dir = Path(REMOTE_MEDIA_ROOT) / "videos"
remote_dashcam_dir = remote_videos_dir / "DC"
remote_tiktok_dir = remote_videos_dir / "TikTok"

def get_exiftool_data(file_path, logger):
    command = ["exiftool", "-j", file_path]
    logger.debug(f"Running command: {' '.join(command)}")
    try:
        result = subprocess.run(command, capture_output=True, text=True, check=True)
        metadata = json.loads(result.stdout)[0]
        logger.debug(f"Raw ExifTool metadata: {metadata}")
        return metadata
    except Exception as e:
        logger.warning(f"ExifTool failed for {file_path}: {e}")
        return {}

"""
def update_media_record(db_conn, media_id, metadata, media_type, logger, dry_run=False):
    if not metadata:
        logger.debug(f"No metadata to update for {media_id}")
        return

    # Determine valid fields (assume DB columns match ExifTool keys in snake_case)
    columns = []
    values = []

    for key, value in metadata.items():
        # Skip complex/nested fields or nulls
        if isinstance(value, (list, dict)) or value in ("", None):
            continue

        # Convert ExifTool keys like "CreateDate" to "create_date"
        column_name = re.sub(r'(?<!^)(?=[A-Z])', '_', key).lower()

        if column_name == "source_file":
            continue  # skip filename

        columns.append(column_name)
        values.append(value)

    if not columns:
        logger.debug(f"No updatable metadata fields found for ID {media_id}")
        return

    set_clause = ", ".join([f"{col} = %s" for col in columns])
    query = f"UPDATE {media_type} SET {set_clause} WHERE id = %s"
    values.append(media_id)

    logger.debug(f"SQL UPDATE: {query}")
    logger.debug(f"Values: {values}")

    if dry_run:
        logger.info(f"DRY_RUN: Would update {media_type} ID {media_id} with metadata")
    else:
        try:
            execute_query(db_conn, query, tuple(values))
            logger.info(f"Updated {media_type} ID {media_id} with {len(columns)} metadata fields")
        except Exception as e:
            logger.error(f"Failed to update ID {media_id}: {e}")
"""

def list_valid_files(root_dir, extensions, logger):
    for root, _, files in os.walk(root_dir):
        logger.debug(f"Scanning: {root}")
        for file in files:
            ext = os.path.splitext(file)[1].lower()
            if ext in extensions:
                yield os.path.join(root, file)
            else:
                logger.debug(f"Skipping unsupported: {file}")

def process_media_files(logger, source_dirs, valid_exts, db_conn,
                        dry_run=False, debug=False, verbose=False, media_type="Videos"):

    if dry_run:
        debug = verbose = True

    media_files = [fp for d in source_dirs for fp in list_valid_files(d, valid_exts, logger)]
    total_files = len(media_files)
    logger.info(f"[{media_type}] Total files: {total_files}")

    updated = skipped = inserted = unmatched = 0
    batch_limit = 10
    insert_batch = []
    update_batch = []

    for idx, file_path in enumerate(media_files, 1):
        if is_processed(db_conn, file_path):
            logger.debug(f"{file_path} already processed. Skipping.")
            skipped += 1
            continue

        prefix = f"[{media_type}] [{idx}/{total_files}]"
        logger.info(f"{prefix} Processing: {file_path}" if verbose else f"{prefix}")

        file_name = os.path.basename(file_path)
        metadata = get_exiftool_data(file_path, logger)

        if "CreateDate" not in metadata:
            fallback_dt = select_oldest_datetime({}, logger, filename=file_name)
            if fallback_dt:
                metadata["CreateDate"] = fallback_dt.strftime("%Y:%m:%d %H:%M:%S")
                logger.debug(f"Using fallback datetime: {metadata['CreateDate']}")
                logger.debug("Running fallback datetime parser, not using execute_query")
                logger.debug(f"select_oldest_datetime received: {file_name}")

        if not db_conn:
            logger.info(f"DRY_RUN: Would process metadata for {file_name}")
            skipped += 1
            continue

        logger.debug(f"Checking DB for existing record: {file_name}")
        existing = get_existing_media_record(db_conn, file_name, media_type, logger)
        if existing:
            logger.debug(f"Found existing record for {file_name}, queuing update")
            update_batch.append((file_path, existing["id"], metadata, existing))
        else:
            logger.debug(f"No existing record found for {file_name}, queuing insert")
            insert_batch.append((file_path, metadata))

        # Batch flush
        if len(insert_batch) >= batch_limit:
            for file_path, record in insert_batch:
                insert_new_media_record(db_conn, record, media_type, logger, dry_run, file_path=file_path)
                inserted += 1
            insert_batch.clear()

        if len(update_batch) >= batch_limit:
            for file_path, media_id, record, existing_row in update_batch:
                update_missing_media_fields(db_conn, media_id, record, existing_row, media_type, logger, dry_run, file_path=file_path)
                updated += 1
            update_batch.clear()

    # Final flush
    for file_path, record in insert_batch:
        insert_new_media_record(db_conn, record, media_type, logger, dry_run, file_path=file_path)
        inserted += 1

    for file_path, media_id, record, existing_row in update_batch:
        update_missing_media_fields(db_conn, media_id, record, existing_row, media_type, logger, dry_run, file_path=file_path)
        updated += 1

    logger.info(f"[{media_type}] Summary: scanned={total_files}, inserted={inserted}, updated={updated}, skipped={skipped}, unmatched={unmatched}")

def handle_media(logger, media_type, source_dirs, ext_set,
                 dry_run=False, debug=False, verbose=False,
                 config_file=None, config_section=None):

    logger.info(f"Handling {media_type} files...")
    db_conn = None if dry_run else connect_to_database(config_file, config_section)
    process_media_files(logger, source_dirs, ext_set, db_conn,
                        dry_run=dry_run, debug=debug, verbose=verbose,
                        media_type=media_type)

def main():
    parser = argparse.ArgumentParser(description="Unified Media Manager")
    parser.add_argument("--videos", action="store_true", help="Process video files")
    parser.add_argument("--photos", action="store_true", help="Process photo files")
    parser.add_argument("--all", action="store_true", help="Process all media types")
    parser.add_argument("--dry-run", action="store_true", help="Simulate actions without writing to DB or moving files")
    parser.add_argument("--verbose", action="store_true", help="Enable verbose output")
    parser.add_argument("--debug", action="store_true", help="Enable debug logging")
    parser.add_argument("--move-only", action="store_true", help="Only move files, skip database ingest entirely")
    parser.add_argument("--sources", nargs="+", help="Specify one or more source directories to move files from")
    parser.add_argument("--target", choices=["local", "remote", "both"], default="local", help="Where to move files")
    args = parser.parse_args()

    # Initialize logging
    logger = setup_logging("media_manager")
    debug = args.debug or args.dry_run
    verbose = args.verbose or args.dry_run
    if debug:
        logger.setLevel(logging.DEBUG)

    config_file = os.path.expanduser("~/.my.cnf")
    config_section = "media"
    db_conn = None if args.dry_run else connect_to_database(config_file, config_section)

    # MOVE-ONLY mode
    if args.move_only:
        print("\nüîÑ Move-only mode activated.")
        from utils.file_mover import pick_sources_interactively, process_sources
        sources = args.sources or pick_sources_interactively()
        if not sources:
            print("No sources selected. Exiting.")
            sys.exit(0)

        process_sources(
            sources=sources,
            mode=args.target,
            dry_run=args.dry_run,
            verbose=verbose,
            debug=debug,
            db_conn=db_conn
        )
        sys.exit(0)

    # Full media ingest mode
    try:
        if args.all or args.videos:
            handle_media(logger, "Videos",
                         ["/multimedia/Videos", "/multimedia/Home_Videos", "/multimedia/TikTok"],
                         VIDEO_EXTS,
                         dry_run=args.dry_run,
                         debug=debug,
                         verbose=verbose,
                         config_file=config_file,
                         config_section=config_section)

        if args.all or args.photos:
            handle_media(logger, "Photos",
                         ["/multimedia/Photos"],
                         IMAGE_EXTS,
                         dry_run=args.dry_run,
                         debug=debug,
                         verbose=verbose,
                         config_file=config_file,
                         config_section=config_section)

    except Exception as e:
        app_failed("media_manager", f"Fatal error: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()



--- Content of ./app_utils.py ---
import logging
import os
import sys
from datetime import datetime
import json

def setup_logging(app_name):
    logger = logging.getLogger(app_name)
    logger.setLevel(logging.DEBUG)

    date_str = datetime.now().strftime("%Y-%m-%d")
    log_dir = os.path.expanduser("~/Dropbox/Documents/Logs/")
    os.makedirs(log_dir, exist_ok=True)
    log_file = os.path.join(log_dir, f"{app_name}_{date_str}.log")

    stream_handler = logging.StreamHandler(sys.stdout)
    stream_handler.setLevel(logging.DEBUG)
    stream_handler.setFormatter(logging.Formatter('%(levelname)s - %(message)s'))

    file_handler = logging.FileHandler(log_file)
    file_handler.setLevel(logging.DEBUG)
    file_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))

    logger.addHandler(stream_handler)
    logger.addHandler(file_handler)
    logger.propagate = False
    return logger

def app_failed(app_name, message):
    logging.getLogger(app_name).error(f"{app_name.upper()} ERROR: {message}")

def load_media_types(config_path="config/media_types.json"):
    try:
        with open(config_path, "r") as f:
            return json.load(f)
    except Exception as e:
        logging.warning(f"Failed to load media types from {config_path}: {e}")
        return {}

def load_metadata_mappings(path="config/metadata_mappings.json"):
    try:
        with open(path, "r") as f:
            return json.load(f)
    except Exception as e:
        logging.warning(f"Could not load metadata mappings: {e}")
        return {}


--- Content of ./old-processmedia.txt ---
import os
import json
from PIL import Image, ExifTags
from datetime import datetime, timedelta # Import timedelta
from tqdm import tqdm
import subprocess
import argparse # For command-line arguments to specify config file
import sys # For exiting on critical errors
import logging # For logging progress and debugging information
import time # For rate limiting API calls
import requests # For making HTTP requests to Nominatim
import mysql.connector # ADD THIS LINE
import shlex

# Import your custom database connection module
try:
    import db_connection
except ImportError:
    print("Error: db_connection.py module not found. Make sure it's in the same directory or in your Python path.")
    sys.exit(1)

# --- Configuration ---
PHOTO_DIR = '/multimedia/Photos'
VIDEO_DIR = '/multimedia/Videos'
GOOGLE_TAKEOUT_ROOT_DIR = '/home/rwcampbell/Dropbox/Backup/Takeout/Google Photos' # IMPORTANT: Change this!

# Define media file extensions as sets for efficient lookup
# Added missing extensions: .nef, .raw, .dng (images), .mpg, .mpeg, .asf, .3gp (videos)
IMAGE_EXTENSIONS = {'.jpg', '.jpeg', '.png', '.gif', '.tif', '.tiff', '.heic', '.webp', '.nef', '.raw', '.dng'}
VIDEO_EXTENSIONS = {'.mp4', '.mov', '.avi', '.mkv', '.webm', '.mpg', '.mpeg', '.asf', '.3gp', '.mkv'}
ALL_MEDIA_EXTENSIONS = IMAGE_EXTENSIONS.union(VIDEO_EXTENSIONS) # Union for comprehensive scanning

# Nominatim API configuration
NOMINATIM_API_URL = "https://nominatim.openstreetmap.org/reverse"
NOMINATIM_USER_AGENT = "processmedia.py/1.0 (robcampbell08105@gmail.com)" # IMPORTANT: Replace with your actual email
NOMINATIM_DELAY_SECONDS = 1.1 # Minimum 1 second delay between requests as per Nominatim policy

# Configure logging
# Default level will be INFO, can be changed via command line args
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# --- Database Functions ---
# Modified to use the imported db_connection module
def connect_db(config_file, db_section=None):
    """
    Establishes a connection to the MySQL database.
    Args:
        config_file (str): Path to the MySQL .cnf configuration file.
        db_section (str, optional): Section in the .cnf file to use. Defaults to None.
    Returns:
        mysql.connector.connection.MySQLConnection: The database connection object.
    """
    try:
        # Dynamically adjust the section name if it's 'media' and you're using 'client-media' in .my.cnf
        # This makes the --section media argument work with [client-media]
        actual_db_section = db_section
        if db_section == 'media':
            actual_db_section = 'client-media'
            logger.debug(f"Adjusted database section from '{db_section}' to '{actual_db_section}' for .my.cnf compatibility.")

        # CALLING db_connection.connect_to_database WITH ONLY 2 ARGUMENTS
        conn = db_connection.connect_to_database(config_file, section=actual_db_section)
        logger.info("Successfully connected to the MySQL database.")
        return conn
    except Exception as e:
        logger.critical(f"Error connecting to MySQL database using {config_file} (section: {db_section}): {e}")
        sys.exit(1)

def create_tables_if_not_exists(conn):
    """
    Creates necessary tables in the database if they do not already exist.
    Args:
        conn (mysql.connector.connection.MySQLConnection): The database connection object.
    """
    cursor = conn.cursor() # Default cursor is fine for DDL
    tables = [
        """
        CREATE TABLE IF NOT EXISTS faces (
            id INT AUTO_INCREMENT PRIMARY KEY,
            name VARCHAR(255) UNIQUE
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
        """,
        # Removed the 'images' table creation due to "Specified key was too long" error and potential redundancy.
        # Images are now handled directly by the 'Photos' table.
        """
        CREATE TABLE IF NOT EXISTS MediaProcessing (
            id INT AUTO_INCREMENT PRIMARY KEY,
            file_path VARCHAR(2048), -- Changed from UNIQUE to allow longer paths; uniqueness handled with index below
            processed TINYINT(1) DEFAULT 0,
            processed_at DATETIME,
            UNIQUE KEY idx_unique_file_path (file_path(767)) -- Use prefix index for long VARCHAR unique key
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
        """,
        """
        CREATE TABLE IF NOT EXISTS People (
            id INT AUTO_INCREMENT PRIMARY KEY,
            person_name VARCHAR(255) UNIQUE
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
        """,
        """
        CREATE TABLE IF NOT EXISTS Photos (
            id INT AUTO_INCREMENT PRIMARY KEY,
            file_name VARCHAR(255),
            file_location VARCHAR(2048),
            resolution VARCHAR(50),
            size BIGINT,
            latitude DOUBLE,
            longitude DOUBLE,
            altitude DOUBLE,
            date_taken DATETIME,
            camera_make VARCHAR(255),
            camera_model VARCHAR(255),
            shutter_speed VARCHAR(50),
            aperture VARCHAR(50),
            iso VARCHAR(50),
            flash TINYINT(1),
            light_meter VARCHAR(50),
            lens_id VARCHAR(255),
            lens_spec VARCHAR(255),
            circle_of_confusion VARCHAR(50)
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
        """,
        """
        CREATE TABLE IF NOT EXISTS photo_faces (
            photo_id INT,
            face_id INT,
            PRIMARY KEY (photo_id, face_id),
            FOREIGN KEY (photo_id) REFERENCES Photos(id) ON DELETE CASCADE,
            FOREIGN KEY (face_id) REFERENCES faces(id) ON DELETE CASCADE
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
        """,
        """
        CREATE TABLE IF NOT EXISTS Places (
            id INT AUTO_INCREMENT PRIMARY KEY,
            osm_id BIGINT UNIQUE,           -- OpenStreetMap ID for the place
            osm_type VARCHAR(50),           -- e.g., 'node', 'way', 'relation'
            display_name TEXT,              -- Full human-readable address
            city VARCHAR(255),
            state VARCHAR(255),
            country VARCHAR(255),
            latitude DOUBLE,
            longitude DOUBLE
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
        """,
        """
        CREATE TABLE IF NOT EXISTS photo_places (
            photo_id INT,
            place_id INT,
            PRIMARY KEY (photo_id, place_id),
            FOREIGN KEY (photo_id) REFERENCES Photos(id) ON DELETE CASCADE,
            FOREIGN KEY (place_id) REFERENCES Places(id) ON DELETE CASCADE
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
        """,
        """
        CREATE TABLE IF NOT EXISTS Videos (
            id INT AUTO_INCREMENT PRIMARY KEY,
            file_name VARCHAR(255),
            file_location VARCHAR(2048),
            resolution VARCHAR(50),
            size BIGINT,
            latitude DOUBLE,
            longitude DOUBLE,
            date_taken DATETIME,
            camera_make VARCHAR(255),
            camera_model VARCHAR(255),
            duration DOUBLE,
            frame_rate DOUBLE,
            light_meter VARCHAR(50),
            lens_id VARCHAR(255),
            lens_spec VARCHAR(255),
            circle_of_confusion VARCHAR(50),
            altitude DOUBLE,
            shutter_speed VARCHAR(50),
            aperture VARCHAR(50),
            iso VARCHAR(50),
            flash TINYINT(1)
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
        """,
        """
        CREATE TABLE IF NOT EXISTS video_places (
            video_id INT,
            place_id INT,
            PRIMARY KEY (video_id, place_id),
            FOREIGN KEY (video_id) REFERENCES Videos(id) ON DELETE CASCADE,
            FOREIGN KEY (place_id) REFERENCES Places(id) ON DELETE CASCADE
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
        """,
        """
        CREATE TABLE IF NOT EXISTS GeocodingCache (
            latitude DOUBLE,
            longitude DOUBLE,
            osm_id BIGINT,
            display_name TEXT,
            geocoded_at DATETIME,
            PRIMARY KEY (latitude, longitude)
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
        """
    ]
    for query in tables:
        try:
            cursor.execute(query)
            conn.commit()
            logger.debug(f"Table created/checked: {query.splitlines()[0].strip()}")
        except Exception as e: # Catch all exceptions from mysql.connector
            logger.error(f"Error creating table: {e}\nQuery: {query}")
            # Consider exiting or handling more gracefully depending on severity
    cursor.close()
    logger.info("Database tables checked/created.")

def mark_as_processed(conn, file_path):
    """
    Marks a given file path as processed in the MediaProcessing table.
    Args:
        conn (mysql.connector.connection.MySQLConnection): The database connection object.
        file_path (str): The path of the file to mark.
    """
    cursor = conn.cursor()
    try:
        cursor.execute("""
            INSERT INTO MediaProcessing (file_path, processed, processed_at)
            VALUES (%s, %s, %s)
            ON DUPLICATE KEY UPDATE processed = VALUES(processed), processed_at = VALUES(processed_at)
        """, (file_path, True, datetime.now())) # Use datetime object directly for DATETIME columns
        conn.commit()
        logger.debug(f"Marked {file_path} as processed.")
    except Exception as e: # Catch all exceptions from mysql.connector
        conn.rollback()
        logger.error(f"Error marking {file_path} as processed: {e}")
    finally:
        cursor.close()

def is_processed(conn, file_path):
    """
    Checks if a given file path has already been processed.
    Args:
        conn (mysql.connector.connection.MySQLConnection): The database connection object.
        file_path (str): The path of the file to check.
    Returns:
        bool: True if the file is marked as processed, False otherwise.
    """
    cursor = conn.cursor(dictionary=True) # Use dictionary=True for dict-like rows
    try:
        # Use a prefix of the file_path for checking the index
        # Ensure consistency with how the UNIQUE index is defined in create_tables_if_not_exists
        cursor.execute("SELECT processed FROM MediaProcessing WHERE file_path = %s", (file_path,))
        result = cursor.fetchone()
        return result and result['processed']
    except Exception as e:
        logger.error(f"Error checking processing status for {file_path}: {e}")
        return False # Assume not processed on error
    finally:
        cursor.close()

def get_or_create_face_id(conn, face_name):
    """
    Retrieves the ID for a given face name from the 'faces' table, or creates a new entry if it doesn't exist.
    Args:
        conn (mysql.connector.connection.MySQLConnection): The database connection object.
        face_name (str): The name of the face.
    Returns:
        int: The ID of the face in the 'faces' table.
    Raises:
        Exception: If there's a persistent error in getting or creating the face ID.
    """
    cursor = conn.cursor(dictionary=True) # Use dictionary=True for dict-like rows
    try:
        cursor.execute("SELECT id FROM faces WHERE name = %s", (face_name,))
        result = cursor.fetchone()
        if result:
            logger.debug(f"Found existing face ID {result['id']} for '{face_name}'.")
            return result['id']
        else:
            try:
                cursor.execute("INSERT INTO faces (name) VALUES (%s)", (face_name,))
                conn.commit()
                logger.debug(f"Created new face ID {cursor.lastrowid} for '{face_name}'.")
                return cursor.lastrowid
            except mysql.connector.IntegrityError as e: # <--- CHANGE THIS LINE
                # Handle race condition/unique constraint violation
                conn.rollback() # Rollback the failed insert
                logger.warning(f"Race condition or integrity error when inserting face '{face_name}': {e}. Retrying select.")
                cursor.execute("SELECT id FROM faces WHERE name = %s", (face_name,))
                result = cursor.fetchone()
                if result:
                    return result['id']
                else:
                    logger.error(f"Failed to get or create face ID for '{face_name}' after retry.")
                    raise # Re-raise if still no ID, indicating a deeper issue
            except Exception as e: # Catch other potential errors during insert
                conn.rollback()
                logger.error(f"Unexpected error during face insert for '{face_name}': {e}")
                raise
    except Exception as e: # Catch all exceptions from mysql.connector
        conn.rollback()
        logger.error(f"Error in get_or_create_face_id for {face_name}: {e}")
        raise # Re-raise to propagate the error
    finally:
        cursor.close()

# --- Metadata Extraction Functions (Identical to previous, as they don't touch DB) ---
def get_exif_data(image_path):
    """Extracts EXIF data from an image using Pillow."""
    try:
        img = Image.open(image_path)
        exif_data = {}
        if hasattr(img, '_getexif') and img._getexif():
            for tag, value in img._getexif().items():
                decoded = ExifTags.TAGS.get(tag, tag)
                exif_data[decoded] = value
        logger.debug(f"Extracted Pillow EXIF data from {image_path}.")
        return exif_data
    except Exception as e:
        logger.debug(f"Error reading EXIF from {image_path} with Pillow: {e}")
        return {}

def get_exiftool_data(file_path):
    """Extracts all metadata using exiftool."""
    try:
        cmd = ['exiftool', '-j', '-n', file_path] # -n for numerical values for GPS
        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
        data = json.loads(result.stdout)
        if data:
            logger.debug(f"Extracted ExifTool data from {file_path}.")
            return data[0]
        logger.debug(f"No ExifTool data found for {file_path}.")
        return {}
    except subprocess.CalledProcessError as e:
        logger.error(f"Error running exiftool on {file_path}: {e.stderr}")
        return {}
    except json.JSONDecodeError as e:
        logger.error(f"Error decoding exiftool JSON output for {file_path}: {e}")
        return {}
    except Exception as e:
        logger.error(f"Unexpected error with exiftool for {file_path}: {e}")
        return {}

def process_image(conn, file_path):
    """
    Processes a single image file, extracts its metadata, and stores/updates it in the 'Photos' table.
    Args:
        conn (mysql.connector.connection.MySQLConnection): The database connection object.
        file_path (str): The path to the image file.
    Returns:
        int or None: The ID of the photo in the database, or None if processing failed.
    """
    if is_processed(conn, file_path):
        logger.debug(f"Image {file_path} already processed. Skipping.")
        return

    logger.info(f"Processing image: {file_path}")
    file_name = os.path.basename(file_path)
    file_location = os.path.dirname(file_path)

    metadata = get_exiftool_data(file_path)

    # --- FIX for TypeError: argument of type 'int' is not iterable ---
    # Handle cases where 'Flash' might be an int or a string
    flash_status = metadata.get('Flash')
    flash_int = 0 # Default to 0 (off)
    if flash_status is not None:
        if isinstance(flash_status, str):
            if 'On' in flash_status: # e.g., 'On', 'On (Auto)'
                flash_int = 1
        elif isinstance(flash_status, (int, float)):
            if flash_status > 0: # ExifTool might return 0 for off, >0 for on
                flash_int = 1
    # --- END FIX ---

    # Convert date string to datetime object if possible
    date_taken_str = metadata.get('DateTimeOriginal') or metadata.get('CreateDate') or metadata.get('FileCreateDate')
    date_taken_dt = None
    if date_taken_str:
        try:
            # Common EXIF date format: "YYYY:MM:DD HH:MM:SS"
            date_taken_dt = datetime.strptime(date_taken_str, '%Y:%m:%d %H:%M:%S')
        except ValueError:
            logger.debug(f"Could not parse date '{date_taken_str}' for {file_path}. Keeping as None.")
            pass # Try other common formats if needed, or leave as None


    photo_data = {
        'file_name': file_name,
        'file_location': file_location,
        'resolution': f"{metadata.get('ImageWidth')}x{metadata.get('ImageHeight')}" if metadata.get('ImageWidth') and metadata.get('ImageHeight') else None,
        'size': os.path.getsize(file_path),
        'latitude': metadata.get('GPSLatitude'),
        'longitude': metadata.get('GPSLongitude'),
        'altitude': metadata.get('GPSAltitude'),
        'date_taken': date_taken_dt, # Pass datetime object directly
        'camera_make': metadata.get('Make'),
        'camera_model': metadata.get('Model'),
        'shutter_speed': str(metadata.get('ShutterSpeedValue') or metadata.get('ExposureTime')) if metadata.get('ShutterSpeedValue') or metadata.get('ExposureTime') else None,
        'aperture': str(metadata.get('FNumber') or metadata.get('ApertureValue')) if metadata.get('FNumber') or metadata.get('ApertureValue') else None,
        'iso': str(metadata.get('ISO')) if metadata.get('ISO') else None,
        'flash': flash_int,
        'light_meter': metadata.get('MeteringMode'),
        'lens_id': metadata.get('LensID'),
        'lens_spec': metadata.get('Lens'),
        'circle_of_confusion': None
    }

    cursor = conn.cursor(dictionary=True) # Use dictionary=True for dict-like rows
    try:
        cursor.execute("SELECT id FROM Photos WHERE file_location = %s AND file_name = %s", (file_location, file_name))
        photo_id_row = cursor.fetchone()

        if photo_id_row:
            photo_id = photo_id_row['id']
            update_query = """
                UPDATE Photos SET
                    resolution = %s, size = %s, latitude = %s, longitude = %s, altitude = %s,
                    date_taken = %s, camera_make = %s, camera_model = %s, shutter_speed = %s,
                    aperture = %s, iso = %s, flash = %s, light_meter = %s, lens_id = %s,
                    lens_spec = %s, circle_of_confusion = %s
                WHERE id = %s
            """
            cursor.execute(update_query, (
                photo_data['resolution'], photo_data['size'], photo_data['latitude'], photo_data['longitude'], photo_data['altitude'],
                photo_data['date_taken'], photo_data['camera_make'], photo_data['camera_model'], photo_data['shutter_speed'],
                photo_data['aperture'], photo_data['iso'], photo_data['flash'], photo_data['light_meter'], photo_data['lens_id'],
                photo_data['lens_spec'], photo_data['circle_of_confusion'], photo_id
            ))
            logger.debug(f"Updated photo record for {file_name} (ID: {photo_id}).")
        else:
            insert_query = """
                INSERT INTO Photos (
                    file_name, file_location, resolution, size, latitude, longitude, altitude,
                    date_taken, camera_make, camera_model, shutter_speed, aperture, iso,
                    flash, light_meter, lens_id, lens_spec, circle_of_confusion
                ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
            """
            cursor.execute(insert_query, (
                photo_data['file_name'], photo_data['file_location'], photo_data['resolution'], photo_data['size'],
                photo_data['latitude'], photo_data['longitude'], photo_data['altitude'], photo_data['date_taken'],
                photo_data['camera_make'], photo_data['camera_model'], photo_data['shutter_speed'], photo_data['aperture'],
                photo_data['iso'], photo_data['flash'], photo_data['light_meter'], photo_data['lens_id'],
                photo_data['lens_spec'], photo_data['circle_of_confusion']
            ))
            photo_id = cursor.lastrowid
            logger.debug(f"Inserted new photo record for {file_name} (ID: {photo_id}).")
        conn.commit()
        mark_as_processed(conn, file_path)
        return photo_id
    except Exception as e: # Catch all exceptions from mysql.connector
        conn.rollback() # Rollback on error
        logger.error(f"Error processing image {file_path}: {e}")
        return None
    finally:
        cursor.close()

def process_video(conn, file_path):
    """
    Processes a single video file, extracts its metadata, and stores/updates it in the 'Videos' table.
    Args:
        conn (mysql.connector.connection.MySQLConnection): The database connection object.
        file_path (str): The path to the video file.
    Returns:
        int or None: The ID of the video in the database, or None if processing failed.
    """
    if is_processed(conn, file_path):
        logger.debug(f"Video {file_path} already processed. Skipping.")
        return

    logger.info(f"Processing video: {file_path}")
    file_name = os.path.basename(file_path)
    file_location = os.path.dirname(file_path)

    metadata = get_exiftool_data(file_path)

    # --- FIX for TypeError: argument of type 'int' is not iterable ---
    # Handle cases where 'Flash' might be an int or a string
    flash_status = metadata.get('Flash')
    flash_int = 0 # Default to 0 (off)
    if flash_status is not None:
        if isinstance(flash_status, str):
            if 'On' in flash_status: # e.g., 'On', 'On (Auto)'
                flash_int = 1
        elif isinstance(flash_status, (int, float)):
            if flash_status > 0: # ExifTool might return 0 for off, >0 for on
                flash_int = 1
    # --- END FIX ---

    # Convert date string to datetime object if possible
    date_taken_str = metadata.get('CreationDate') or metadata.get('MediaCreateDate') or metadata.get('FileCreateDate')
    date_taken_dt = None
    if date_taken_str:
        try:
            date_taken_dt = datetime.strptime(date_taken_str, '%Y:%m:%d %H:%M:%S')
        except ValueError:
            logger.debug(f"Could not parse date '{date_taken_str}' for {file_path}. Keeping as None.")
            pass # exiftool sometimes gives a different format, handle as string or None

    video_data = {
        'file_name': file_name,
        'file_location': file_location,
        'resolution': f"{metadata.get('ImageWidth')}x{metadata.get('ImageHeight')}" if metadata.get('ImageWidth') and metadata.get('ImageHeight') else None,
        'size': os.path.getsize(file_path),
        'latitude': metadata.get('GPSLatitude'),
        'longitude': metadata.get('GPSLongitude'),
        'altitude': metadata.get('GPSAltitude'),
        'date_taken': date_taken_dt, # Pass datetime object directly
        'camera_make': metadata.get('Make'),
        'camera_model': metadata.get('Model'),
        'duration': metadata.get('Duration'),
        'frame_rate': metadata.get('FrameRate'),
        'light_meter': metadata.get('MeteringMode'),
        'lens_id': metadata.get('LensID'),
        'lens_spec': metadata.get('Lens'),
        'circle_of_confusion': None,
        'shutter_speed': str(metadata.get('ShutterSpeedValue') or metadata.get('ExposureTime')) if metadata.get('ShutterSpeedValue') or metadata.get('ExposureTime') else None,
        'aperture': str(metadata.get('FNumber') or metadata.get('ApertureValue')) if metadata.get('FNumber') or metadata.get('ApertureValue') else None,
        'iso': str(metadata.get('ISO')) if metadata.get('ISO') else None,
        'flash': flash_int
    }

    cursor = conn.cursor(dictionary=True) # Use dictionary=True for dict-like rows
    try:
        cursor.execute("SELECT id FROM Videos WHERE file_location = %s AND file_name = %s", (file_location, file_name))
        video_id_row = cursor.fetchone()

        if video_id_row:
            video_id = video_id_row['id']
            update_query = """
                UPDATE Videos SET
                    resolution = %s, size = %s, latitude = %s, longitude = %s, date_taken = %s,
                    camera_make = %s, camera_model = %s, duration = %s, frame_rate = %s,
                    light_meter = %s, lens_id = %s, lens_spec = %s, circle_of_confusion = %s,
                    altitude = %s, shutter_speed = %s, aperture = %s, iso = %s, flash = %s
                WHERE id = %s
            """
            cursor.execute(update_query, (
                video_data['resolution'], video_data['size'], video_data['latitude'], video_data['longitude'],
                video_data['date_taken'], video_data['camera_make'], video_data['camera_model'], video_data['duration'],
                video_data['frame_rate'], video_data['light_meter'], video_data['lens_id'], video_data['lens_spec'],
                video_data['circle_of_confusion'], video_data['altitude'], video_data['shutter_speed'],
                video_data['aperture'], video_data['iso'], video_data['flash'], video_id
            ))
            logger.debug(f"Updated video record for {file_name} (ID: {video_id}).")
        else:
            insert_query = """
                INSERT INTO Videos (
                    file_name, file_location, resolution, size, latitude, longitude, date_taken,
                    camera_make, camera_model, duration, frame_rate, light_meter, lens_id,
                    lens_spec, circle_of_confusion, altitude, shutter_speed, aperture, iso, flash
                ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
            """
            cursor.execute(insert_query, (
                video_data['file_name'], video_data['file_location'], video_data['resolution'], video_data['size'],
                video_data['latitude'], video_data['longitude'], video_data['date_taken'], video_data['camera_make'],
                video_data['camera_model'], video_data['duration'], video_data['frame_rate'], video_data['light_meter'],
                video_data['lens_id'], video_data['lens_spec'], video_data['circle_of_confusion'],
                video_data['altitude'], video_data['shutter_speed'], video_data['aperture'], video_data['iso'], video_data['flash']
            ))
            video_id = cursor.lastrowid
            logger.debug(f"Inserted new video record for {file_name} (ID: {video_id}).")
        conn.commit()
        mark_as_processed(conn, file_path)
        return video_id
    except Exception as e: # Catch all exceptions from mysql.connector
        conn.rollback()
        logger.error(f"Error processing video {file_path}: {e}")
        return None
    finally:
        cursor.close()


def _batch_insert_photo_faces(conn, batch):
    """Inserts a batch of photo-face associations into the photo_faces table."""
    if not batch:
        return 0

    sql = "INSERT IGNORE INTO photo_faces (photo_id, face_id) VALUES (%s, %s)"
    cursor = None
    inserted_count = 0
    try:
        cursor = conn.cursor()
        logger.debug(f"Attempting to insert {len(batch)} photo-face associations into photo_faces. Batch content sample (first 5): {batch[:5]}...")
        cursor.executemany(sql, batch)
        inserted_count = cursor.rowcount
        conn.commit()
        logger.debug(f"Successfully called executemany and commit for photo_faces. cursor.rowcount reported: {inserted_count}.")

        # --- NEW DEBUGGING STEP: Verify count immediately after commit ---
        temp_cursor = conn.cursor()
        temp_cursor.execute("SELECT COUNT(*) FROM photo_faces")
        current_db_count = temp_cursor.fetchone()[0]
        temp_cursor.close()
        logger.debug(f"DEBUG_CHECK: photo_faces table count immediately after commit (from same connection): {current_db_count}")
        # --- END NEW DEBUGGING STEP ---

    except mysql.connector.Error as err:
        logger.error(f"MySQL Error inserting photo-face batch: {err}", exc_info=True)
        conn.rollback() # Rollback on error
    except Exception as e:
        logger.error(f"General Error during photo-face batch insert: {e}", exc_info=True) # Use exc_info=True for full traceback
        conn.rollback()
    finally:
        if cursor:
            cursor.close()
    return inserted_count

def _batch_insert_video_faces(conn, batch):
    """Inserts a batch of video-face associations into the video_faces table."""
    if not batch:
        return 0

    sql = "INSERT IGNORE INTO video_faces (video_id, face_id, frame_number) VALUES (%s, %s, %s)"
    cursor = None
    inserted_count = 0
    try:
        cursor = conn.cursor()
        logger.debug(f"Attempting to insert {len(batch)} video-face associations into video_faces. Batch content sample (first 5): {batch[:5]}...")
        cursor.executemany(sql, batch)
        inserted_count = cursor.rowcount
        conn.commit()
        logger.debug(f"Successfully called executemany and commit for video_faces. cursor.rowcount reported: {inserted_count}.")

        # --- NEW DEBUGGING STEP: Verify count immediately after commit ---
        temp_cursor = conn.cursor()
        temp_cursor.execute("SELECT COUNT(*) FROM video_faces")
        current_db_count = temp_cursor.fetchone()[0]
        temp_cursor.close()
        logger.debug(f"DEBUG_CHECK: video_faces table count immediately after commit (from same connection): {current_db_count}")
        # --- END NEW DEBUGGING STEP ---

    except mysql.connector.Error as err:
        logger.error(f"MySQL Error inserting video-face batch: {err}", exc_info=True)
        conn.rollback() # Rollback on error
    except Exception as e:
        logger.error(f"General Error during video-face batch insert: {e}", exc_info=True) # Use exc_info=True for full traceback
        conn.rollback()
    finally:
        if cursor:
            cursor.close()
    return inserted_count


def process_google_takeout(conn, batch_size=100):
    """
    Processes Google Takeout JSON files to extract face information and associate it with media.
    Uses grep to pre-filter JSONs likely to contain 'people' data.
    Args:
        conn (mysql.connector.connection.MySQLConnection): The database connection object.
        batch_size (int): The number of face associations to insert in one batch.
    """
    logger.info("--- Phase 2: Processing Google Takeout Data for Faces ---")
    
    if not os.path.exists(GOOGLE_TAKEOUT_ROOT_DIR):
        logger.warning(f"Google Takeout root directory '{GOOGLE_TAKEOUT_ROOT_DIR}' does not exist. Skipping Google Takeout processing.")
        return

    takeout_json_files = []
    
    # --- RE-INTEGRATED: Use grep to get a filtered list of JSON files, searching for "people" ---
    # The -l option ensures only filenames are listed. -i for case-insensitivity. -R for recursive.
    grep_command = f"grep -l -i \"people\" \"{GOOGLE_TAKEOUT_ROOT_DIR}\" --include='*.json' -R"
    
    logger.info(f"Using grep to identify relevant JSON files: {grep_command}")
    try:
        # Use shlex.split for safe splitting of the command string with spaces/quotes
        process = subprocess.run(shlex.split(grep_command), capture_output=True, text=True, check=True)
        
        for line in process.stdout.splitlines():
            json_path = line.strip()
            if json_path: # Ensure line is not empty
                takeout_json_files.append(json_path)
        
        logger.info(f"grep identified {len(takeout_json_files)} potential media JSONs with 'people' data.")

    except subprocess.CalledProcessError as e:
        logger.error(f"Error running grep command: {e}")
        logger.error(f"grep stderr: {e.stderr}")
        logger.warning("Falling back to full file system walk for Google Takeout JSONs (less efficient).")
        # Fallback to os.walk if grep fails (e.g., command not found, permissions)
        for root, _, files in os.walk(GOOGLE_TAKEOUT_ROOT_DIR):
            for file in files:
                if file.lower().endswith('.json') and not file.lower().startswith('album_'):
                    takeout_json_files.append(os.path.join(root, file))
    except FileNotFoundError:
        logger.error("grep command not found. Ensure grep is installed and in your system's PATH.")
        logger.warning("Falling back to full file system walk for Google Takeout JSONs (less efficient).")
        for root, _, files in os.walk(GOOGLE_TAKEOUT_ROOT_DIR):
            for file in files:
                if file.lower().endswith('.json') and not file.lower().startswith('album_'):
                    takeout_json_files.append(os.path.join(root, file))
    # --- END: GREP RE-INTEGRATION ---


    if not takeout_json_files:
        logger.info(f"No relevant Google Takeout JSON files found after filtering or in '{GOOGLE_TAKEOUT_ROOT_DIR}'. Please ensure 'GOOGLE_TAKEOUT_ROOT_DIR' is correctly set and contains JSON files with 'people' data or titles.")
        return

    photo_face_batch = []
    video_face_batch = []
    processed_json_with_people_data_count = 0 # Count of JSONs that actually had 'people' data and a media ID match

    for json_file_path in tqdm(takeout_json_files, desc="Processing Takeout JSONs"):
        cursor = None
        try:
            with open(json_file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)

            media_filename = data.get('title')

            if not media_filename:
                logger.debug(f"Skipping JSON {json_file_path}: No 'title' (media filename) found.")
                continue

            # --- UPDATED: Use fuzzy date matching again as it was working for D70_1769.NEF ---
            photo_taken_time_data = data.get('photoTakenTime')
            if not photo_taken_time_data or 'timestamp' not in photo_taken_time_data:
                logger.debug(f"Skipping JSON {json_file_path}: No 'photoTakenTime' or 'timestamp'.")
                continue

            try:
                json_timestamp_int = int(photo_taken_time_data['timestamp'])
                json_datetime_from_takeout = datetime.fromtimestamp(json_timestamp_int)

                time_window_hours = 3 # Define your time window for fuzzy matching
                start_time = json_datetime_from_takeout - timedelta(hours=time_window_hours)
                end_time = json_datetime_from_takeout + timedelta(hours=time_window_hours)

            except (ValueError, TypeError) as e:
                logger.error(f"Could not parse photoTakenTime timestamp from JSON {json_file_path}: {e}. Skipping.")
                continue

            media_id = None
            media_type = None
            base_media_filename = os.path.splitext(media_filename)[0]

            cursor = conn.cursor(dictionary=True)

            if media_filename.lower().endswith(tuple(IMAGE_EXTENSIONS)):
                query = """
                SELECT id FROM Photos
                WHERE file_name LIKE %s AND date_taken BETWEEN %s AND %s
                ORDER BY ABS(UNIX_TIMESTAMP(date_taken) - %s)
                LIMIT 1
                """
                cursor.execute(query, (f"{base_media_filename}%", start_time, end_time, json_timestamp_int))
                photo_match = cursor.fetchone()
                if photo_match:
                    media_id = photo_match['id']
                    media_type = 'photo'
                # Do NOT call process_image here if it's not found, as --only-takeout implies we only process linked Takeout media,
                # which must exist from a prior local scan. If it's not in the DB, it can't be linked.
            elif media_filename.lower().endswith(tuple(VIDEO_EXTENSIONS)):
                query = """
                SELECT id FROM Videos
                WHERE file_name LIKE %s AND date_taken BETWEEN %s AND %s
                ORDER BY ABS(UNIX_TIMESTAMP(date_taken) - %s)
                LIMIT 1
                """
                cursor.execute(query, (f"{base_media_filename}%", start_time, end_time, json_timestamp_int))
                video_match = cursor.fetchone()
                if video_match:
                    media_id = video_match['id']
                    media_type = 'video'
                # Do NOT call process_video here if it's not found
            else:
                logger.debug(f"Skipping JSON {json_file_path}: Media file '{media_filename}' is not a recognized image or video type.")
                continue
            # --- END OF FUZZY DATE MATCHING ---

            if not media_id:
                logger.debug(f"Skipping JSON {json_file_path}: Media file '{media_filename}' (base: '{base_media_filename}') not found in Photos or Videos table within date range.")
                continue

            if 'people' in data and data['people']: # Check if 'people' key exists and is not empty
                for person_data in data['people']:
                    person_name = person_data.get('name')
                    if person_name:
                        face_id = get_or_create_face_id(conn, person_name) 
                        if face_id: # Ensure face_id was successfully obtained
                            if media_type == 'photo':
                                photo_face_batch.append((media_id, face_id))
                                logger.debug(f"Queued photo-face association for '{person_name}' (ID: {face_id}) with media ID {media_id}. Current photo_face_batch size: {len(photo_face_batch)}")
                            elif media_type == 'video':
                                video_face_batch.append((media_id, face_id, 0)) # Assuming frame_number 0 for now
                                logger.debug(f"Queued video-face association for '{person_name}' (ID: {face_id}) with media ID {media_id}. Current video_face_batch size: {len(video_face_batch)}")

                        # Batch insert check *inside* the person loop (so it checks after each person is added)
                        if len(photo_face_batch) >= batch_size:
                            _batch_insert_photo_faces(conn, photo_face_batch)
                            photo_face_batch = []
                        if len(video_face_batch) >= batch_size:
                            _batch_insert_video_faces(conn, video_face_batch)
                            video_face_batch = []
                    else:
                        logger.debug(f"Skipping person in JSON {json_file_path}: 'name' not found in person data: {person_data}")
                processed_json_with_people_data_count += 1 
            else:
                logger.debug(f"Skipping JSON {json_file_path}: No 'people' data found or 'people' array is empty.")


        except json.JSONDecodeError as e:
            logger.error(f"Error decoding JSON file {json_file_path}: {e}")
        except Exception as e:
            logger.error(f"An unexpected error occurred while processing {json_file_path}: {e}", exc_info=True)
        finally:
            if cursor:
                cursor.close()

    # Insert any remaining items in the batches
    if photo_face_batch:
        _batch_insert_photo_faces(conn, photo_face_batch)
    if video_face_batch:
        _batch_insert_video_faces(conn, video_face_batch)

    logger.info(f"Finished processing Google Takeout data. Processed {processed_json_with_people_data_count} media JSONs that had associated face data.")

def get_or_create_place_id(conn, lat, lon, nominatim_data):
    """
    Retrieves the ID for a given place from the 'Places' table, or creates a new entry.
    Uses GeocodingCache to avoid redundant API calls.
    Args:
        conn (mysql.connector.connection.MySQLConnection): The database connection object.
        lat (float): Latitude.
        lon (float): Longitude.
        nominatim_data (dict): The parsed JSON response from Nominatim for this coordinate.
    Returns:
        int: The ID of the place in the 'Places' table.
    """
    cursor = conn.cursor(dictionary=True)
    place_id = None
    
    try:
        # 1. Check GeocodingCache first
        cursor.execute("SELECT osm_id, display_name FROM GeocodingCache WHERE latitude = %s AND longitude = %s", (lat, lon))
        cached_result = cursor.fetchone()

        if cached_result:
            logger.debug(f"Found cached geocoding for {lat},{lon}.")
            # If found in cache, ensure it's also in Places table
            cursor.execute("SELECT id FROM Places WHERE osm_id = %s", (cached_result['osm_id'],))
            place_row = cursor.fetchone()
            if place_row:
                place_id = place_row['id']
            else:
                # This scenario should be rare if cache and places are consistent, but handle it
                logger.warning(f"Cached OSM ID {cached_result['osm_id']} not found in Places table. Re-inserting.")
                # Fall through to insert logic below using cached_result data
                nominatim_data = {
                    'osm_id': cached_result['osm_id'],
                    'osm_type': 'cached', # Indicate it came from cache, type might be unknown
                    'display_name': cached_result['display_name'],
                    'address': {
                        'city': None, 'state': None, 'country': None # Placeholder, cache might not store these
                    }
                }
                # Attempt to parse city/state/country from display_name if possible, or leave None
                parts = cached_result['display_name'].split(', ')
                if len(parts) >= 3:
                    nominatim_data['address']['country'] = parts[-1]
                    nominatim_data['address']['state'] = parts[-2]
                    nominatim_data['address']['city'] = parts[-3]
        else:
            # 2. If not in cache, we must have just called Nominatim, so use nominatim_data
            pass # nominatim_data is already available from the caller

        # If place_id is still None (not found in cache or cache inconsistent), insert into Places
        if place_id is None:
            osm_id = nominatim_data.get('osm_id')
            display_name = nominatim_data.get('display_name')
            osm_type = nominatim_data.get('osm_type')
            address = nominatim_data.get('address', {})
            city = address.get('city') or address.get('town') or address.get('village')
            state = address.get('state')
            country = address.get('country')

            try:
                cursor.execute("""
                    INSERT INTO Places (osm_id, osm_type, display_name, city, state, country, latitude, longitude)
                    VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
                    ON DUPLICATE KEY UPDATE
                        osm_type = VALUES(osm_type), display_name = VALUES(display_name),
                        city = VALUES(city), state = VALUES(state), country = VALUES(country),
                        latitude = VALUES(latitude), longitude = VALUES(longitude)
                """, (osm_id, osm_type, display_name, city, state, country, lat, lon))
                conn.commit()
                place_id = cursor.lastrowid
                logger.debug(f"Inserted/Updated place record for '{display_name}' (ID: {place_id}).")
            except Exception as e:
                conn.rollback()
                logger.warning(f"Race condition or integrity error when inserting place '{display_name}': {e}. Retrying select.")
                # If it was a duplicate key error, fetch the existing ID
                cursor.execute("SELECT id FROM Places WHERE osm_id = %s", (osm_id,))
                result = cursor.fetchone()
                if result:
                    place_id = result['id']
                else:
                    logger.error(f"Failed to get or create place ID for '{display_name}' after retry.")
                    raise

        # 3. Update GeocodingCache (or insert if not present)
        cursor.execute("""
            INSERT INTO GeocodingCache (latitude, longitude, osm_id, display_name, geocoded_at)
            VALUES (%s, %s, %s, %s, %s)
            ON DUPLICATE KEY UPDATE
                osm_id = VALUES(osm_id), display_name = VALUES(display_name), geocoded_at = VALUES(geocoded_at)
        """, (lat, lon, nominatim_data.get('osm_id'), nominatim_data.get('display_name'), datetime.now()))
        conn.commit()

    except Exception as e:
        conn.rollback()
        logger.error(f"Error in get_or_create_place_id for {lat},{lon}: {e}")
        raise
    finally:
        cursor.close()
    return place_id

last_nominatim_request_time = 0

def reverse_geocode_coordinates(lat, lon):
    """
    Performs reverse geocoding using Nominatim API.
    Implements rate limiting and returns parsed JSON data.
    Args:
        lat (float): Latitude.
        lon (float): Longitude.
    Returns:
        dict or None: Parsed JSON response from Nominatim, or None on error.
    """
    global last_nominatim_request_time

    # Rate limiting
    time_since_last_request = time.time() - last_nominatim_request_time
    if time_since_last_request < NOMINATIM_DELAY_SECONDS:
        sleep_time = NOMINATIM_DELAY_SECONDS - time_since_last_request
        logger.debug(f"Rate limiting: Sleeping for {sleep_time:.2f} seconds before next Nominatim request.")
        time.sleep(sleep_time)

    params = {
        'lat': lat,
        'lon': lon,
        'format': 'json',
        'addressdetails': 1 # Request detailed address components
    }
    headers = {
        'User-Agent': NOMINATIM_USER_AGENT
    }

    try:
        logger.debug(f"Querying Nominatim for {lat},{lon}...")
        response = requests.get(NOMINATIM_API_URL, params=params, headers=headers, timeout=10)
        last_nominatim_request_time = time.time() # Update last request time immediately after sending
        response.raise_for_status() # Raise an HTTPError for bad responses (4xx or 5xx)
        data = response.json()
        
        if data and data.get('osm_id'):
            logger.debug(f"Nominatim response for {lat},{lon}: {data.get('display_name')}")
            return data
        else:
            logger.warning(f"Nominatim returned no valid result for {lat},{lon}: {data}")
            return None
    except requests.exceptions.Timeout:
        logger.error(f"Nominatim request timed out for {lat},{lon}.")
        return None
    except requests.exceptions.RequestException as e:
        logger.error(f"Error querying Nominatim for {lat},{lon}: {e}")
        return None
    except json.JSONDecodeError as e:
        logger.error(f"Error decoding Nominatim JSON response for {lat},{lon}: {e}")
        return None

def process_places(conn):
    """
    Processes media files with GPS coordinates to perform reverse geocoding
    and populate the Places and photo_places/video_places tables.
    Args:
        conn (mysql.connector.connection.MySQLConnection): The database connection object.
    """
    logger.info("--- Phase 3: Reverse Geocoding for Places ---")
    
    cursor = conn.cursor(dictionary=True)
    
    # Collect unique (latitude, longitude) pairs from Photos and Videos that haven't been geocoded
    # and are not yet linked to a place.
    # This query needs to be carefully constructed to be efficient.
    
    # Find unique lat/lon from Photos not yet in GeocodingCache
    photos_to_geocode_query = """
        SELECT DISTINCT p.latitude, p.longitude
        FROM Photos p
        LEFT JOIN GeocodingCache gc ON p.latitude = gc.latitude AND p.longitude = gc.longitude
        WHERE p.latitude IS NOT NULL AND p.longitude IS NOT NULL AND gc.latitude IS NULL;
    """
    
    # Find unique lat/lon from Videos not yet in GeocodingCache
    videos_to_geocode_query = """
        SELECT DISTINCT v.latitude, v.longitude
        FROM Videos v
        LEFT JOIN GeocodingCache gc ON v.latitude = gc.latitude AND v.longitude = gc.longitude
        WHERE v.latitude IS NOT NULL AND v.longitude IS NOT NULL AND gc.latitude IS NULL;
    """
    
    unique_coords_to_geocode = set()

    try:
        cursor.execute(photos_to_geocode_query)
        for row in cursor.fetchall():
            unique_coords_to_geocode.add((row['latitude'], row['longitude']))

        cursor.execute(videos_to_geocode_query)
        for row in cursor.fetchall():
            unique_coords_to_geocode.add((row['latitude'], row['longitude']))
    except Exception as e:
        logger.error(f"Error collecting coordinates for geocoding: {e}")
        cursor.close()
        return
    finally:
        cursor.close() # Close cursor after fetching all coordinates

    if not unique_coords_to_geocode:
        logger.info("No new unique coordinates found for geocoding.")
        return

    logger.info(f"Found {len(unique_coords_to_geocode)} unique coordinates to geocode.")

    # Process each unique coordinate
    for lat, lon in tqdm(unique_coords_to_geocode, desc="Geocoding unique coordinates"):
        nominatim_data = reverse_geocode_coordinates(lat, lon)
        if nominatim_data:
            try:
                place_id = get_or_create_place_id(conn, lat, lon, nominatim_data)
                if place_id:
                    # Now link media files to this place_id
                    link_cursor = conn.cursor()
                    
                    # Link Photos
                    link_cursor.execute("""
                        INSERT IGNORE INTO photo_places (photo_id, place_id)
                        SELECT id, %s FROM Photos
                        WHERE latitude = %s AND longitude = %s
                    """, (place_id, lat, lon))
                    
                    # Link Videos
                    link_cursor.execute("""
                        INSERT IGNORE INTO video_places (video_id, place_id)
                        SELECT id, %s FROM Videos
                        WHERE latitude = %s AND longitude = %s
                    """, (place_id, lat, lon))
                    
                    conn.commit()
                    link_cursor.close()
                    logger.debug(f"Linked media to place ID {place_id} for {lat},{lon}.")
                else:
                    logger.warning(f"Could not get or create place ID for {lat},{lon}. Skipping linking.")
            except Exception as e:
                conn.rollback()
                logger.error(f"Error linking media to place for {lat},{lon}: {e}")
        else:
            logger.warning(f"Failed to geocode coordinates {lat},{lon}. Skipping.")
    
    logger.info("Finished reverse geocoding for places.")

# ... (your existing imports and other functions) ...

# --- Main Logic ---
def main():
    parser = argparse.ArgumentParser(description="Process media files and store metadata.")
    parser.add_argument("--config", default=os.path.expanduser("~/.my.cnf"),
                        help="Path to the MySQL .cnf configuration file (default: ~/.my.cnf)")
    parser.add_argument("--section", default=None,
                        help="Section in the .cnf file to use for database connection (default: 'client' or first section)")
    parser.add_argument("-d", "--debug", action="store_true", help="Enable debug logging.")
    parser.add_argument("--takeout-batch-size", type=int, default=100,
                        help="Batch size for inserting face associations from Google Takeout (default: 100).")
    # ADD THIS LINE for --only-takeout
    parser.add_argument("--only-takeout", action="store_true",
                        help="Only process Google Takeout data; skip local media scanning.")


    args = parser.parse_args()

    if args.debug:
        logger.setLevel(logging.DEBUG)
        logger.debug("Debug logging enabled.")

    logger.debug("Attempting to connect to the database...")
    conn = connect_db(args.config, args.section)
    logger.debug("Database connection established. Attempting to create/check tables...")
    create_tables_if_not_exists(conn)
    logger.debug("Tables created/checked. Starting file system scan for media directories...")

    # Conditional execution based on --only-takeout
    if not args.only_takeout: # Only run local media processing if --only-takeout is NOT present
        logger.info("--- Phase 1: Extracting metadata from local files ---")
        files_to_process = []

        # Check if PHOTO_DIR exists before walking it
        if not os.path.exists(PHOTO_DIR):
            logger.warning(f"Media directory '{PHOTO_DIR}' does not exist. Skipping local photo scan.")
        else:
            for root, _, files in os.walk(PHOTO_DIR):
                for file in files:
                    if file.lower().endswith(tuple(IMAGE_EXTENSIONS)):
                        files_to_process.append(os.path.join(root, file))

        # Check if VIDEO_DIR exists before walking it
        if not os.path.exists(VIDEO_DIR):
            logger.warning(f"Media directory '{VIDEO_DIR}' does not exist. Skipping local video scan.")
        else:
            for root, _, files in os.walk(VIDEO_DIR):
                for file in files:
                    if file.lower().endswith(tuple(VIDEO_EXTENSIONS)):
                        files_to_process.append(os.path.join(root, file))

        total_potential_files = len(files_to_process)
        logger.debug(f"Finished initial file system scan. Found {total_potential_files} potential media files.")

        # Filter out already processed files
        new_files_to_process = []
        logger.info(f"Scanning {total_potential_files} potential media files to check processing status...")
        with tqdm(total=total_potential_files, desc="Checking processing status", unit="file") as pbar:
            for file_path in files_to_process:
                if not is_processed(conn, file_path):
                    new_files_to_process.append(file_path)
                pbar.update(1)

        if not new_files_to_process:
            logger.info("No new files found to process in local media directories.")
        else:
            logger.info(f"Found {len(new_files_to_process)} new files to process.")
            for file_path in tqdm(new_files_to_process, desc="Processing local media"):
                if file_path.lower().endswith(tuple(IMAGE_EXTENSIONS)):
                    process_image(conn, file_path)
                elif file_path.lower().endswith(tuple(VIDEO_EXTENSIONS)):
                    process_video(conn, file_path)
        logger.info("Finished processing local media files.")
    else:
        logger.info("Skipping local media processing as --only-takeout was specified.")


    # This part always runs, regardless of --only-takeout
    logger.debug("Starting Google Takeout data processing...")
    process_google_takeout(conn, batch_size=args.takeout_batch_size)

    conn.close()
    logger.info("\n--- Script finished. ---")

if __name__ == "__main__":
    main()



--- Content of ./combined_output.txt ---

--- Content of ./metadata_parser.py ---
import subprocess
import re
from datetime import datetime
import json

EXIFTOOL_FIELDS = [
    "DateTimeOriginal", "CreateDate", "ModifyDate",
    "FileCreateDate", "MediaCreateDate", "MediaModifyDate",
    "TrackCreateDate", "TrackModifyDate", "FileModifyDate"
]

def extract_datetimes(file_path, logger):
    logger.debug(f"Executing exiftool metadata extraction on: {file_path}")
    command = ["exiftool", "-j"] + [f"-{field}" for field in EXIFTOOL_FIELDS] + [file_path]
    logger.debug(f"COMMAND: {' '.join(command)}")

    date_map = {}
    try:
        result = subprocess.run(command, capture_output=True, text=True, check=True)
        logger.debug(f"Raw ExifTool stdout: {result.stdout.strip()[:500]}")
        metadata_raw = json.loads(result.stdout)[0]
        normalized = {k.replace(" ", "").lower(): v for k, v in metadata_raw.items()}
        logger.debug(f"Normalized metadata keys: {list(normalized.keys())}")

        for field in EXIFTOOL_FIELDS:
            key = field.replace(" ", "").lower()
            raw = normalized.get(key)
            if raw:
                dt = sanitize_datetime(raw)
                if dt:
                    logger.debug(f"Accepted datetime for '{field}': {dt}")
                    date_map[field] = dt
                else:
                    logger.debug(f"Rejected datetime for '{field}': {raw}")
            else:
                logger.debug(f"Field '{field}' not found in metadata.")
    except Exception as e:
        logger.warning(f"ExifTool failed: {e}")
    return date_map

def sanitize_datetime(raw):
    try:
        if not raw or str(raw).startswith(("0000", "1970", "None")):
            return None
        match = re.search(r"\d{4}[:\-]\d{2}[:\-]\d{2} \d{2}:\d{2}:\d{2}", str(raw))
        if match:
            cleaned = match.group(0).replace(":", "-", 2)
            return datetime.strptime(cleaned, "%Y-%m-%d %H:%M:%S")
    except:
        return None
    return None

def select_oldest_datetime(date_map, logger, filename=None):
    if date_map:
        selected = min(date_map.values())
        logger.debug(f"Using metadata datetime: {selected}")
        return selected

    logger.debug(f"No metadata found. Trying filename fallback for {filename}")
    match = re.search(r'(\d{4})(\d{2})(\d{2})[_\-]?(\d{2})(\d{2})(\d{2})', filename)
    if match:
        try:
            ts = f"{match.group(1)}-{match.group(2)}-{match.group(3)} {match.group(4)}:{match.group(5)}:{match.group(6)}"
            fallback = datetime.strptime(ts, "%Y-%m-%d %H:%M:%S")
            logger.debug(f"Parsed datetime from filename: {fallback}")
            return fallback
        except Exception as e:
            logger.debug(f"Filename fallback failed: {e}")
    return None


